00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 4/27/2015 8:20:15 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Monitor Project
00000000                             3  * Written by :  Adam Sumner 
00000000                             4  * Date       :  4/28/2015
00000000                             5  * Description:  Monitor Final Project
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  
00000000                             9  *---------------DISCLAIMER!-------------------------*
00000000                            10  *Subroutines are not as optimized as they should be!*
00000000                            11  *Things such as checking for spaces, getting addresses, etc. *
00000000                            12  *can easily be their own subroutines to save code space!*
00000000                            13  *Luckily code size is not a huge concern*
00000000                            14  *This is why there are no plans to optimize in the future*
00000000                            15  
00000000                            16  
00000000                            17  
00003000                            18      ORG    $3000
00003000                            19      
00003000                            20  BUFFER        DS.B      80              ;space for command storage 
00003050                            21  OUTPUTBUFF    DS.B      8               ;to output numbers easily
00003058= 4D 4F 4E 49 54 4F ...     22  PROMPT        DC.B      'MONITOR441>'   ;prompt definition
00003063                            23  
00003063                            24  *Help text*
00003063= 4C 69 73 74 20 6F ...     25  HTXT          DC.B      'List of Commands:'
00003074= 4D 44 53 50 20 3C ...     26  HTXT1         DC.B      'MDSP <address1> <address2> - Memory Display: Outputs the address and memory' 
000030BF= 63 6F 6E 74 65 6E ...     27  HTXT1A        DC.B      'contents from <address1> to <address2> amd from <address1> to' 
000030FC= 3C 61 64 64 72 65 ...     28  HTXT1B        DC.B      '<address2 + 16bytes>'
00003110= 48 58 44 45 43 20 ...     29  HTXT2         DC.B      'HXDEC <num> - Conversion: Converts a hexadecimal number to a decimal number'
0000315B= 53 4F 52 54 57 20 ...     30  HTXT3         DC.B      'SORTW <option> <address1> <address2> - Sort: Sorts a block of memory.'
000031A0= 3C 6F 70 74 69 6F ...     31  HTXT3A        DC.B      '<option> specifies the order in which the list is sorted:'
000031D9= 3B 41 20 2D 20 41 ...     32  HTXT3B        DC.B      ';A - Ascending Order'
000031ED= 3B 44 20 2D 20 44 ...     33  HTXT3C        DC.B      ';D - Descending Order'
00003202= 2D 28 64 65 66 61 ...     34  HTXT3D        DC.B      '-(default) - Descending Order'
0000321F= 53 6F 72 74 73 20 ...     35  HTXT3E        DC.B      'Sorts block of memory from <address1> to <address2>'
00003252= 4D 4D 20 3C 6F 70 ...     36  HTXT4         DC.B      'MM <option> <address> - Memory Modify: Display memory and, as required,'
00003299= 6D 6F 64 69 66 79 ...     37  HTXT4A        DC.B      'modify data or enter new data. <option> specifies the number of bytes'
000032DE= 64 69 73 70 6C 61 ...     38  HTXT4B        DC.B      'displayed for each address:'
000032F9= 2D 28 64 65 66 61 ...     39  HTXT4C        DC.B      '-(default) - Displays one byte'
00003317= 3B 57 20 2D 20 44 ...     40  HTXT4D        DC.B      ';W - Displays one word(2 bytes)'
00003336= 3B 4C 20 2D 20 44 ...     41  HTXT4E        DC.B      ';L - Displays one long word(4 bytes)'
0000335A= 4D 53 20 3C 64 61 ...     42  HTXT5         DC.B      'MS <data> <address> - Memory Set: Alters memory by setting <data> into' 
000033A0= 3C 61 64 64 72 65 ...     43  HTXT5A        DC.B      '<address>'
000033A9= 42 46 20 3C 64 61 ...     44  HTXT6         DC.B      'BF <data> <address1> <address2> - Block Fill: Fills memory starting at' 
000033EF= 3C 61 64 64 72 65 ...     45  HTXT6A        DC.B      '<address1> to <address2>. Both must be even addresses. This command only'
00003437= 77 6F 72 6B 73 20 ...     46  HTXT6B        DC.B      'works with a word-sized <data> pattern'
0000345D= 42 4D 4F 56 20 3C ...     47  HTXT7         DC.B      'BMOV <address1> <address2> <address3> <address4> - Block Move: Moves' 
000034A1= 61 20 64 75 70 6C ...     48  HTXT7A        DC.B      'a duplicate block of memory from <address1> to <address2> into the block'
000034E9= 3C 61 64 64 72 65 ...     49  HTXT7B        DC.B      '<address3> to <address4>'
00003501= 42 54 53 54 20 3C ...     50  HTXT8         DC.B      'BTST <data> <address1> <address2> - Block Test: Tests a block of memory'
00003548= 66 72 6F 6D 20 3C ...     51  HTXT8A        DC.B      'from <address1> to <address2> for <data>'
00003570= 42 53 43 48 20 3C ...     52  HTXT9         DC.B      'BSCH <data> <address1> <address2> - Block Search: Searches for <data> in'
000035B8= 69 6E 20 6D 65 6D ...     53  HTXT9A        DC.B      'in memory block from <address1> to <address2>'
000035E5= 47 4F 20 3C 61 64 ...     54  HTXT10        DC.B      'GO <address> - Execute Program: Executes program at <address>'
00003622= 44 46 20 2D 20 44 ...     55  HTXT11        DC.B      'DF - Display Formatted Registers: Displays all registers'
0000365A= 48 45 4C 50 20 2D ...     56  HTXT12        DC.B      'HELP - Help: Displays all available commands and their description'
0000369C= 45 43 48 4F 20 3C ...     57  HTXT13        DC.B      'ECHO <data> - Echo: Displays <data> to the terminal'
000036CF= 2E 3C 52 65 67 69 ...     58  HTXT14        DC.B      '.<Register Type><Register Number> <data>- Modify Register: Modifies the'
00003716= 63 6F 6E 74 65 6E ...     59  HTXT15        DC.B      'contents of register <Register Type><Register Number> to <data>'
00003755                            60  
00003755                            61  *Error Message*
00003755= 45 52 52 4F 52 3A ...     62  ERROR         DC.B      'ERROR: TRY COMMAND AGAIN WITH CORRECT SYNTAX'
00003781                            63  
00003781                            64  *Space*
00003781= 20                        65  SPACE         DC.B      ' '
00003782                            66  
00003782                            67  *Debugger Print Statement*
00003782= 57 49 4E                  68  DEBUG         DC.B      'WIN'      
00003785                            69  
00003785                            70  *BTST Text*
00003785= 4E 75 6D 62 65 72 ...     71  BTST1         DC.B      'Number written was: '
00003799= 4E 75 6D 62 65 72 ...     72  BTST2         DC.B      'Number read was: '
000037AA= 42 6C 6F 63 6B 20 ...     73  BTST3         DC.B      'Block Test PASSES!'
000037BC= 46 41 49 4C 55 52 ...     74  BTST4         DC.B      'FAILURE!!!!'  
000037C7= 45 72 72 6F 72 20 ...     75  BTST5         DC.B      'Error Occurred at address: '      
000037E2                            76  
000037E2                            77  *BSCH Text*
000037E2= 44 61 74 61 3A 20         78  BSCH1         DC.B      'Data: '
000037E8= 46 6F 75 6E 64 20 ...     79  BSCH2         DC.B      'Found at address: '
000037FA= 50 61 74 74 65 72 ...     80  BSCH3         DC.B      'Pattern not found'
0000380B                            81  
0000380B                            82  *DF Text*
0000380B= 44 30 3A 20               83  RD0            DC.B      'D0: '
0000380F= 44 31 3A 20               84  RD1            DC.B      'D1: '
00003813= 44 32 3A 20               85  RD2            DC.B      'D2: '
00003817= 44 33 3A 20               86  RD3            DC.B      'D3: '
0000381B= 44 34 3A 20               87  RD4            DC.B      'D4: '
0000381F= 44 35 3A 20               88  RD5            DC.B      'D5: '
00003823= 44 36 3A 20               89  RD6            DC.B      'D6: '
00003827= 44 37 3A 20               90  RD7            DC.B      'D7: '
0000382B                            91  
0000382B= 41 30 3A 20               92  RA0            DC.B      'A0: '
0000382F= 41 31 3A 20               93  RA1            DC.B      'A1: '
00003833= 41 32 3A 20               94  RA2            DC.B      'A2: '
00003837= 41 33 3A 20               95  RA3            DC.B      'A3: '
0000383B= 41 34 3A 20               96  RA4            DC.B      'A4: '
0000383F= 41 35 3A 20               97  RA5            DC.B      'A5: '
00003843= 41 36 3A 20               98  RA6            DC.B      'A6: '
00003847                            99  
00003847= 53 53 2F 41 37 3A 20     100  RSS            DC.B      'SS/A7: '
0000384E= 55 53 3A 20              101  RUS            DC.B      'US: '
00003852= 50 43 3A 20              102  RPC            DC.B      'PC: '
00003856= 53 52 3A 20              103  RSR            DC.B      'SR: '
0000385A                           104  
0000385A                           105  *Exception Messages*
0000385A= 41 20 42 75 73 20 ...    106  BERR_TEXT      DC.B 'A Bus Error Occured! :(',0
00003872= 41 6E 20 41 64 64 ...    107  AERR_TEXT      DC.B 'An Address Error Occured! :(',0
0000388F= 41 6E 20 49 6C 6C ...    108  IERR_TEXT      DC.B 'An Illegal Instruction Error Occured! :(',0
000038B8= 41 20 50 72 69 76 ...    109  PERR_TEXT      DC.B 'A Privilege Error Occured! :(',0
000038D6= 41 20 44 69 76 69 ...    110  ZERR_TEXT      DC.B 'A Divide by Zero Error Occured! :(',0
000038F9= 41 6E 20 41 20 4C ...    111  ALERR_TEXT      DC.B 'An A Line Error Occured! :(',0
00003915= 41 6E 20 46 20 4C ...    112  FLERR_TEXT      DC.B 'An F Line Error Occured! :(',0
00003931= 41 20 43 68 65 63 ...    113  CHKERR_TEXT      DC.B 'A Check Error Occured! :(',0
0000394B                           114  
0000394B= 53 53 57 3A 20 00        115  SSW            DC.B 'SSW: ',0
00003951= 42 41 3A 20 00           116  BA             DC.B 'BA: ',0
00003956= 49 52 3A 20 00           117  IR             DC.B 'IR: ',0
0000395B                           118  
0000395B                           119  *Color definition for Font*
0000395B  =01090000                120  FONT        EQU     $01090000  
0000395B  =0000FF00                121  GREEN       EQU     $0000FF00
0000395B                           122  
00001000                           123      ORG     $1000
00001000                           124  START:  
00001000  48E7 E040                125          MOVEM.L D0-D2/A1,-(SP)
00001004                           126          *Makes it look like a REAL terminal*
00001004  223C 0000FF00            127          MOVE.L  #GREEN,D1
0000100A  243C 01090000            128          MOVE.L  #FONT,D2
00001010  103C 0015                129          MOVE.B  #21,D0
00001014  4E4F                     130          TRAP    #15
00001016  4281                     131          CLR.L   D1
00001018  4282                     132          CLR.L   D2
0000101A  4200                     133          CLR.B   D0
0000101C                           134          *Load custom exceptions*
0000101C  43F9 000024E8            135          LEA BERR,A1 ;init exception handlers
00001022  21C9 0008                136          MOVE.L A1,$8
00001026  43F9 00002556            137          LEA AERR,A1
0000102C  21C9 000C                138          MOVE.L A1,$C
00001030  43F9 000025C4            139          LEA IERR,A1
00001036  21C9 0010                140          MOVE.L A1,$10
0000103A  43F9 000025F8            141          LEA ZERR,A1
00001040  21C9 0014                142          MOVE.L A1,$14
00001044  43F9 00002646            143          LEA CHKERR,A1
0000104A  21C9 0018                144          MOVE.L  A1,$18
0000104E  43F9 000025DE            145          LEA PERR,A1
00001054  21C9 0020                146          MOVE.L A1,$20
00001058  43F9 00002612            147          LEA ALERR,A1
0000105E  21C9 0028                148          MOVE.L A1,$28
00001062  43F9 0000262C            149          LEA FLERR,A1
00001068  21C9 002C                150          MOVE.L A1,$2C
0000106C  4CDF 0207                151          MOVEM.L (SP)+,D0-D2/A1  ;restore any preset values
00001070                           152  
00001070                           153  *--------------------------------------------------------------------------------------*
00001070                           154  SHELL:       
00001070  4878 1070                155              PEA     *           ;save PC on Stack for DF
00001074  588F                     156              ADD.L   #4,SP       ;get original value of stack pointer
00001076  2F4F FFF8                157              MOVE.L  SP,-8(SP)   ;save it
0000107A  DFFC FFFFFFF8            158              ADD.L   #-8,SP      ;update Stack position
00001080  40E7                     159              MOVE    SR,-(SP)    ;save Status register for use with DF
00001082  2F0E                     160              MOVE.L  A6,-(SP)    ;temp save
00001084  4E6E                     161              MOVE    USP,A6      ;for use with DF command
00001086  2F0E                     162              MOVE.L  A6,-(SP)    ;store USP to STACK
00001088  588F                     163              ADD.L   #4,SP       
0000108A  2C57                     164              MOVE.L  (SP),A6    ;restore original value
0000108C  2F67 0004                165              MOVE.L  -(SP),4(SP)  ;move correct value to correct stack position
00001090  588F                     166              ADD.L   #4,SP       ;point stack to CORRECT PLACE
00001092                           167              
00001092                           168  
00001092  48E7 FFFE                169              MOVEM.L D0-D7/A0-A6,-(SP)  ;save initial values of registers
00001096  48E7 FFFE                170              MOVEM.L D0-D7/A0-A6,-(SP)  ;unorthodox implementation to save registers when using DF command
0000109A                           171               
0000109A                           172                
0000109A  43F8 3058                173              LEA  PROMPT,A1      ;Load message            
0000109E  323C 000B                174              MOVE.W  #11,D1      ;load n bytes
000010A2  103C 0001                175              MOVE.B  #1,D0       ;set up trap call
000010A6  4E4F                     176              TRAP    #15
000010A8  43F8 3000                177              LEA     BUFFER,A1   ;set up storage for command
000010AC  103C 0002                178              MOVE.B  #2,D0       ;load input trap call
000010B0  4E4F                     179              TRAP    #15
000010B2  0C11 0048                180              CMP.B   #$48,(A1)   ;check for help/hxdc
000010B6  6700 017C                181              BEQ     HELPORHXDC
000010BA  0C11 004D                182              CMP.B   #$4D,(A1)   ;check for memory command
000010BE  6700 01AC                183              BEQ     MEMTEST
000010C2  0C11 0047                184              CMP.B   #$47,(A1)   ;check for go
000010C6  6700 0154                185              BEQ     GOTST
000010CA  0C11 0044                186              CMP.B   #$44,(A1)   ;check for df
000010CE  6700 00FE                187              BEQ     DFTST
000010D2  0C11 0042                188              CMP.B   #$42,(A1)   ;check for blck command
000010D6  6700 005C                189              BEQ     BLCKTEST
000010DA  0C11 0053                190              CMP.B   #$53,(A1)   ;check for sort command
000010DE  6700 0106                191              BEQ     SORTTEST
000010E2  0C11 0045                192              CMP.B   #$45,(A1)   ;check for echo command
000010E6  6700 0026                193              BEQ     ECHOTEST
000010EA  0C11 002E                194              CMP.B   #$2E,(A1)   ;check for modify register command
000010EE  6700 0204                195              BEQ     MODIFYREGTEST
000010F2  6000 156C                196              BRA     ERRORSR
000010F6  4CDF 7FFF                197  RESTORE:    MOVEM.L (SP)+,D0-D7/A0-A6
000010FA  4CDF 7FFF                198              MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
000010FE  588F                     199              ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001100                           200                                  ;EASY68k simulator starts in supervisor mode
00001100  46DF                     201              MOVE    (SP)+,SR
00001102  201F                     202              MOVE.L  (SP)+,D0    ;save stack cuz it'll get destroyed
00001104  588F                     203              ADD.L   #4,SP       ;get rid of PC, itll fix itself
00001106  2E40                     204              MOVE.L  D0,SP
00001108  4280                     205              CLR.L   D0          ;no longer needed
0000110A                           206  
0000110A  6000 FF64                207              BRA     SHELL
0000110E                           208  *--------------------------------------------------------------------------------------*
0000110E                           209  
0000110E  5289                     210  ECHOTEST:   ADD.L   #1,A1
00001110  0C19 0043                211              CMP.B   #$43,(A1)+   ;C?
00001114  6600 154A                212              BNE     ERRORSR
00001118  0C19 0048                213              CMP.B   #$48,(A1)+   ;H?
0000111C  6600 1542                214              BNE     ERRORSR
00001120  0C19 004F                215              CMP.B   #$4F,(A1)+   ;O?
00001124  6600 153A                216              BNE     ERRORSR
00001128  0C19 0020                217              CMP.B   #$20,(A1)+   ;SPACE?
0000112C  6700 01DC                218              BEQ     ECHO
00001130  6000 152E                219              BRA     ERRORSR
00001134                           220  *--------------------------------------------------------------------------------------*
00001134                           221  
00001134                           222  
00001134                           223  *--------------------------------------------------------------------------------------*
00001134                           224  
00001134  5289                     225  BLCKTEST:   ADD.L   #1,A1
00001136  0C11 0046                226              CMP.B   #$46,(A1)   ;BF?
0000113A  6700 0084                227              BEQ     BFTEST
0000113E  0C11 004D                228              CMP.B   #$4D,(A1)   ;BMOV?
00001142  6700 005A                229              BEQ     BMOVTEST
00001146  0C11 0054                230              CMP.B   #$54,(A1)   ;BTST?
0000114A  6700 0030                231              BEQ     BTSTTEST
0000114E  0C11 0053                232              CMP.B   #$53,(A1)   ;BSCH?
00001152  6700 0006                233              BEQ     BSCHTEST
00001156  6000 1508                234              BRA     ERRORSR
0000115A                           235  *--------------------------------------------------------------------------------------*
0000115A                           236  
0000115A  5289                     237  BSCHTEST:   ADD.L   #1,A1
0000115C  0C11 0043                238              CMP.B   #$43,(A1)
00001160  6600 14FE                239              BNE     ERRORSR
00001164  5289                     240              ADD.L   #1,A1
00001166  0C11 0048                241              CMP.B   #$48,(A1)
0000116A  6600 14F4                242              BNE     ERRORSR
0000116E  5289                     243              ADD.L   #1,A1
00001170  0C11 0020                244              CMP.B   #$20,(A1)
00001174  6600 14EA                245              BNE     ERRORSR
00001178  6000 0F06                246              BRA     BSCH
0000117C                           247                        
0000117C                           248  *--------------------------------------------------------------------------------------*
0000117C                           249  
0000117C                           250  BTSTTEST:   
0000117C  5289                     251              ADD.L   #1,A1
0000117E  0C11 0053                252              CMP.B   #$53,(A1)
00001182  6600 14DC                253              BNE     ERRORSR
00001186  5289                     254              ADD.L   #1,A1
00001188  0C11 0054                255              CMP.B   #$54,(A1)
0000118C  6600 14D2                256              BNE     ERRORSR
00001190  5289                     257              ADD.L   #1,A1
00001192  0C11 0020                258              CMP.B   #$20,(A1)
00001196  6600 14C8                259              BNE     ERRORSR
0000119A  6000 0E0E                260              BRA     BTST
0000119E                           261  
0000119E                           262  *--------------------------------------------------------------------------------------*
0000119E                           263  
0000119E  5289                     264  BMOVTEST:   ADD.L   #1,A1
000011A0  0C11 004F                265              CMP.B   #$4F,(A1)
000011A4  6600 14BA                266              BNE     ERRORSR
000011A8  5289                     267              ADD.L   #1,A1
000011AA  0C11 0056                268              CMP.B   #$56,(A1)
000011AE  6600 14B0                269              BNE     ERRORSR
000011B2  5289                     270              ADD.L   #1,A1
000011B4  0C11 0020                271              CMP.B   #$20,(A1)
000011B8  6600 14A6                272              BNE     ERRORSR
000011BC  6000 0D5E                273              BRA     BMOV
000011C0                           274  *--------------------------------------------------------------------------------------*
000011C0  5289                     275  BFTEST:     ADD.L   #1,A1
000011C2  0C11 0020                276              CMP.B   #$20,(A1)
000011C6  6600 1498                277              BNE     ERRORSR
000011CA  6000 0CDA                278              BRA     BF
000011CE                           279  *--------------------------------------------------------------------------------------*
000011CE                           280  
000011CE  5289                     281  DFTST:      ADD.L   #1,A1
000011D0  0C11 0046                282              CMP.B   #$46,(A1)
000011D4  6600 148A                283              BNE     ERRORSR
000011D8  5289                     284              ADD.L   #1,A1
000011DA  0C11 0000                285              CMP.B   #$00,(A1)
000011DE  6600 1480                286              BNE     ERRORSR
000011E2  6000 0FA0                287              BRA     DF
000011E6                           288  *--------------------------------------------------------------------------------------*
000011E6                           289  
000011E6  5289                     290  SORTTEST:    ADD.L   #1,A1
000011E8  0C11 004F                291              CMP.B   #$4F,(A1)   ;O?
000011EC  6600 1472                292              BNE     ERRORSR
000011F0  5289                     293               ADD.L   #1,A1
000011F2  0C11 0052                294              CMP.B   #$52,(A1)   ;R?
000011F6  6600 1468                295              BNE     ERRORSR
000011FA  5289                     296              ADD.L   #1,A1
000011FC  0C11 0054                297              CMP.B   #$54,(A1)   ;T?
00001200  6600 145E                298              BNE     ERRORSR
00001204  5289                     299              ADD.L   #1,A1
00001206  0C11 0057                300              CMP.B   #$57,(A1)   ;W?
0000120A  6600 1454                301              BNE     ERRORSR
0000120E  5289                     302              ADD.L   #1,A1
00001210  0C11 0020                303              CMP.B   #$20,(A1)
00001214  6600 144A                304              BNE     ERRORSR
00001218                           305  
00001218  6000 092A                306              BRA     SORTW
0000121C                           307  *--------------------------------------------------------------------------------------*
0000121C                           308  
0000121C  5289                     309  GOTST:      ADD.L   #1,A1
0000121E  0C11 004F                310              CMP.B   #$4F,(A1)
00001222  6600 143C                311              BNE     ERRORSR
00001226  5289                     312              ADD.L   #1,A1
00001228  0C19 0020                313              CMP.B   #$20,(A1)+
0000122C  6600 1432                314              BNE     ERRORSR
00001230  6000 0F34                315              BRA     GO
00001234                           316  *--------------------------------------------------------------------------------------*
00001234                           317  
00001234  5289                     318  HELPORHXDC: ADD.L   #1,A1
00001236  0C11 0045                319              CMP.B   #$45,(A1)   ;is it help?
0000123A  6700 000E                320              BEQ     HELPTST
0000123E  0C11 0058                321              CMP.B   #$58,(A1)   ;or is it hxdc
00001242  6700 0084                322              BEQ     HXDCTEST
00001246  6000 1418                323              BRA     ERRORSR     
0000124A                           324  *--------------------------------------------------------------------------------------*
0000124A                           325  
0000124A                           326  HELPTST:   
0000124A  5289                     327             ADD.L   #1,A1   ; check next char
0000124C  0C11 004C                328             CMP.B    #$4C,(A1) ;check for L
00001250  6600 140E                329             BNE      ERRORSR
00001254  5289                     330             ADD.L   #1,A1
00001256  0C11 0050                331             CMP.B    #$50,(A1)   ;check for P
0000125A  6600 1404                332             BNE      ERRORSR
0000125E  5289                     333             ADD.L   #1,A1   ;check for anything else
00001260  0C11 0000                334             CMP.B    #$00,(A1)
00001264  6600 13FA                335             BNE      ERRORSR
00001268  6000 050E                336             BRA      HELP
0000126C                           337              
0000126C                           338  
0000126C                           339   
0000126C                           340  *--------------------------------------------------------------------------------------*
0000126C                           341              
0000126C  5289                     342  MEMTEST:    ADD.L   #1,A1
0000126E  0C11 0053                343              CMP.B   #$53,(A1)
00001272  6700 0016                344              BEQ     MSSPCTEST
00001276  0C11 0044                345              CMP.B   #$44,(A1)
0000127A  6700 001C                346              BEQ     MDSPCTEST
0000127E  0C11 004D                347              CMP.B   #$4D,(A1)
00001282  6700 0036                348              BEQ     MMSPCTEST
00001286  6000 13D8                349              BRA     ERRORSR
0000128A                           350              
0000128A  5289                     351  MSSPCTEST   ADD.L   #1,A1
0000128C  0C11 0020                352              CMP.B   #$20,(A1)
00001290  6700 072E                353              BEQ     MEMSET
00001294  6000 13CA                354              BRA     ERRORSR
00001298                           355              
00001298                           356  MDSPCTEST:  
00001298  5289                     357              ADD.L   #1,A1
0000129A  0C11 0053                358              CMP.B   #$53,(A1)
0000129E  6600 13C0                359              BNE     ERRORSR
000012A2  5289                     360              ADD.L   #1,A1
000012A4  0C11 0050                361              CMP.B   #$50,(A1)
000012A8  6600 13B6                362              BNE     ERRORSR
000012AC  5289                     363              ADD.L   #1,A1
000012AE  0C11 0020                364              CMP.B   #$20,(A1)
000012B2  6700 0760                365              BEQ     MEMDISP          
000012B6  6000 13A8                366              BRA     ERRORSR
000012BA                           367             
000012BA  5289                     368  MMSPCTEST:  ADD.L   #1,A1
000012BC  0C11 0020                369              CMP.B   #$20,(A1)
000012C0  6700 0968                370              BEQ     MM          
000012C4  6000 139A                371              BRA     ERRORSR
000012C8                           372  *--------------------------------------------------------------------------------------*
000012C8                           373  HXDCTEST:   
000012C8  5289                     374              ADD.L   #1,A1
000012CA  0C11 0044                375              CMP.B   #$44,(A1)
000012CE  6600 1390                376              BNE     ERRORSR
000012D2  5289                     377              ADD.L   #1,A1
000012D4  0C11 0045                378              CMP.B   #$45,(A1)
000012D8  6600 1386                379              BNE     ERRORSR
000012DC  5289                     380              ADD.L   #1,A1
000012DE  0C11 0043                381              CMP.B   #$43,(A1)
000012E2  6600 137C                382              BNE     ERRORSR
000012E6  5289                     383              ADD.L   #1,A1
000012E8  0C11 0020                384              CMP.B   #$20,(A1)
000012EC  6600 1372                385              BNE     ERRORSR
000012F0  6000 07C4                386              BRA     HXDC
000012F4                           387  *--------------------------------------------------------------------------------------*
000012F4                           388  MODIFYREGTEST:
000012F4  5289                     389              ADD.L   #1,A1
000012F6  0C11 0044                390              CMP.B   #$44,(A1)
000012FA  6700 0028                391              BEQ     MRD
000012FE  0C11 0041                392              CMP.B   #$41,(A1)
00001302  6700 0066                393              BEQ     MRA
00001306  6000 1358                394              BRA     ERRORSR
0000130A                           395              
0000130A                           396  *----------------------------USER DEFINED COMMANDS---------------------------------*
0000130A                           397  *--------------------------------------------------------------------------------------*
0000130A                           398  ECHO: *This command was made for fun. What terminal DOESN'T have echo?*
0000130A                           399  
0000130A  2449                     400          MOVE.L  A1,A2   ;setup to find end of string
0000130C  0C1A 0000                401  EEND:   CMP.B   #$00,(A2)+
00001310  6700 0004                402          BEQ     EFOUND
00001314  60F6                     403          BRA     EEND
00001316                           404  EFOUND:
00001316  538A                     405          SUB.L   #1,A2   ;off by one
00001318  95C9                     406          SUB.L   A1,A2   ;find out how many bytes
0000131A  220A                     407          MOVE.L  A2,D1   ;place it for trap function
0000131C  7000                     408          MOVE.L  #0,D0
0000131E  4E4F                     409          TRAP    #15
00001320                           410          
00001320  6000 FDD4                411          BRA RESTORE
00001324                           412  *--------------------------------------------------------------------------------------*
00001324                           413  MODIFYREGS:
00001324                           414  
00001324                           415  MRD:
00001324  5289                     416          ADD.L   #1,A1   ;inc
00001326  0C11 0030                417          CMP.B   #$30,(A1)
0000132A  6700 007C                418          BEQ     MRD0
0000132E  0C11 0031                419          CMP.B   #$31,(A1)
00001332  6700 00B4                420          BEQ     MRD1
00001336  0C11 0032                421          CMP.B   #$32,(A1)
0000133A  6700 00EC                422          BEQ     MRD2
0000133E  0C11 0033                423          CMP.B   #$33,(A1)
00001342  6700 0124                424          BEQ     MRD3
00001346  0C11 0034                425          CMP.B   #$34,(A1)
0000134A  6700 015C                426          BEQ     MRD4
0000134E  0C11 0035                427          CMP.B   #$35,(A1)
00001352  6700 0194                428          BEQ     MRD5
00001356  0C11 0036                429          CMP.B   #$36,(A1)
0000135A  6700 01CC                430          BEQ     MRD6
0000135E  0C11 0037                431          CMP.B   #$37,(A1)
00001362  6700 0204                432          BEQ     MRD7
00001366  6000 12F8                433          BRA     ERRORSR
0000136A                           434  
0000136A                           435  MRA:
0000136A  5289                     436          ADD.L   #1,A1   ;inc
0000136C  0C11 0030                437          CMP.B   #$30,(A1)
00001370  6700 0236                438          BEQ     MRA0
00001374  0C11 0031                439          CMP.B   #$31,(A1)
00001378  6700 026E                440          BEQ     MRA1
0000137C  0C11 0032                441          CMP.B   #$32,(A1)
00001380  6700 02A6                442          BEQ     MRA2
00001384  0C11 0033                443          CMP.B   #$33,(A1)
00001388  6700 02DE                444          BEQ     MRA3
0000138C  0C11 0034                445          CMP.B   #$34,(A1)
00001390  6700 0316                446          BEQ     MRA4
00001394  0C11 0035                447          CMP.B   #$35,(A1)
00001398  6700 034E                448          BEQ     MRA5
0000139C  0C11 0036                449          CMP.B   #$36,(A1)
000013A0  6700 0386                450          BEQ     MRA6
000013A4  6000 12BA                451          BRA     ERRORSR
000013A8                           452               
000013A8                           453  
000013A8                           454  
000013A8                           455          
000013A8                           456          
000013A8                           457  MRD0: 
000013A8  5289                     458          ADD.L   #1,A1
000013AA  0C19 0020                459          CMP.B   #$20,(A1)+
000013AE  6600 12B0                460          BNE     ERRORSR
000013B2  2449                     461          MOVE.L  A1,A2
000013B4  264A                     462          MOVE.L  A2,A3
000013B6  4EB9 00001768            463          JSR     MRDFINDDATA
000013BC  538B                     464          SUB.L   #1,A3
000013BE  4EB9 000026AC            465          JSR     ASCII_ADDRESS   ;convert data to hex
000013C4  2F05                     466          MOVE.L  D5,-(SP)        ;store it temporarily
000013C6  588F                     467          ADD.L   #4,SP       ;dont lose data
000013C8  4CDF 7FFF                468          MOVEM.L (SP)+,D0-D7/A0-A6
000013CC  4CDF 7FFF                469          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
000013D0  588F                     470          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
000013D2                           471                                  ;EASY68k simulator starts in supervisor mode
000013D2  46DF                     472          MOVE    (SP)+,SR
000013D4  588F                     473          ADD.L   #4,SP       ;skip saved stack
000013D6  9FFC 00000086            474          SUB.L   #134,SP     ;find data again
000013DC  2017                     475          MOVE.L  (SP),D0
000013DE  DFFC 0000008A            476          ADD.L   #138,SP     ;go back to original spot
000013E4  6000 FC8A                477          BRA     SHELL
000013E8                           478               
000013E8                           479  MRD1:
000013E8  5289                     480          ADD.L   #1,A1
000013EA  0C19 0020                481          CMP.B   #$20,(A1)+
000013EE  6600 1270                482          BNE     ERRORSR
000013F2  2449                     483          MOVE.L  A1,A2
000013F4  264A                     484          MOVE.L  A2,A3
000013F6  4EB9 00001768            485          JSR     MRDFINDDATA
000013FC  538B                     486          SUB.L   #1,A3
000013FE  4EB9 000026AC            487          JSR     ASCII_ADDRESS   ;convert data to hex
00001404  2F05                     488          MOVE.L  D5,-(SP)        ;store it temporarily
00001406  588F                     489          ADD.L   #4,SP       ;dont lose data
00001408  4CDF 7FFF                490          MOVEM.L (SP)+,D0-D7/A0-A6
0000140C  4CDF 7FFF                491          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001410  588F                     492          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001412                           493                                  ;EASY68k simulator starts in supervisor mode
00001412  46DF                     494          MOVE    (SP)+,SR
00001414  588F                     495          ADD.L   #4,SP       ;skip saved stack
00001416  9FFC 00000086            496          SUB.L   #134,SP     ;find data again
0000141C  2217                     497          MOVE.L  (SP),D1
0000141E  DFFC 0000008A            498          ADD.L   #138,SP     ;go back to original spot
00001424  6000 FC4A                499          BRA     SHELL
00001428                           500  
00001428                           501  MRD2:
00001428  5289                     502          ADD.L   #1,A1
0000142A  0C19 0020                503          CMP.B   #$20,(A1)+
0000142E  6600 1230                504          BNE     ERRORSR
00001432  2449                     505          MOVE.L  A1,A2
00001434  264A                     506          MOVE.L  A2,A3
00001436  4EB9 00001768            507          JSR     MRDFINDDATA
0000143C  538B                     508          SUB.L   #1,A3
0000143E  4EB9 000026AC            509          JSR     ASCII_ADDRESS   ;convert data to hex
00001444  2F05                     510          MOVE.L  D5,-(SP)        ;store it temporarily
00001446  588F                     511          ADD.L   #4,SP       ;dont lose data
00001448  4CDF 7FFF                512          MOVEM.L (SP)+,D0-D7/A0-A6
0000144C  4CDF 7FFF                513          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001450  588F                     514          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001452                           515                                  ;EASY68k simulator starts in supervisor mode
00001452  46DF                     516          MOVE    (SP)+,SR
00001454  588F                     517          ADD.L   #4,SP       ;skip saved stack
00001456  9FFC 00000086            518          SUB.L   #134,SP     ;find data again
0000145C  2417                     519          MOVE.L  (SP),D2
0000145E  DFFC 0000008A            520          ADD.L   #138,SP     ;go back to original spot
00001464  6000 FC0A                521          BRA     SHELL
00001468                           522  
00001468                           523  MRD3:
00001468  5289                     524          ADD.L   #1,A1
0000146A  0C19 0020                525          CMP.B   #$20,(A1)+
0000146E  6600 11F0                526          BNE     ERRORSR
00001472  2449                     527          MOVE.L  A1,A2
00001474  264A                     528          MOVE.L  A2,A3
00001476  4EB9 00001768            529          JSR     MRDFINDDATA
0000147C  538B                     530          SUB.L   #1,A3
0000147E  4EB9 000026AC            531          JSR     ASCII_ADDRESS   ;convert data to hex
00001484  2F05                     532          MOVE.L  D5,-(SP)        ;store it temporarily
00001486  588F                     533          ADD.L   #4,SP       ;dont lose data
00001488  4CDF 7FFF                534          MOVEM.L (SP)+,D0-D7/A0-A6
0000148C  4CDF 7FFF                535          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001490  588F                     536          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001492                           537                                  ;EASY68k simulator starts in supervisor mode
00001492  46DF                     538          MOVE    (SP)+,SR
00001494  588F                     539          ADD.L   #4,SP       ;skip saved stack
00001496  9FFC 00000086            540          SUB.L   #134,SP     ;find data again
0000149C  2617                     541          MOVE.L  (SP),D3
0000149E  DFFC 0000008A            542          ADD.L   #138,SP     ;go back to original spot
000014A4  6000 FBCA                543          BRA     SHELL
000014A8                           544  
000014A8                           545  MRD4:
000014A8  5289                     546          ADD.L   #1,A1
000014AA  0C19 0020                547          CMP.B   #$20,(A1)+
000014AE  6600 11B0                548          BNE     ERRORSR
000014B2  2449                     549          MOVE.L  A1,A2
000014B4  264A                     550          MOVE.L  A2,A3
000014B6  4EB9 00001768            551          JSR     MRDFINDDATA
000014BC  538B                     552          SUB.L   #1,A3
000014BE  4EB9 000026AC            553          JSR     ASCII_ADDRESS   ;convert data to hex
000014C4  2F05                     554          MOVE.L  D5,-(SP)        ;store it temporarily
000014C6  588F                     555          ADD.L   #4,SP       ;dont lose data
000014C8  4CDF 7FFF                556          MOVEM.L (SP)+,D0-D7/A0-A6
000014CC  4CDF 7FFF                557          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
000014D0  588F                     558          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
000014D2                           559                                  ;EASY68k simulator starts in supervisor mode
000014D2  46DF                     560          MOVE    (SP)+,SR
000014D4  588F                     561          ADD.L   #4,SP       ;skip saved stack
000014D6  9FFC 00000086            562          SUB.L   #134,SP     ;find data again
000014DC  2817                     563          MOVE.L  (SP),D4
000014DE  DFFC 0000008A            564          ADD.L   #138,SP     ;go back to original spot
000014E4  6000 FB8A                565          BRA     SHELL
000014E8                           566  
000014E8                           567  MRD5:
000014E8  5289                     568          ADD.L   #1,A1
000014EA  0C19 0020                569          CMP.B   #$20,(A1)+
000014EE  6600 1170                570          BNE     ERRORSR
000014F2  2449                     571          MOVE.L  A1,A2
000014F4  264A                     572          MOVE.L  A2,A3
000014F6  4EB9 00001768            573          JSR     MRDFINDDATA
000014FC  538B                     574          SUB.L   #1,A3
000014FE  4EB9 000026AC            575          JSR     ASCII_ADDRESS   ;convert data to hex
00001504  2F05                     576          MOVE.L  D5,-(SP)        ;store it temporarily
00001506  588F                     577          ADD.L   #4,SP       ;dont lose data
00001508  4CDF 7FFF                578          MOVEM.L (SP)+,D0-D7/A0-A6
0000150C  4CDF 7FFF                579          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001510  588F                     580          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001512                           581                                  ;EASY68k simulator starts in supervisor mode
00001512  46DF                     582          MOVE    (SP)+,SR
00001514  588F                     583          ADD.L   #4,SP       ;skip saved stack
00001516  9FFC 00000086            584          SUB.L   #134,SP     ;find data again
0000151C  2A17                     585          MOVE.L  (SP),D5
0000151E  DFFC 0000008A            586          ADD.L   #138,SP     ;go back to original spot
00001524  6000 FB4A                587          BRA     SHELL
00001528                           588  
00001528                           589  MRD6:
00001528  5289                     590          ADD.L   #1,A1
0000152A  0C19 0020                591          CMP.B   #$20,(A1)+
0000152E  6600 1130                592          BNE     ERRORSR
00001532  2449                     593          MOVE.L  A1,A2
00001534  264A                     594          MOVE.L  A2,A3
00001536  4EB9 00001768            595          JSR     MRDFINDDATA
0000153C  538B                     596          SUB.L   #1,A3
0000153E  4EB9 000026AC            597          JSR     ASCII_ADDRESS   ;convert data to hex
00001544  2F05                     598          MOVE.L  D5,-(SP)        ;store it temporarily
00001546  588F                     599          ADD.L   #4,SP       ;dont lose data
00001548  4CDF 7FFF                600          MOVEM.L (SP)+,D0-D7/A0-A6
0000154C  4CDF 7FFF                601          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001550  588F                     602          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001552                           603                                  ;EASY68k simulator starts in supervisor mode
00001552  46DF                     604          MOVE    (SP)+,SR
00001554  588F                     605          ADD.L   #4,SP       ;skip saved stack
00001556  9FFC 00000086            606          SUB.L   #134,SP     ;find data again
0000155C  2C17                     607          MOVE.L  (SP),D6
0000155E  DFFC 0000008A            608          ADD.L   #138,SP     ;go back to original spot
00001564  6000 FB0A                609          BRA     SHELL
00001568                           610  
00001568                           611  MRD7:
00001568  5289                     612          ADD.L   #1,A1
0000156A  0C19 0020                613          CMP.B   #$20,(A1)+
0000156E  6600 10F0                614          BNE     ERRORSR
00001572  2449                     615          MOVE.L  A1,A2
00001574  264A                     616          MOVE.L  A2,A3
00001576  4EB9 00001768            617          JSR     MRDFINDDATA
0000157C  538B                     618          SUB.L   #1,A3
0000157E  4EB9 000026AC            619          JSR     ASCII_ADDRESS   ;convert data to hex
00001584  2F05                     620          MOVE.L  D5,-(SP)        ;store it temporarily
00001586  588F                     621          ADD.L   #4,SP       ;dont lose data
00001588  4CDF 7FFF                622          MOVEM.L (SP)+,D0-D7/A0-A6
0000158C  4CDF 7FFF                623          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001590  588F                     624          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001592                           625                                  ;EASY68k simulator starts in supervisor mode
00001592  46DF                     626          MOVE    (SP)+,SR
00001594  588F                     627         ADD.L   #4,SP       ;skip saved stack
00001596  9FFC 00000086            628          SUB.L   #134,SP     ;find data again
0000159C  2E17                     629          MOVE.L  (SP),D7
0000159E  DFFC 0000008A            630          ADD.L   #138,SP     ;go back to original spot
000015A4  6000 FACA                631          BRA     SHELL
000015A8                           632  
000015A8                           633  MRA0:
000015A8  5289                     634          ADD.L   #1,A1
000015AA  0C19 0020                635          CMP.B   #$20,(A1)+
000015AE  6600 10B0                636          BNE     ERRORSR
000015B2  2449                     637          MOVE.L  A1,A2
000015B4  264A                     638          MOVE.L  A2,A3
000015B6  4EB9 00001768            639          JSR     MRDFINDDATA
000015BC  538B                     640          SUB.L   #1,A3
000015BE  4EB9 000026AC            641          JSR     ASCII_ADDRESS   ;convert data to hex
000015C4  2F05                     642          MOVE.L  D5,-(SP)        ;store it temporarily
000015C6  588F                     643          ADD.L   #4,SP       ;dont lose data
000015C8  4CDF 7FFF                644          MOVEM.L (SP)+,D0-D7/A0-A6
000015CC  4CDF 7FFF                645          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
000015D0  588F                     646          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
000015D2                           647                                  ;EASY68k simulator starts in supervisor mode
000015D2  46DF                     648          MOVE    (SP)+,SR
000015D4  588F                     649          ADD.L   #4,SP       ;skip saved stack
000015D6  9FFC 00000086            650          SUB.L   #134,SP     ;find data again
000015DC  2057                     651          MOVE.L  (SP),A0
000015DE  DFFC 0000008A            652          ADD.L   #138,SP     ;go back to original spot
000015E4  6000 FA8A                653          BRA     SHELL
000015E8                           654  MRA1:
000015E8  5289                     655          ADD.L   #1,A1
000015EA  0C19 0020                656          CMP.B   #$20,(A1)+
000015EE  6600 1070                657          BNE     ERRORSR
000015F2  2449                     658          MOVE.L  A1,A2
000015F4  264A                     659          MOVE.L  A2,A3
000015F6  4EB9 00001768            660          JSR     MRDFINDDATA
000015FC  538B                     661          SUB.L   #1,A3
000015FE  4EB9 000026AC            662          JSR     ASCII_ADDRESS   ;convert data to hex
00001604  2F05                     663          MOVE.L  D5,-(SP)        ;store it temporarily
00001606  588F                     664          ADD.L   #4,SP       ;dont lose data
00001608  4CDF 7FFF                665          MOVEM.L (SP)+,D0-D7/A0-A6
0000160C  4CDF 7FFF                666          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001610  588F                     667          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001612                           668                                  ;EASY68k simulator starts in supervisor mode
00001612  46DF                     669          MOVE    (SP)+,SR
00001614  588F                     670         ADD.L   #4,SP       ;skip saved stack
00001616  9FFC 00000086            671          SUB.L   #134,SP     ;find data again
0000161C  2257                     672          MOVE.L  (SP),A1
0000161E  DFFC 0000008A            673          ADD.L   #138,SP     ;go back to original spot
00001624  6000 FA4A                674          BRA     SHELL
00001628                           675  
00001628                           676  MRA2:
00001628  5289                     677          ADD.L   #1,A1
0000162A  0C19 0020                678          CMP.B   #$20,(A1)+
0000162E  6600 1030                679          BNE     ERRORSR
00001632  2449                     680          MOVE.L  A1,A2
00001634  264A                     681          MOVE.L  A2,A3
00001636  4EB9 00001768            682          JSR     MRDFINDDATA
0000163C  538B                     683          SUB.L   #1,A3
0000163E  4EB9 000026AC            684          JSR     ASCII_ADDRESS   ;convert data to hex
00001644  2F05                     685          MOVE.L  D5,-(SP)        ;store it temporarily
00001646  588F                     686          ADD.L   #4,SP       ;dont lose data
00001648  4CDF 7FFF                687          MOVEM.L (SP)+,D0-D7/A0-A6
0000164C  4CDF 7FFF                688          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001650  588F                     689          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001652                           690                                  ;EASY68k simulator starts in supervisor mode
00001652  46DF                     691          MOVE    (SP)+,SR
00001654  588F                     692          ADD.L   #4,SP       ;skip saved stack
00001656  9FFC 00000086            693          SUB.L   #134,SP     ;find data again
0000165C  2457                     694          MOVE.L  (SP),A2
0000165E  DFFC 0000008A            695          ADD.L   #138,SP     ;go back to original spot
00001664  6000 FA0A                696          BRA     SHELL
00001668                           697          
00001668                           698  MRA3:
00001668  5289                     699          ADD.L   #1,A1
0000166A  0C19 0020                700          CMP.B   #$20,(A1)+
0000166E  6600 0FF0                701          BNE     ERRORSR
00001672  2449                     702          MOVE.L  A1,A2
00001674  264A                     703          MOVE.L  A2,A3
00001676  4EB9 00001768            704          JSR     MRDFINDDATA
0000167C  538B                     705          SUB.L   #1,A3
0000167E  4EB9 000026AC            706          JSR     ASCII_ADDRESS   ;convert data to hex
00001684  2F05                     707          MOVE.L  D5,-(SP)        ;store it temporarily
00001686  588F                     708          ADD.L   #4,SP       ;dont lose data
00001688  4CDF 7FFF                709          MOVEM.L (SP)+,D0-D7/A0-A6
0000168C  4CDF 7FFF                710          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001690  588F                     711          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001692                           712                                  ;EASY68k simulator starts in supervisor mode
00001692  46DF                     713          MOVE    (SP)+,SR
00001694  588F                     714          ADD.L   #4,SP       ;skip saved stack
00001696  9FFC 00000086            715          SUB.L   #134,SP     ;find data again
0000169C  2657                     716          MOVE.L  (SP),A3
0000169E  DFFC 0000008A            717          ADD.L   #138,SP     ;go back to original spot
000016A4  6000 F9CA                718          BRA     SHELL
000016A8                           719  
000016A8                           720  MRA4:
000016A8  5289                     721          ADD.L   #1,A1
000016AA  0C19 0020                722          CMP.B   #$20,(A1)+
000016AE  6600 0FB0                723          BNE     ERRORSR
000016B2  2449                     724          MOVE.L  A1,A2
000016B4  264A                     725          MOVE.L  A2,A3
000016B6  4EB9 00001768            726          JSR     MRDFINDDATA
000016BC  538B                     727          SUB.L   #1,A3
000016BE  4EB9 000026AC            728          JSR     ASCII_ADDRESS   ;convert data to hex
000016C4  2F05                     729          MOVE.L  D5,-(SP)        ;store it temporarily
000016C6  588F                     730          ADD.L   #4,SP       ;dont lose data
000016C8  4CDF 7FFF                731          MOVEM.L (SP)+,D0-D7/A0-A6
000016CC  4CDF 7FFF                732          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
000016D0  588F                     733          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
000016D2                           734                                  ;EASY68k simulator starts in supervisor mode
000016D2  46DF                     735          MOVE    (SP)+,SR
000016D4  588F                     736          ADD.L   #4,SP       ;skip saved stack
000016D6  9FFC 00000086            737          SUB.L   #134,SP     ;find data again
000016DC  2857                     738          MOVE.L  (SP),A4
000016DE  DFFC 0000008A            739          ADD.L   #138,SP     ;go back to original spot
000016E4  6000 F98A                740          BRA     SHELL
000016E8                           741  
000016E8                           742  MRA5:
000016E8  5289                     743          ADD.L   #1,A1
000016EA  0C19 0020                744          CMP.B   #$20,(A1)+
000016EE  6600 0F70                745          BNE     ERRORSR
000016F2  2449                     746          MOVE.L  A1,A2
000016F4  264A                     747          MOVE.L  A2,A3
000016F6  4EB9 00001768            748          JSR     MRDFINDDATA
000016FC  538B                     749          SUB.L   #1,A3
000016FE  4EB9 000026AC            750          JSR     ASCII_ADDRESS   ;convert data to hex
00001704  2F05                     751          MOVE.L  D5,-(SP)        ;store it temporarily
00001706  588F                     752          ADD.L   #4,SP       ;dont lose data
00001708  4CDF 7FFF                753          MOVEM.L (SP)+,D0-D7/A0-A6
0000170C  4CDF 7FFF                754          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001710  588F                     755          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001712                           756                                  ;EASY68k simulator starts in supervisor mode
00001712  46DF                     757          MOVE    (SP)+,SR
00001714  588F                     758         ADD.L   #4,SP       ;skip saved stack
00001716  9FFC 00000086            759          SUB.L   #134,SP     ;find data again
0000171C  2A57                     760          MOVE.L  (SP),A5
0000171E  DFFC 0000008A            761          ADD.L   #138,SP     ;go back to original spot
00001724  6000 F94A                762          BRA     SHELL
00001728                           763  
00001728                           764  MRA6:
00001728  5289                     765          ADD.L   #1,A1
0000172A  0C19 0020                766          CMP.B   #$20,(A1)+
0000172E  6600 0F30                767          BNE     ERRORSR
00001732  2449                     768          MOVE.L  A1,A2
00001734  264A                     769          MOVE.L  A2,A3
00001736  4EB9 00001768            770          JSR     MRDFINDDATA
0000173C  538B                     771          SUB.L   #1,A3
0000173E  4EB9 000026AC            772          JSR     ASCII_ADDRESS   ;convert data to hex
00001744  2F05                     773          MOVE.L  D5,-(SP)        ;store it temporarily
00001746  588F                     774          ADD.L   #4,SP       ;dont lose data
00001748  4CDF 7FFF                775          MOVEM.L (SP)+,D0-D7/A0-A6
0000174C  4CDF 7FFF                776          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001750  588F                     777          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001752                           778                                  ;EASY68k simulator starts in supervisor mode
00001752  46DF                     779          MOVE    (SP)+,SR
00001754  588F                     780          ADD.L   #4,SP       ;skip saved stack
00001756  9FFC 00000086            781          SUB.L   #134,SP     ;find data again
0000175C  2C57                     782          MOVE.L  (SP),A6
0000175E  DFFC 0000008A            783          ADD.L   #138,SP     ;go back to original spot
00001764  6000 F90A                784          BRA     SHELL
00001768                           785  
00001768                           786  MRDFINDDATA:
00001768  0C1B 0000                787          CMP.B   #$00,(A3)+
0000176C  6700 0004                788          BEQ     GOBACK
00001770  60F6                     789          BRA     MRDFINDDATA
00001772  4E75                     790  GOBACK: RTS
00001774                           791          
00001774                           792  
00001774  6000 F980                793          BRA RESTORE
00001778                           794  *--------------------REQUIRED COMMAND DEFINITION START---------------------------------*
00001778                           795  *--------------------------------------------------------------------------------------*
00001778  43F8 3063                796  HELP:       LEA     HTXT,A1     ;list of commands test
0000177C  323C 0011                797              MOVE.W  #17,D1
00001780  103C 0000                798              MOVE.B  #0,D0
00001784  4E4F                     799              TRAP    #15
00001786  323C 0000                800              MOVE.W  #0,D1       ;newline
0000178A  4E4F                     801              TRAP    #15
0000178C                           802              
0000178C  43F8 3074                803              LEA     HTXT1,A1    ;mem display command
00001790  323C 004B                804              MOVE.W  #75,D1
00001794  103C 0000                805              MOVE.B  #0,D0
00001798  4E4F                     806              TRAP    #15
0000179A  43F8 30BF                807              LEA     HTXT1A,A1   ;mem display
0000179E  323C 003D                808              MOVE.W  #61,D1
000017A2  103C 0000                809              MOVE.B  #0,D0
000017A6  4E4F                     810              TRAP    #15
000017A8  43F8 30FC                811              LEA     HTXT1B,A1   ;mem display
000017AC  323C 0014                812              MOVE.W  #20,D1
000017B0  103C 0000                813              MOVE.B  #0,D0
000017B4  4E4F                     814              TRAP    #15
000017B6  323C 0000                815              MOVE.W  #0,D1       ;newline
000017BA  4E4F                     816              TRAP    #15
000017BC                           817              
000017BC  43F8 3110                818              LEA     HTXT2,A1    ;hxdec command text
000017C0  323C 004B                819              MOVE.W  #75,D1
000017C4  103C 0000                820              MOVE.B  #0,D0
000017C8  4E4F                     821              TRAP    #15
000017CA  123C 0000                822              MOVE.B  #0,D1       ;newline
000017CE  4E4F                     823              TRAP    #15
000017D0                           824              
000017D0  43F8 315B                825              LEA     HTXT3,A1    ;sort command text
000017D4  323C 0045                826              MOVE.W  #69,D1
000017D8  103C 0000                827              MOVE.B  #0,D0
000017DC  4E4F                     828              TRAP    #15
000017DE  43F8 31A0                829              LEA     HTXT3A,A1    ;sort command text continued
000017E2  323C 0039                830              MOVE.W  #57,D1
000017E6  103C 0000                831              MOVE.B  #0,D0
000017EA  4E4F                     832              TRAP    #15
000017EC  43F8 31D9                833              LEA     HTXT3B,A1    ;sort command text continued
000017F0  323C 0014                834              MOVE.W  #20,D1
000017F4  103C 0000                835              MOVE.B  #0,D0
000017F8  4E4F                     836              TRAP    #15
000017FA  43F8 31ED                837              LEA     HTXT3C,A1    ;sort command text continued
000017FE  323C 0015                838              MOVE.W  #21,D1
00001802  103C 0000                839              MOVE.B  #0,D0
00001806  4E4F                     840              TRAP    #15
00001808  43F8 3202                841              LEA     HTXT3D,A1    ;sort command text continued
0000180C  323C 001D                842              MOVE.W  #29,D1
00001810  103C 0000                843              MOVE.B  #0,D0
00001814  4E4F                     844              TRAP    #15
00001816  43F8 321F                845              LEA     HTXT3E,A1    ;sort command text continued
0000181A  323C 0033                846              MOVE.W  #51,D1
0000181E  103C 0000                847              MOVE.B  #0,D0
00001822  4E4F                     848              TRAP    #15
00001824  123C 0000                849              MOVE.B  #0,D1       ;newline
00001828  4E4F                     850              TRAP    #15
0000182A                           851              
0000182A  43F8 3252                852              LEA     HTXT4,A1    ;memory modify command text 
0000182E  323C 0047                853              MOVE.W  #71,D1
00001832  103C 0000                854              MOVE.B  #0,D0
00001836  4E4F                     855              TRAP    #15
00001838  43F8 3299                856              LEA     HTXT4A,A1    ;mem modify command text continued
0000183C  323C 0045                857              MOVE.W  #69,D1
00001840  103C 0000                858              MOVE.B  #0,D0
00001844  4E4F                     859              TRAP    #15
00001846  43F8 32DE                860              LEA     HTXT4B,A1    ;mem modify command text continued
0000184A  323C 001B                861              MOVE.W  #27,D1
0000184E  103C 0000                862              MOVE.B  #0,D0
00001852  4E4F                     863              TRAP    #15
00001854  43F8 32F9                864              LEA     HTXT4C,A1    ;mem modify command text continued
00001858  323C 001E                865              MOVE.W  #30,D1
0000185C  103C 0000                866              MOVE.B  #0,D0
00001860  4E4F                     867              TRAP    #15
00001862  43F8 3317                868              LEA     HTXT4D,A1    ;mem modify command text continued
00001866  323C 001F                869              MOVE.W  #31,D1
0000186A  103C 0000                870              MOVE.B  #0,D0
0000186E  4E4F                     871              TRAP    #15
00001870  43F8 3336                872              LEA     HTXT4E,A1    ;mem modify command text continued
00001874  323C 0024                873              MOVE.W  #36,D1
00001878  103C 0000                874              MOVE.B  #0,D0
0000187C  4E4F                     875              TRAP    #15
0000187E  123C 0000                876              MOVE.B  #0,D1
00001882  4E4F                     877              TRAP    #15         ;newline
00001884                           878              
00001884  43F8 335A                879              LEA     HTXT5,A1    ;memory set command text 
00001888  323C 0046                880              MOVE.W  #70,D1
0000188C  103C 0000                881              MOVE.B  #0,D0
00001890  4E4F                     882              TRAP    #15
00001892  43F8 33A0                883              LEA     HTXT5A,A1    ;memory set command text continued
00001896  323C 0009                884              MOVE.W  #9,D1
0000189A  103C 0000                885              MOVE.B  #0,D0
0000189E  4E4F                     886              TRAP    #15
000018A0  123C 0000                887              MOVE.B  #0,D1       ;newline
000018A4  4E4F                     888              TRAP    #15
000018A6                           889              
000018A6  43F8 33A9                890              LEA     HTXT6,A1    ;block fill command text
000018AA  323C 0045                891              MOVE.W  #69,D1
000018AE  103C 0000                892              MOVE.B  #0,D0
000018B2  4E4F                     893              TRAP    #15
000018B4  43F8 33EF                894              LEA     HTXT6A,A1    ;block fill command text
000018B8  323C 0048                895              MOVE.W  #72,D1
000018BC  103C 0000                896              MOVE.B  #0,D0
000018C0  4E4F                     897              TRAP    #15
000018C2  43F8 3437                898              LEA     HTXT6B,A1    ;block fill command text
000018C6  323C 0026                899              MOVE.W  #38,D1
000018CA  103C 0000                900              MOVE.B  #0,D0
000018CE  4E4F                     901              TRAP    #15
000018D0  123C 0000                902              MOVE.B  #0,D1
000018D4  4E4F                     903              TRAP    #15         ;newline
000018D6                           904              
000018D6                           905              
000018D6  43F8 345D                906              LEA     HTXT7,A1    ;block move command text
000018DA  323C 0044                907              MOVE.W  #68,D1
000018DE  103C 0000                908              MOVE.B  #0,D0
000018E2  4E4F                     909              TRAP    #15
000018E4  43F8 34A1                910              LEA     HTXT7A,A1    ;block move command text
000018E8  323C 0048                911              MOVE.W  #72,D1
000018EC  103C 0000                912              MOVE.B  #0,D0
000018F0  4E4F                     913              TRAP    #15
000018F2  43F8 34E9                914              LEA     HTXT7B,A1    ;block move command text
000018F6  323C 0018                915              MOVE.W  #24,D1
000018FA  103C 0000                916              MOVE.B  #0,D0
000018FE  4E4F                     917              TRAP    #15
00001900  123C 0000                918              MOVE.B  #0,D1       ;newline
00001904  4E4F                     919              TRAP    #15
00001906                           920              
00001906  43F8 3501                921              LEA     HTXT8,A1    ;block test command text
0000190A  323C 0047                922              MOVE.W  #71,D1
0000190E  103C 0000                923              MOVE.B  #0,D0
00001912  4E4F                     924              TRAP    #15
00001914  43F8 3548                925              LEA     HTXT8A,A1    ;block test command text
00001918  323C 0028                926              MOVE.W  #40,D1
0000191C  103C 0000                927              MOVE.B  #0,D0
00001920  4E4F                     928              TRAP    #15
00001922  123C 0000                929              MOVE.B  #0,D1       ;newline
00001926  4E4F                     930              TRAP    #15
00001928                           931              
00001928  43F8 3570                932              LEA     HTXT9,A1    ;block search command text
0000192C  323C 0046                933              MOVE.W  #70,D1
00001930  103C 0000                934              MOVE.B  #0,D0
00001934  4E4F                     935              TRAP    #15
00001936  43F8 35B8                936              LEA     HTXT9A,A1    ;block search command text
0000193A  323C 002D                937              MOVE.W  #45,D1
0000193E  103C 0000                938              MOVE.B  #0,D0
00001942  4E4F                     939              TRAP    #15
00001944  123C 0000                940              MOVE.B  #0,D1       ;newline
00001948  4E4F                     941              TRAP    #15
0000194A                           942              
0000194A  43F8 35E5                943              LEA     HTXT10,A1    ;go command text
0000194E  323C 003D                944              MOVE.W  #61,D1
00001952  103C 0000                945              MOVE.B  #0,D0
00001956  4E4F                     946              TRAP    #15
00001958  123C 0000                947              MOVE.B  #0,D1      ;newline
0000195C  4E4F                     948              TRAP    #15
0000195E                           949  
0000195E  43F8 3622                950              LEA     HTXT11,A1   ;df command text   
00001962  323C 0038                951              MOVE.W  #56,D1
00001966  103C 0000                952              MOVE.B  #0,D0
0000196A  4E4F                     953              TRAP    #15
0000196C  123C 0000                954              MOVE.B  #0,D1
00001970  4E4F                     955              TRAP    #15
00001972                           956              
00001972  43F8 365A                957              LEA     HTXT12,A1   ;help command text
00001976  323C 0042                958              MOVE.W  #66,D1
0000197A  103C 0000                959              MOVE.B  #0,D0
0000197E  4E4F                     960              TRAP    #15
00001980  123C 0000                961              MOVE.B  #0,D1       ;newline
00001984  4E4F                     962              TRAP    #15   
00001986                           963              
00001986  43F8 369C                964              LEA     HTXT13,A1   ;echo command text   
0000198A  323C 0034                965              MOVE.W  #52,D1
0000198E  103C 0000                966              MOVE.B  #0,D0
00001992  4E4F                     967              TRAP    #15
00001994  123C 0000                968              MOVE.B  #0,D1       ;newline
00001998  4E4F                     969              TRAP    #15
0000199A                           970              
0000199A  43F8 36CF                971              LEA     HTXT14,A1   ;modify register command text   
0000199E  323C 0047                972              MOVE.W  #71,D1
000019A2  103C 0000                973              MOVE.B  #0,D0
000019A6  4E4F                     974              TRAP    #15
000019A8  43F8 3716                975              LEA     HTXT15,A1   ;modify register command text   
000019AC  323C 003F                976              MOVE.W  #63,D1
000019B0  103C 0000                977              MOVE.B  #0,D0
000019B4  4E4F                     978              TRAP    #15
000019B6  123C 0000                979              MOVE.B  #0,D1       ;newline
000019BA  4E4F                     980              TRAP    #15
000019BC                           981   
000019BC  6000 F738                982              BRA     RESTORE  
000019C0                           983  *--------------------------------------------------------------------------------------*
000019C0                           984  *Fix ASCII String input? ask in lab*
000019C0  45F8 3000                985  MEMSET:     LEA     BUFFER,A2
000019C4  568A                     986              ADD.L   #3,A2
000019C6  264A                     987              MOVE.L  A2,A3   ;set up to find end
000019C8  0C1B 0000                988  FINDEND:    CMP.B   #$00,(A3)+
000019CC  6700 0004                989              BEQ     MEMCONT
000019D0  60F6                     990              BRA     FINDEND
000019D2  538B                     991  MEMCONT:    SUB.L  #1,A3   ;get rid of off by one erro
000019D4  121A                     992              MOVE.B  (A2)+,D1
000019D6  1412                     993              MOVE.B  (A2),D2
000019D8  1601                     994              MOVE.B  D1,D3       ;pass value to subroutine
000019DA  4EB9 00002670            995              JSR     ASCII_TO_BCD           
000019E0  1203                     996              MOVE.B  D3,D1       ;get converted value
000019E2  1602                     997              MOVE.B  D2,D3       ;pass value
000019E4  4EB9 00002670            998              JSR     ASCII_TO_BCD
000019EA  1403                     999              MOVE.B  D3,D2       ;get returned value
000019EC  1601                    1000              MOVE.B  D1,D3
000019EE  4EB9 0000268E           1001              JSR     BCD_TO_HEX
000019F4  1203                    1002              MOVE.B  D3,D1
000019F6  1602                    1003              MOVE.B  D2,D3
000019F8  4EB9 0000268E           1004              JSR     BCD_TO_HEX
000019FE  1403                    1005              MOVE.B  D3,D2
00001A00  E999                    1006              ROL.L   #4,D1       ;put data in correct place
00001A02  D441                    1007              ADD     D1,D2       ;get combined data input
00001A04  548A                    1008              ADD.L   #2,A2       ;go to start of address
00001A06  4EB9 000026AC           1009              JSR     ASCII_ADDRESS  ;get address in workable form
00001A0C  2845                    1010              MOVE.L  D5,A4       ;load target address
00001A0E  1882                    1011              MOVE.B  D2,(A4)       ;put data in target address
00001A10  6000 F6E4               1012              BRA     RESTORE                 ;return to shell
00001A14                          1013  *--------------------------------------------------------------------------------------*
00001A14  45F8 3000               1014  MEMDISP:    LEA     BUFFER,A2
00001A18  7C01                    1015              MOVE.L  #1,D6       ;counter for how many times to loop
00001A1A  5A8A                    1016              ADD.L   #5,A2       ;get first address
00001A1C  264A                    1017              MOVE.L  A2,A3       
00001A1E  0C1B 0020               1018  FINDEND1:   CMP.B   #$20,(A3)+
00001A22  6700 0004               1019              BEQ     FINDNEXT
00001A26  60F6                    1020              BRA     FINDEND1  
00001A28  284B                    1021  FINDNEXT:   MOVE.L  A3,A4
00001A2A  2A4B                    1022              MOVE.L  A3,A5
00001A2C  538B                    1023              SUB.L   #1,A3   ;get rid of off by one error
00001A2E  0C1D 0000               1024  FINDEND2:   CMP.B   #$00,(A5)+
00001A32  6700 0004               1025              BEQ     MEMNEXT
00001A36  60F6                    1026              BRA     FINDEND2
00001A38  538D                    1027  MEMNEXT:    SUB.L   #1,A5   ;off by one error
00001A3A  4EB9 000026AC           1028              JSR     ASCII_ADDRESS
00001A40  2C45                    1029              MOVE.L  D5,A6   ;put 1st address in A6
00001A42  244C                    1030              MOVE.L  A4,A2
00001A44  264D                    1031              MOVE.L  A5,A3
00001A46  4EB9 000026AC           1032              JSR ASCII_ADDRESS
00001A4C  2A45                    1033              MOVE.L  D5,A5   ;second address in A5
00001A4E  204E                    1034              MOVE.L  A6,A0   ;for second run through
00001A50  224D                    1035              MOVE.L  A5,A1   ;see above comment
00001A52  D3FC 00000010           1036              ADD.L   #16,A1 ;16 byte offset
00001A58  48E7 0040               1037              MOVEM.L A1,-(SP)
00001A5C  BBCE                    1038  DISPLOOP:   CMP.L   A6,A5
00001A5E  6D00 0034               1039              BLT     SECONDLOOP
00001A62  260E                    1040              MOVE.L  A6,D3
00001A64  4EB9 000026EC           1041              JSR     HEXTOASCII
00001A6A  97CA                    1042              SUB.L   A2,A3
00001A6C  220B                    1043              MOVE.L  A3,D1   ;number of ascii values to display
00001A6E  224A                    1044              MOVE.L  A2,A1
00001A70  7001                    1045              MOVE.L  #1,D0
00001A72  4E4F                    1046              TRAP    #15
00001A74  43F8 3781               1047              LEA     SPACE,A1
00001A78  7201                    1048              MOVE.L #1,D1
00001A7A  4E4F                    1049              TRAP    #15
00001A7C  4283                    1050              CLR.L   D3
00001A7E  1616                    1051              MOVE.B  (A6),D3
00001A80  4EB9 000026EC           1052              JSR     HEXTOASCII
00001A86  97CA                    1053              SUB.L   A2,A3
00001A88  220B                    1054              MOVE.L  A3,D1
00001A8A  224A                    1055              MOVE.L  A2,A1
00001A8C  7000                    1056              MOVE.L  #0,D0
00001A8E  4E4F                    1057              TRAP    #15
00001A90  528E                    1058              ADD.L   #1,A6
00001A92  60C8                    1059              BRA     DISPLOOP
00001A94                          1060              
00001A94                          1061  SECONDLOOP: 
00001A94  103C 0000               1062              MOVE.B  #0,D0
00001A98  123C 0000               1063              MOVE.B  #0,D1
00001A9C  4E4F                    1064              TRAP    #15
00001A9E  4CDF 0200               1065              MOVEM.L (SP)+,A1
00001AA2  2C48                    1066              MOVE.L  A0,A6   ;reinit
00001AA4  2A49                    1067              MOVE.L  A1,A5
00001AA6  5386                    1068              SUBI.L  #1,D6
00001AA8  BCBC 00000000           1069              CMP.L   #$0,D6
00001AAE  67AC                    1070              BEQ     DISPLOOP
00001AB0  598F                    1071              SUB.L   #4,SP   ;off by long error on stack
00001AB2  6000 F642               1072              BRA     RESTORE
00001AB6                          1073              
00001AB6                          1074  *--------------------------------------------------------------------------------------*
00001AB6                          1075  
00001AB6  45F8 3000               1076  HXDC:   LEA BUFFER,A2   ;load buffer
00001ABA  5C8A                    1077          ADD.L   #6,A2   ; start of number
00001ABC  264A                    1078          MOVE.L  A2,A3   ;set up end pointer
00001ABE  7201                    1079          MOVE.L  #1,D1   ;set up 16's place
00001AC0  4282                    1080          CLR.L   D2      ;clear total
00001AC2  4283                    1081          CLR.L   D3      ;temp holder for number
00001AC4  4286                    1082          CLR.L   D6      ;Final Value in BCD
00001AC6  283C 00002710           1083          MOVE.L  #10000,D4    ;maximum 10's place of converted number
00001ACC  7A10                    1084          MOVE.L  #16,D5      ;Max number of rotates needed
00001ACE  4BF8 3A00               1085          LEA $3A00,A5
00001AD2  49F8 3A00               1086          LEA $3A00,A4   ;set up start pointer
00001AD6                          1087  FINDLASTNUM:    
00001AD6  0C1B 0000               1088          CMP.B #$00,(A3)+
00001ADA  6700 0004               1089          BEQ     CONVERTMINUS1
00001ADE  60F6                    1090          BRA     FINDLASTNUM
00001AE0                          1091  CONVERTMINUS1:   
00001AE0  538B                    1092               SUB.L   #1,A3 ; cure off by 1 error
00001AE2                          1093  CONVERT:
00001AE2  538B                    1094              SUB.L   #1,A3
00001AE4  B4CB                    1095              CMP   A3,A2
00001AE6  6E00 0028               1096              BGT   ENDCONVERT
00001AEA  0C13 0040               1097              CMP.B   #$40,(A3)
00001AEE  6E00 000A               1098              BGT     HIGHHEX
00001AF2  0413 0030               1099              SUBI.B  #$30,(A3)   ;get hex value
00001AF6  6000 0006               1100              BRA     COMPUTATION
00001AFA  0413 0037               1101  HIGHHEX:     SUBI.B  #$37,(A3)  ;get hex value
00001AFE                          1102  COMPUTATION:
00001AFE  1613                    1103              MOVE.B  (A3),D3 
00001B00  C6C1                    1104              MULU    D1,D3   ;get 16's place
00001B02                          1105             ; DIVU    #16,D3  ;get rid of off by 1 exponent error
00001B02  C2FC 0010               1106              MULU    #16,D1  ;inc 16's place counter
00001B06  1883                    1107              MOVE.B  D3,(A4)
00001B08  538C                    1108              SUB.L   #1,A4
00001B0A  D483                    1109              ADD.L   D3,D2   ;store it in total for debugging 
00001B0C  4283                    1110              CLR.L   D3      ;get rid of any numbers in there   
00001B0E  60D2                    1111              BRA     CONVERT     
00001B10                          1112  ENDCONVERT:                  ;must convert back to ascii for display
00001B10  4283                    1113              CLR.L   D3      ;Cleared for workability
00001B12  84C4                    1114              DIVU    D4,D2   ;get 10's place digit
00001B14  3602                    1115              MOVE.W  D2,D3   ;extract 10's place digit to D3
00001B16  EBBB                    1116              ROL.L   D5,D3   ;put it in its place
00001B18  4242                    1117              CLR.W   D2      ;get rid of whole number
00001B1A  4842                    1118              SWAP    D2      ;keep remainder
00001B1C  5985                    1119              SUBI.L  #4,D5   ;dec rotate counter
00001B1E  DC83                    1120              ADD.L   D3,D6   ;put it into it's place
00001B20  88FC 000A               1121              DIVU    #10,D4  ;go down a 10's place
00001B24  B87C 0000               1122              CMP.W   #0,D4   ;are we done
00001B28  6700 0004               1123              BEQ     OUTPUTNUM
00001B2C  60E2                    1124              BRA     ENDCONVERT
00001B2E                          1125              
00001B2E                          1126  OUTPUTNUM:
00001B2E  2606                    1127             MOVE.L   D6,D3   ;put into register for conversion to ASCII
00001B30  4EB9 000026EC           1128             JSR      HEXTOASCII
00001B36  224A                    1129             MOVEA.L  A2,A1   ;get start of number
00001B38  96CA                    1130             SUBA     A2,A3   ;get how many bytes to output
00001B3A  220B                    1131             MOVE.L   A3,D1   ;for Trap call
00001B3C  7000                    1132             MOVE.L   #0,D0   
00001B3E  4E4F                    1133             TRAP     #15
00001B40                          1134             
00001B40  6000 F5B4               1135             BRA RESTORE
00001B44                          1136  
00001B44                          1137  *--------------------------------------------------------------------------------------*
00001B44                          1138  
00001B44  5289                    1139  SORTW:  ADD.L   #1,A1       ;increment to check for semicolon/dash
00001B46  0C11 002D               1140          CMP.B   #$2D,(A1)   ;check for default
00001B4A  6700 007C               1141          BEQ     DESCEND
00001B4E  0C19 003B               1142          CMP.B   #$3B,(A1)+
00001B52  6600 0B0C               1143          BNE     ERRORSR
00001B56  0C11 0041               1144          CMP.B   #$41,(A1)   ;is it ascending?
00001B5A  6700 000E               1145          BEQ     ASCEND
00001B5E  0C11 0044               1146          CMP.B   #$44,(A1)   ;or descending?
00001B62  6600 0AFC               1147          BNE     ERRORSR
00001B66  6000 0060               1148          BRA     DESCEND
00001B6A                          1149          
00001B6A                          1150  ASCEND:
00001B6A  5289                    1151         ADD.L    #1,A1   ;inc
00001B6C  0C11 0020               1152         CMP.B    #$20,(A1)   ;check space
00001B70  6600 0AEE               1153         BNE      ERRORSR
00001B74  5289                    1154         ADD.L    #1,A1   ;start of 1st address
00001B76  2449                    1155         MOVE.L   A1,A2
00001B78  264A                    1156         MOVE.L   A2,A3
00001B7A                          1157  AGETFIRSTADDRESS:
00001B7A  0C13 0000               1158         CMP.B    #$00,(A3)
00001B7E  6700 0AE0               1159         BEQ      ERRORSR     ;incorrect syntax
00001B82  0C1B 0020               1160         CMP.B    #$20,(A3)+  ;trying to find the end
00001B86  6700 0004               1161         BEQ      AFADDCONV
00001B8A  60EE                    1162         BRA      AGETFIRSTADDRESS
00001B8C                          1163  AFADDCONV:
00001B8C  538B                    1164         SUB.L    #1,A3   ;off by one error
00001B8E  4EB9 000026AC           1165         JSR ASCII_ADDRESS    ;D5 now has that address 
00001B94  2845                    1166         MOVE.L D5,A4
00001B96  528B                    1167         ADD.L    #1,A3   ;start of second address
00001B98  244B                    1168         MOVE.L   A3,A2   ;setup for second address
00001B9A                          1169  AGETSECADDRESS:
00001B9A  0C1B 0000               1170         CMP.B    #$00,(A3)+  ;trying to find the end
00001B9E  6700 0004               1171         BEQ      ASADDCONV
00001BA2  60F6                    1172         BRA      AGETSECADDRESS
00001BA4                          1173  ASADDCONV:
00001BA4  538B                    1174          SUB.L   #1,A3   ;off by one
00001BA6  4EB9 000026AC           1175          JSR     ASCII_ADDRESS
00001BAC  2A45                    1176          MOVE.L  D5,A5
00001BAE  2C4C                    1177          MOVEA.L  A4,A6  ;CLR A6
00001BB0                          1178          
00001BB0  284E                    1179  ARESETLOOP: MOVE.L  A6,A4    ;reset to top of loop
00001BB2  B94C                    1180  ACMP:       CMP.W   (A4)+,(A4)+  ;check adjacent mem
00001BB4  630A                    1181              BLS.S   ASWAP    
00001BB6  558C                    1182              SUBQ.L  #2,A4
00001BB8  BBCC                    1183              CMP.L   A4,A5   ;done?
00001BBA  66F6                    1184              BNE     ACMP     ;nope
00001BBC  6000 0068               1185              BRA     DONEASCEND  ;yep
00001BC0  2024                    1186  ASWAP:       MOVE.L  -(A4),D0    ;start bubbling 
00001BC2  4840                    1187              SWAP.W  D0
00001BC4  2880                    1188              MOVE.L  D0,(A4)
00001BC6  60E8                    1189              BRA     ARESETLOOP
00001BC8                          1190  
00001BC8                          1191  
00001BC8                          1192  DESCEND:
00001BC8  5289                    1193         ADD.L    #1,A1   ;inc
00001BCA  0C11 0020               1194         CMP.B    #$20,(A1)   ;check space
00001BCE  6600 0A90               1195         BNE      ERRORSR
00001BD2  5289                    1196         ADD.L    #1,A1   ;start of 1st address
00001BD4  2449                    1197         MOVE.L   A1,A2
00001BD6  264A                    1198         MOVE.L   A2,A3
00001BD8                          1199  DGETFIRSTADDRESS:
00001BD8  0C13 0000               1200         CMP.B    #$00,(A3)
00001BDC  6700 0A82               1201         BEQ      ERRORSR     ;incorrect syntax
00001BE0  0C1B 0020               1202         CMP.B    #$20,(A3)+  ;trying to find the end
00001BE4  6700 0004               1203         BEQ      DFADDCONV
00001BE8  60EE                    1204         BRA      DGETFIRSTADDRESS
00001BEA                          1205  DFADDCONV:
00001BEA  538B                    1206         SUB.L    #1,A3   ;off by one error
00001BEC  4EB9 000026AC           1207         JSR ASCII_ADDRESS    ;D5 now has that address 
00001BF2  2845                    1208         MOVE.L D5,A4
00001BF4  528B                    1209         ADD.L    #1,A3   ;start of second address
00001BF6  244B                    1210         MOVE.L   A3,A2   ;setup for second address
00001BF8                          1211  DGETSECADDRESS:
00001BF8  0C1B 0000               1212         CMP.B    #$00,(A3)+  ;trying to find the end
00001BFC  6700 0004               1213         BEQ      DSADDCONV
00001C00  60F6                    1214         BRA      DGETSECADDRESS
00001C02                          1215  DSADDCONV:
00001C02  538B                    1216          SUB.L   #1,A3   ;off by one
00001C04  4EB9 000026AC           1217          JSR     ASCII_ADDRESS
00001C0A  2A45                    1218          MOVE.L  D5,A5
00001C0C  2C4C                    1219          MOVEA.L  A4,A6  ;CLR A6
00001C0E                          1220          
00001C0E  284E                    1221  DRESETLOOP: MOVE.L  A6,A4    ;reset to top of loop
00001C10  B94C                    1222  DCMP:       CMP.W   (A4)+,(A4)+  ;check adjacent mem
00001C12  620A                    1223              BHI.S   DSWAP    
00001C14  558C                    1224              SUBQ.L  #2,A4
00001C16  BBCC                    1225              CMP.L   A4,A5   ;done?
00001C18  66F6                    1226              BNE     DCMP     ;nope
00001C1A  6000 000A               1227              BRA     DONEDESCEND  ;yep
00001C1E  2024                    1228  DSWAP:       MOVE.L  -(A4),D0    ;start bubbling 
00001C20  4840                    1229              SWAP.W  D0
00001C22  2880                    1230              MOVE.L  D0,(A4)
00001C24  60E8                    1231              BRA     DRESETLOOP
00001C26                          1232  x
00001C26                          1233  DONEASCEND:
00001C26                          1234  DONEDESCEND:
00001C26  6000 F4CE               1235              BRA RESTORE
00001C2A                          1236  
00001C2A                          1237  *--------------------------------------------------------------------------------------*
00001C2A                          1238  
00001C2A  4282                    1239  MM:    CLR.L    D2      ;used for storing values
00001C2C  4286                    1240         CLR.L    D6      
00001C2E                          1241  SIZECHECK:  
00001C2E  2649                    1242          MOVE.L  A1,A3   ;set up to find end ptr
00001C30                          1243  ENDPTRMM:
00001C30  0C1B 0000               1244          CMP.B   #$00,(A3)+
00001C34  66FA                    1245          BNE     ENDPTRMM
00001C36  538B                    1246          SUB.L   #1,A3   ;off by one error
00001C38  5289                    1247          ADD.L   #1,A1   ;inc pointer to start of specifier
00001C3A  0C11 002D               1248          CMP.B   #$2D,(A1)   ;check for default
00001C3E  6700 0020               1249          BEQ     DEFAULT        
00001C42  0C11 003B               1250          CMP.B   #$3B,(A1)
00001C46  6600 0A18               1251          BNE     ERRORSR
00001C4A  5289                    1252          ADD.L   #1,A1   ;find out which size
00001C4C  0C11 0057               1253          CMP.B   #$57,(A1) ; word
00001C50  6700 00A8               1254          BEQ     WORD
00001C54  0C11 004C               1255          CMP.B   #$4C,(A1)   ;long
00001C58  6700 0162               1256          BEQ     LONG
00001C5C  6000 0A02               1257          BRA     ERRORSR
00001C60                          1258  
00001C60                          1259  ***************************************************
00001C60                          1260  
00001C60                          1261  DEFAULT:
00001C60                          1262          
00001C60  5489                    1263          ADD.L   #2,A1       ;set up for subroutine
00001C62  3449                    1264          MOVE    A1,A2       ;set up for subroutine
00001C64  48E7 4270               1265          MOVEM.L D1/D6/A1-A3,-(SP)
00001C68  4EB9 000026AC           1266          JSR     ASCII_ADDRESS
00001C6E  4CDF 0E42               1267          MOVEM.L (SP)+,D1/D6/A1-A3
00001C72  2845                    1268          MOVE.L  D5,A4       ;set up address to modify
00001C74                          1269         
00001C74                          1270  MODIFYLOOP:
00001C74                          1271          *-------Display Memory First-----*
00001C74  260C                    1272          MOVE.L  A4,D3       ;set up for subroutine
00001C76  4EB9 000026EC           1273          JSR     HEXTOASCII  ;convert new address to ascii for output
00001C7C  96CA                    1274          SUBA    A2,A3       ;get num of bytes to produce
00001C7E  7001                    1275          MOVE.L  #1,D0
00001C80  220B                    1276          MOVE.L  A3,D1
00001C82  224A                    1277          MOVE.L  A2,A1
00001C84  4E4F                    1278          TRAP    #15
00001C86                          1279          
00001C86                          1280          *add colon to denote containing data*
00001C86  12BC 003A               1281          MOVE.B  #$3A,(A1)
00001C8A  7201                    1282          MOVE.L  #1,D1   ;display only the colon
00001C8C  7001                    1283          MOVE.L  #1,D0
00001C8E  4E4F                    1284          TRAP    #15
00001C90                          1285          
00001C90  1614                    1286          MOVE.B  (A4),D3
00001C92  4EB9 000026EC           1287          JSR     HEXTOASCII
00001C98  7202                    1288          MOVE.L  #2,D1
00001C9A  224A                    1289          MOVE.L  A2,A1
00001C9C  103C 0001               1290          MOVE.B  #1,D0
00001CA0  4E4F                    1291          TRAP    #15
00001CA2                          1292          
00001CA2  12BC 0020               1293          MOVE.B  #$20,(A1)
00001CA6  7201                    1294          MOVE.L  #1,D1   ;space between held data and input
00001CA8  7001                    1295          MOVE.L  #1,D0
00001CAA  4E4F                    1296          TRAP    #15
00001CAC                          1297  
00001CAC                          1298          
00001CAC                          1299          *-----Enter Input-------*
00001CAC  4283                    1300          CLR.L   D3
00001CAE  7C04                    1301          MOVE.L  #4,D6
00001CB0  43F8 3000               1302          LEA     BUFFER,A1   ;set up storage for command
00001CB4  103C 0002               1303          MOVE.B  #2,D0       ;load input trap call
00001CB8  4E4F                    1304          TRAP    #15
00001CBA  0C11 002E               1305          CMP.B   #$2E,(A1)
00001CBE  6700 01E2               1306          BEQ     ENDLP
00001CC2  0C11 0000               1307          CMP.B   #$00,(A1)
00001CC6  6700 002C               1308          BEQ     ENTER
00001CCA                          1309          
00001CCA                          1310  PARSELOOP:
00001CCA  0C11 0000               1311          CMP.B   #$00,(A1)
00001CCE  6700 0022               1312          BEQ     ENDPARSE        
00001CD2  0C11 0040               1313          CMP.B   #$40,(A1)
00001CD6  6E00 000A               1314          BGT     HIGHHEXMM
00001CDA  0411 0030               1315          SUBI.B  #$30,(A1)   ;get hex value
00001CDE  6000 0006               1316          BRA     NEXTMMSTEP
00001CE2  0411 0037               1317  HIGHHEXMM: SUBI.B  #$37,(A1)  ;get hex value
00001CE6                          1318  NEXTMMSTEP:
00001CE6  1411                    1319          MOVE.B  (A1),D2
00001CE8  EDBA                    1320          ROL.L   D6,D2
00001CEA  5986                    1321          SUBI.L  #4,D6
00001CEC  5289                    1322          ADD.L   #1,A1
00001CEE  D602                    1323          ADD.B   D2,D3   ;total byte stored in D3
00001CF0  60D8                    1324          BRA     PARSELOOP
00001CF2                          1325  ENDPARSE:
00001CF2  1883                    1326          MOVE.B  D3,(A4)   ;commit memory change 
00001CF4  528C                    1327  ENTER:  ADD.L   #1,A4   ;increment address
00001CF6  6000 FF7C               1328          BRA     MODIFYLOOP
00001CFA                          1329          
00001CFA                          1330  ***************************************************
00001CFA                          1331  
00001CFA                          1332  WORD:
00001CFA                          1333              
00001CFA  5489                    1334          ADD.L   #2,A1       ;set up for subroutine
00001CFC  3449                    1335          MOVE    A1,A2       ;set up for subroutine
00001CFE  48E7 4270               1336          MOVEM.L D1/D6/A1-A3,-(SP)
00001D02  4EB9 000026AC           1337          JSR     ASCII_ADDRESS
00001D08  4CDF 0E42               1338          MOVEM.L (SP)+,D1/D6/A1-A3
00001D0C  2845                    1339          MOVE.L  D5,A4       ;set up address to modify
00001D0E                          1340         
00001D0E                          1341  MODIFYLOOPW:
00001D0E                          1342          *-------Display Memory First-----*
00001D0E  200C                    1343          MOVE.L  A4,D0
00001D10  80FC 0002               1344          DIVU    #2,D0
00001D14  4840                    1345          SWAP    D0      ;check if it's an odd address
00001D16  B07C 0000               1346          CMP.W   #$00,D0
00001D1A  6600 0944               1347          BNE     ERRORSR
00001D1E  260C                    1348          MOVE.L  A4,D3       ;set up for subroutine
00001D20  2A4C                    1349          MOVE.L  A4,A5       ;next byte of memory may not be needed
00001D22  528D                    1350          ADD.L   #1,A5
00001D24  4EB9 000026EC           1351          JSR     HEXTOASCII  ;convert new address to ascii for output
00001D2A  96CA                    1352          SUBA    A2,A3       ;get num of bytes to produce
00001D2C  7001                    1353          MOVE.L  #1,D0
00001D2E  220B                    1354          MOVE.L  A3,D1
00001D30  224A                    1355          MOVE.L  A2,A1
00001D32  4E4F                    1356          TRAP    #15
00001D34                          1357          
00001D34                          1358          *add colon to denote containing data*
00001D34  12BC 003A               1359          MOVE.B  #$3A,(A1)
00001D38  7201                    1360          MOVE.L  #1,D1   ;display only the colon
00001D3A  7001                    1361          MOVE.L  #1,D0
00001D3C  4E4F                    1362          TRAP    #15
00001D3E                          1363          
00001D3E  1614                    1364          MOVE.B  (A4),D3
00001D40  4EB9 000026EC           1365          JSR     HEXTOASCII
00001D46  7202                    1366          MOVE.L  #2,D1
00001D48  224A                    1367          MOVE.L  A2,A1
00001D4A  103C 0001               1368          MOVE.B  #1,D0
00001D4E  4E4F                    1369          TRAP    #15
00001D50                          1370          
00001D50  1615                    1371          MOVE.B  (A5),D3
00001D52  4EB9 000026EC           1372          JSR     HEXTOASCII
00001D58  7202                    1373          MOVE.L  #2,D1
00001D5A  224A                    1374          MOVE.L  A2,A1
00001D5C  103C 0001               1375          MOVE.B  #1,D0
00001D60  4E4F                    1376          TRAP    #15
00001D62                          1377  
00001D62                          1378          
00001D62  12BC 0020               1379          MOVE.B  #$20,(A1)
00001D66  7201                    1380          MOVE.L  #1,D1   ;space between held data and input
00001D68  7001                    1381          MOVE.L  #1,D0
00001D6A  4E4F                    1382          TRAP    #15
00001D6C                          1383  
00001D6C                          1384          
00001D6C                          1385          *-----Enter Input-------*
00001D6C  4283                    1386          CLR.L   D3
00001D6E  7C0C                    1387          MOVE.L  #12,D6
00001D70  43F8 3000               1388          LEA     BUFFER,A1   ;set up storage for command
00001D74  103C 0002               1389          MOVE.B  #2,D0       ;load input trap call
00001D78  4E4F                    1390          TRAP    #15
00001D7A  0C11 002E               1391          CMP.B   #$2E,(A1)
00001D7E  6700 0122               1392          BEQ     ENDLP
00001D82  0C11 0000               1393          CMP.B   #$00,(A1)
00001D86  6700 002E               1394          BEQ     ENTERW
00001D8A                          1395          
00001D8A                          1396  PARSELOOPW:
00001D8A  0C11 0000               1397          CMP.B   #$00,(A1)
00001D8E  6700 0024               1398          BEQ     ENDPARSEW        
00001D92  0C11 0040               1399          CMP.B   #$40,(A1)
00001D96  6E00 000A               1400          BGT     HIGHHEXMMW
00001D9A  0411 0030               1401          SUBI.B  #$30,(A1)   ;get hex value
00001D9E  6000 0006               1402          BRA     NEXTMMSTEPW
00001DA2  0411 0037               1403  HIGHHEXMMW: SUBI.B  #$37,(A1)  ;get hex value
00001DA6                          1404  NEXTMMSTEPW:
00001DA6  1411                    1405          MOVE.B  (A1),D2
00001DA8  EDBA                    1406          ROL.L   D6,D2
00001DAA  5986                    1407          SUBI.L  #4,D6
00001DAC  5289                    1408          ADD.L   #1,A1
00001DAE  D682                    1409          ADD.L   D2,D3   ;total byte stored in D3
00001DB0  4282                    1410          CLR.L   D2      ;clear for next rotate
00001DB2  60D6                    1411          BRA     PARSELOOPW
00001DB4                          1412  ENDPARSEW:
00001DB4                          1413          
00001DB4  3883                    1414          MOVE.W  D3,(A4)   ;commit memory change 
00001DB6  548C                    1415  ENTERW:  ADD.L   #2,A4   ;increment address
00001DB8  6000 FF54               1416          BRA     MODIFYLOOPW
00001DBC                          1417  
00001DBC                          1418  ***************************************************
00001DBC                          1419  
00001DBC                          1420  LONG:  
00001DBC  5489                    1421          ADD.L   #2,A1       ;set up for subroutine
00001DBE  3449                    1422          MOVE    A1,A2       ;set up for subroutine
00001DC0  48E7 4270               1423          MOVEM.L D1/D6/A1-A3,-(SP)
00001DC4  4EB9 000026AC           1424          JSR     ASCII_ADDRESS
00001DCA  4CDF 0E42               1425          MOVEM.L (SP)+,D1/D6/A1-A3
00001DCE  2845                    1426          MOVE.L  D5,A4       ;set up address to modify
00001DD0                          1427         
00001DD0                          1428  MODIFYLOOPL:
00001DD0                          1429          *-------Display Memory First-----*
00001DD0  200C                    1430          MOVE.L  A4,D0
00001DD2  80FC 0002               1431          DIVU    #2,D0
00001DD6  4840                    1432          SWAP    D0      ;check if it's an odd address
00001DD8  B07C 0000               1433          CMP.W   #$00,D0
00001DDC  6600 0882               1434          BNE     ERRORSR
00001DE0  260C                    1435          MOVE.L  A4,D3       ;set up for subroutine
00001DE2  2A4C                    1436          MOVE.L  A4,A5       ;next byte of memory may not be needed
00001DE4  528D                    1437          ADD.L   #1,A5
00001DE6  4EB9 000026EC           1438          JSR     HEXTOASCII  ;convert new address to ascii for output
00001DEC  96CA                    1439          SUBA    A2,A3       ;get num of bytes to produce
00001DEE  7001                    1440          MOVE.L  #1,D0
00001DF0  220B                    1441          MOVE.L  A3,D1
00001DF2  224A                    1442          MOVE.L  A2,A1
00001DF4  4E4F                    1443          TRAP    #15
00001DF6                          1444          
00001DF6                          1445          *add colon to denote containing data*
00001DF6  12BC 003A               1446          MOVE.B  #$3A,(A1)
00001DFA  7201                    1447          MOVE.L  #1,D1   ;display only the colon
00001DFC  7001                    1448          MOVE.L  #1,D0
00001DFE  4E4F                    1449          TRAP    #15
00001E00                          1450          
00001E00  1614                    1451          MOVE.B  (A4),D3
00001E02  4EB9 000026EC           1452          JSR     HEXTOASCII
00001E08  7202                    1453          MOVE.L  #2,D1
00001E0A  224A                    1454          MOVE.L  A2,A1
00001E0C  103C 0001               1455          MOVE.B  #1,D0
00001E10  4E4F                    1456          TRAP    #15
00001E12                          1457          
00001E12  161D                    1458          MOVE.B  (A5)+,D3
00001E14  4EB9 000026EC           1459          JSR     HEXTOASCII
00001E1A  7202                    1460          MOVE.L  #2,D1
00001E1C  224A                    1461          MOVE.L  A2,A1
00001E1E  103C 0001               1462          MOVE.B  #1,D0
00001E22  4E4F                    1463          TRAP    #15
00001E24                          1464          
00001E24  161D                    1465          MOVE.B  (A5)+,D3
00001E26  4EB9 000026EC           1466          JSR     HEXTOASCII
00001E2C  7202                    1467          MOVE.L  #2,D1
00001E2E  224A                    1468          MOVE.L  A2,A1
00001E30  103C 0001               1469          MOVE.B  #1,D0
00001E34  4E4F                    1470          TRAP    #15
00001E36  161D                    1471          MOVE.B  (A5)+,D3
00001E38  4EB9 000026EC           1472          JSR     HEXTOASCII
00001E3E  7202                    1473          MOVE.L  #2,D1
00001E40  224A                    1474          MOVE.L  A2,A1
00001E42  103C 0001               1475          MOVE.B  #1,D0
00001E46  4E4F                    1476          TRAP    #15
00001E48                          1477     
00001E48  12BC 0020               1478          MOVE.B  #$20,(A1)
00001E4C  7201                    1479          MOVE.L  #1,D1   ;space between held data and input
00001E4E  7001                    1480          MOVE.L  #1,D0
00001E50  4E4F                    1481          TRAP    #15
00001E52                          1482  
00001E52                          1483          
00001E52                          1484          *-----Enter Input-------*
00001E52  4283                    1485          CLR.L   D3
00001E54  7C1C                    1486          MOVE.L  #28,D6
00001E56  43F8 3000               1487          LEA     BUFFER,A1   ;set up storage for command
00001E5A  103C 0002               1488          MOVE.B  #2,D0       ;load input trap call
00001E5E  4E4F                    1489          TRAP    #15
00001E60  0C11 002E               1490          CMP.B   #$2E,(A1)
00001E64  6700 003C               1491          BEQ     ENDLP
00001E68  0C11 0000               1492          CMP.B   #$00,(A1)
00001E6C  6700 002E               1493          BEQ     ENTERL
00001E70                          1494          
00001E70                          1495  PARSELOOPL:
00001E70  0C11 0000               1496          CMP.B   #$00,(A1)
00001E74  6700 0024               1497          BEQ     ENDPARSEL        
00001E78  0C11 0040               1498          CMP.B   #$40,(A1)
00001E7C  6E00 000A               1499          BGT     HIGHHEXMML
00001E80  0411 0030               1500          SUBI.B  #$30,(A1)   ;get hex value
00001E84  6000 0006               1501          BRA     NEXTMMSTEPL
00001E88  0411 0037               1502  HIGHHEXMML: SUBI.B  #$37,(A1)  ;get hex value
00001E8C                          1503  NEXTMMSTEPL:
00001E8C  1411                    1504          MOVE.B  (A1),D2
00001E8E  EDBA                    1505          ROL.L   D6,D2
00001E90  5986                    1506          SUBI.L  #4,D6
00001E92  5289                    1507          ADD.L   #1,A1
00001E94  D682                    1508          ADD.L   D2,D3   ;total byte stored in D3
00001E96  4282                    1509          CLR.L   D2      ;clear for next rotate
00001E98  60D6                    1510          BRA     PARSELOOPL
00001E9A                          1511  ENDPARSEL:
00001E9A  2883                    1512          MOVE.L  D3,(A4)   ;commit memory change 
00001E9C  588C                    1513  ENTERL:  ADD.L   #4,A4   ;increment address
00001E9E  6000 FF30               1514          BRA     MODIFYLOOPL
00001EA2                          1515  
00001EA2                          1516  
00001EA2  6000 F252               1517  ENDLP:  BRA RESTORE
00001EA6                          1518          
00001EA6                          1519          
00001EA6                          1520  *--------------------------------------------------------------------------------------*
00001EA6                          1521  
00001EA6                          1522  BF:    
00001EA6  5289                    1523         ADD.L    #1,A1   ;first byte of data
00001EA8  2649                    1524         MOVE.L   A1,A3   ;for end ptr
00001EAA                          1525  BFGETENDDATA:
00001EAA  0C1B 0020               1526          CMP.B   #$20,(A3)+
00001EAE  6700 0004               1527          BEQ     BFNEXTADDR
00001EB2  60F6                    1528          BRA     BFGETENDDATA
00001EB4                          1529  BFNEXTADDR:
00001EB4  2449                    1530          MOVE.L  A1,A2   ;for subroutine
00001EB6  538B                    1531          SUB.L   #1,A3   ;off by one error
00001EB8  4EB9 000026AC           1532          JSR     ASCII_ADDRESS
00001EBE  2F05                    1533          MOVE.L  D5,-(SP)    ;save data on the stack
00001EC0                          1534          
00001EC0  528B                    1535          ADD.L   #1,A3   ;inc end ptr to first byte of address
00001EC2  244B                    1536          MOVE.L  A3,A2   ;set start ptr
00001EC4                          1537  BFGETENDADDRONE:
00001EC4  0C1B 0020               1538          CMP.B   #$20,(A3)+
00001EC8  6700 0004               1539          BEQ     BFNEXTADDRTWO
00001ECC  60F6                    1540          BRA     BFGETENDADDRONE
00001ECE                          1541          
00001ECE                          1542  BFNEXTADDRTWO:
00001ECE  538B                    1543          SUB.L   #1,A3   ;off by one error
00001ED0  4EB9 000026AC           1544          JSR     ASCII_ADDRESS   ;convert address to hex
00001ED6  2A45                    1545          MOVE.L  D5,A5       ;store address 1 in A5
00001ED8  8AFC 0002               1546          DIVU    #2,D5
00001EDC  4845                    1547          SWAP    D5
00001EDE  BA7C 0000               1548          CMP.W   #$00,D5
00001EE2  6600 077C               1549          BNE     ERRORSR
00001EE6                          1550          
00001EE6  528B                    1551          ADD.L   #1,A3   ;inc end ptr to first byte of address
00001EE8  244B                    1552          MOVE.L  A3,A2   ;set start ptr
00001EEA                          1553  BFGETLASTEND:
00001EEA  0C1B 0000               1554          CMP.B   #$00,(A3)+
00001EEE  6700 0004               1555          BEQ     STOREDATA
00001EF2  60F6                    1556          BRA     BFGETLASTEND
00001EF4                          1557          
00001EF4                          1558  STOREDATA:
00001EF4  538B                    1559          SUB.L   #1,A3   ;off by one error
00001EF6  4EB9 000026AC           1560          JSR     ASCII_ADDRESS
00001EFC  2C45                    1561          MOVE.L  D5,A6   ;end address in A6
00001EFE  8AFC 0002               1562          DIVU    #2,D5
00001F02  4845                    1563          SWAP    D5
00001F04  BA7C 0000               1564          CMP.W   #$00,D5
00001F08  6600 0756               1565          BNE     ERRORSR
00001F0C  2A1F                    1566          MOVE.L  (SP)+,D5
00001F0E                          1567          
00001F0E                          1568  DATALOOP:
00001F0E  BDCD                    1569          CMP.L   A5,A6
00001F10  6D00 0006               1570          BLT     ENDBF
00001F14  3AC5                    1571          MOVE.W  D5,(A5)+
00001F16  60F6                    1572          BRA     DATALOOP
00001F18                          1573  
00001F18  6000 F1DC               1574  ENDBF:  BRA RESTORE
00001F1C                          1575  *--------------------------------------------------------------------------------------*
00001F1C                          1576  
00001F1C  5289                    1577  BMOV:   ADD.L   #1,A1   ;get to start of first address
00001F1E  2449                    1578          MOVE.L  A1,A2   ;set up start ptr
00001F20  264A                    1579          MOVE.L  A2,A3   ;set up end ptr
00001F22                          1580          
00001F22                          1581  FIRSTADDRESS:
00001F22  0C1B 0020               1582          CMP.B #$20,(A3)+
00001F26  6700 0004               1583          BEQ     COMPUTEFIRSTADD
00001F2A  60F6                    1584          BRA     FIRSTADDRESS
00001F2C                          1585          
00001F2C                          1586  COMPUTEFIRSTADD:
00001F2C  538B                    1587          SUB.L   #1,A3   ;off by one error
00001F2E  4EB9 000026AC           1588          JSR     ASCII_ADDRESS
00001F34  2045                    1589          MOVE.L  D5,A0   ; save 1st address
00001F36                          1590          
00001F36  528B                    1591          ADD.L   #1,A3
00001F38  244B                    1592          MOVE.L  A3,A2
00001F3A                          1593  SECONDADDRESS:
00001F3A  0C1B 0020               1594          CMP.B   #$20,(A3)+
00001F3E  6700 0004               1595          BEQ     COMPUTESECONDADDRESS
00001F42  60F6                    1596          BRA     SECONDADDRESS
00001F44                          1597          
00001F44                          1598  COMPUTESECONDADDRESS:
00001F44  538B                    1599          SUB.L   #1,A3   ;off by one error
00001F46  4EB9 000026AC           1600          JSR     ASCII_ADDRESS
00001F4C  2845                    1601          MOVE.L  D5,A4   ;save 2nd address
00001F4E                          1602  
00001F4E  528B                    1603          ADD.L   #1,A3
00001F50  244B                    1604          MOVE.L  A3,A2
00001F52                          1605  THIRDADDRESS:
00001F52  0C1B 0020               1606          CMP.B   #$20,(A3)+
00001F56  6700 0004               1607          BEQ     COMPUTETHIRDADDRESS
00001F5A  60F6                    1608          BRA     THIRDADDRESS
00001F5C                          1609          
00001F5C                          1610  COMPUTETHIRDADDRESS:
00001F5C  538B                    1611          SUB.L   #1,A3
00001F5E  4EB9 000026AC           1612          JSR     ASCII_ADDRESS
00001F64  2A45                    1613          MOVE.L  D5,A5   ;save 3rd address
00001F66                          1614          
00001F66  528B                    1615          ADD.L   #1,A3
00001F68  244B                    1616          MOVE.L  A3,A2
00001F6A                          1617  FOURTHADDRESS:
00001F6A  0C1B 0000               1618          CMP.B   #$00,(A3)+
00001F6E  6700 0004               1619          BEQ     COMPUTEFOURTHADDRESS
00001F72  60F6                    1620          BRA     FOURTHADDRESS
00001F74                          1621          
00001F74                          1622  COMPUTEFOURTHADDRESS:
00001F74  538B                    1623          SUB.L   #1,A3
00001F76  4EB9 000026AC           1624          JSR     ASCII_ADDRESS
00001F7C  2C45                    1625          MOVE.L  D5,A6   ;save 3rd address
00001F7E                          1626          
00001F7E                          1627          
00001F7E                          1628  
00001F7E                          1629          *Check for matching dimensions*
00001F7E  2008                    1630          MOVE.L  A0,D0
00001F80  220C                    1631          MOVE.L  A4,D1
00001F82  2A0D                    1632          MOVE.L  A5,D5
00001F84  2C0E                    1633          MOVE.L  A6,D6
00001F86  9280                    1634          SUB.L   D0,D1
00001F88  9C85                    1635          SUB.L   D5,D6
00001F8A  BC81                    1636          CMP.L   D1,D6
00001F8C  6600 06D2               1637          BNE     ERRORSR
00001F90  B9C8                    1638          CMP.L   A0,A4
00001F92  6D00 06CC               1639          BLT     ERRORSR
00001F96  BDCD                    1640          CMP.L   A5,A6
00001F98  6D00 06C6               1641          BLT     ERRORSR
00001F9C                          1642  
00001F9C                          1643  DATATRANSFER:
00001F9C  B9C8                    1644          CMP.L   A0,A4
00001F9E  6D00 0006               1645          BLT     BMOVDONE
00001FA2  1AD8                    1646          MOVE.B  (A0)+,(A5)+
00001FA4  60F6                    1647          BRA     DATATRANSFER
00001FA6                          1648          
00001FA6                          1649  
00001FA6                          1650  
00001FA6                          1651  BMOVDONE:
00001FA6  6000 F14E               1652          BRA RESTORE
00001FAA                          1653  
00001FAA                          1654  *--------------------------------------------------------------------------------------*
00001FAA                          1655  
00001FAA                          1656  BTST:   
00001FAA  5289                    1657         ADD.L    #1,A1   ;first byte of data
00001FAC  2649                    1658         MOVE.L   A1,A3   ;for end ptr
00001FAE                          1659  BTSTGETENDDATA:
00001FAE  0C1B 0020               1660          CMP.B   #$20,(A3)+
00001FB2  6700 0004               1661          BEQ     BTSTNEXTADDR
00001FB6  60F6                    1662          BRA     BTSTGETENDDATA
00001FB8                          1663  BTSTNEXTADDR:
00001FB8  2449                    1664          MOVE.L  A1,A2   ;for subroutine
00001FBA  538B                    1665          SUB.L   #1,A3   ;off by one error
00001FBC  4EB9 000026AC           1666          JSR     ASCII_ADDRESS
00001FC2  2F05                    1667          MOVE.L  D5,-(SP)    ;save data on the stack
00001FC4                          1668          
00001FC4  528B                    1669          ADD.L   #1,A3   ;inc end ptr to first byte of address
00001FC6  244B                    1670          MOVE.L  A3,A2   ;set start ptr
00001FC8                          1671  BTSTGETENDADDRONE:
00001FC8  0C1B 0020               1672          CMP.B   #$20,(A3)+
00001FCC  6700 0004               1673          BEQ     BTSTNEXTADDRTWO
00001FD0  60F6                    1674          BRA     BTSTGETENDADDRONE
00001FD2                          1675          
00001FD2                          1676  BTSTNEXTADDRTWO:
00001FD2  538B                    1677          SUB.L   #1,A3   ;off by one error
00001FD4  4EB9 000026AC           1678          JSR     ASCII_ADDRESS   ;convert address to hex
00001FDA  2A45                    1679          MOVE.L  D5,A5       ;store address 1 in A5
00001FDC  2845                    1680          MOVE.L  D5,A4       ;for second run through
00001FDE                          1681                
00001FDE  528B                    1682          ADD.L   #1,A3   ;inc end ptr to first byte of address
00001FE0  244B                    1683          MOVE.L  A3,A2   ;set start ptr
00001FE2                          1684  BTSTGETLASTEND:
00001FE2  0C1B 0000               1685          CMP.B   #$00,(A3)+
00001FE6  6700 0004               1686          BEQ     STOREDATABTST
00001FEA  60F6                    1687          BRA     BTSTGETLASTEND
00001FEC                          1688  
00001FEC                          1689  
00001FEC                          1690  STOREDATABTST:
00001FEC  538B                    1691          SUB.L   #1,A3   ;off by one error
00001FEE  4EB9 000026AC           1692          JSR     ASCII_ADDRESS
00001FF4  2C45                    1693          MOVE.L  D5,A6   ;end address in A6
00001FF6  2A1F                    1694          MOVE.L  (SP)+,D5
00001FF8                          1695          
00001FF8                          1696  BTSTDATALOOP:
00001FF8  BDCD                    1697          CMP.L   A5,A6
00001FFA  6D00 0006               1698          BLT     READ
00001FFE  1AC5                    1699          MOVE.B  D5,(A5)+
00002000  60F6                    1700          BRA     BTSTDATALOOP
00002002                          1701  
00002002                          1702  
00002002                          1703  READ:
00002002  BDCC                    1704          CMP.L   A4,A6
00002004  6D00 006C               1705          BLT     COMPLETE
00002008  BA1C                    1706          CMP.B   (A4)+,D5
0000200A  6600 0004               1707          BNE     FAIL
0000200E  60F2                    1708          BRA     READ
00002010                          1709          
00002010                          1710  FAIL:
00002010  43F8 37BC               1711          LEA     BTST4,A1
00002014  720B                    1712          MOVE.L  #11,D1
00002016  7000                    1713          MOVE.L  #0,D0
00002018  4E4F                    1714          TRAP    #15
0000201A                          1715          
0000201A  43F8 3785               1716          LEA     BTST1,A1
0000201E  7001                    1717          MOVE.L  #1,D0
00002020  7214                    1718          MOVE.L  #20,D1
00002022  4E4F                    1719          TRAP    #15
00002024                          1720          
00002024  1605                    1721          MOVE.B  D5,D3   ;for subroutine
00002026  4EB9 000026EC           1722          JSR     HEXTOASCII
0000202C  224A                    1723          MOVE.L     A2,A1
0000202E  7000                    1724          MOVE.L  #0,D0
00002030  97CA                    1725          SUBA.L  A2,A3   ;number of bytes
00002032  220B                    1726          MOVE.L  A3,D1
00002034  4E4F                    1727          TRAP    #15
00002036                          1728          
00002036                          1729          
00002036  43F8 3799               1730          LEA     BTST2,A1
0000203A  7001                    1731          MOVE.L  #1,D0
0000203C  7211                    1732          MOVE.L  #17,D1
0000203E  4E4F                    1733          TRAP    #15
00002040                          1734          
00002040                          1735          
00002040  538C                    1736          SUB.L   #1,A4   ;go back to address that failed
00002042  1614                    1737          MOVE.B  (A4),D3
00002044  4EB9 000026EC           1738          JSR     HEXTOASCII  ;convert for output
0000204A  224A                    1739          MOVE.L     A2,A1
0000204C  7000                    1740          MOVE.L  #0,D0
0000204E  97CA                    1741          SUBA.L  A2,A3   ;number of bytes
00002050  220B                    1742          MOVE.L  A3,D1
00002052  4E4F                    1743          TRAP    #15
00002054                          1744          
00002054  43F8 37C7               1745          LEA     BTST5,A1
00002058  721B                    1746          MOVE.L  #27,D1
0000205A  103C 0001               1747          MOVE.B  #1,D0
0000205E  4E4F                    1748          TRAP    #15
00002060  260C                    1749          MOVE.L  A4,D3
00002062  4EB9 000026EC           1750          JSR     HEXTOASCII
00002068  224A                    1751          MOVE.L     A2,A1
0000206A  7000                    1752          MOVE.L  #0,D0
0000206C  97CA                    1753          SUBA.L  A2,A3   ;number of bytes
0000206E  220B                    1754          MOVE.L  A3,D1
00002070  4E4F                    1755          TRAP    #15
00002072                          1756  
00002072                          1757  
00002072                          1758          
00002072                          1759  COMPLETE:
00002072                          1760  
00002072  43F8 37AA               1761          LEA     BTST3,A1
00002076  7212                    1762          MOVE.L  #18,D1
00002078  7000                    1763          MOVE.L  #0,D0
0000207A  4E4F                    1764          TRAP    #15
0000207C  6000 F078               1765          BRA RESTORE
00002080                          1766  
00002080                          1767  *--------------------------------------------------------------------------------------*
00002080                          1768  
00002080                          1769  BSCH:   
00002080  5289                    1770          ADD.L   #1,A1   ;start of data
00002082  2449                    1771          MOVE.L  A1,A2   ;set up bac ptr
00002084                          1772          
00002084                          1773  BSCHENDDATA:
00002084  0C1A 0020               1774          CMP.B   #$20,(A2)+
00002088  6700 0004               1775          BEQ     BSCHFIRSTADD
0000208C  60F6                    1776          BRA     BSCHENDDATA
0000208E                          1777  
0000208E                          1778  
0000208E                          1779  BSCHFIRSTADD:
0000208E  538A                    1780          SUB.L   #1,A2
00002090  264A                    1781          MOVE.L  A2,A3
00002092  2449                    1782          MOVE.L  A1,A2
00002094  4EB9 000026AC           1783          JSR     ASCII_ADDRESS
0000209A  97C9                    1784          SUB.L   A1,A3   ;see how many bytes
0000209C  2C0B                    1785          MOVE.L  A3,D6   ;store byte/word/long in D6   
0000209E  528A                    1786          ADD.L   #1,A2   ;set up for start of next address     
000020A0  264A                    1787          MOVE.L  A2,A3   ;set up for end ptr
000020A2  2F05                    1788          MOVE.L  D5,-(SP)    ;save data to stack
000020A4                          1789          
000020A4                          1790          
000020A4                          1791  BSCHFADDEND:
000020A4  0C1B 0020               1792          CMP.B   #$20,(A3)+
000020A8  6700 0004               1793          BEQ     BSCHSECONDADD
000020AC  60F6                    1794          BRA     BSCHFADDEND
000020AE                          1795          
000020AE                          1796          
000020AE                          1797  BSCHSECONDADD:
000020AE  538B                    1798          SUB.L   #1,A3   ;off by one
000020B0  4EB9 000026AC           1799          JSR     ASCII_ADDRESS
000020B6  2A45                    1800          MOVE.L  D5,A5   ;first address destination
000020B8  528B                    1801          ADD.L   #1,A3   ;start it at next address
000020BA  244B                    1802          MOVE.L  A3,A2   ; set up for next address
000020BC                          1803          
000020BC                          1804          
000020BC                          1805  BSCHSECONDFIND:
000020BC  0C1B 0000               1806          CMP.B   #$00,(A3)+
000020C0  6700 0004               1807          BEQ     TESTOP
000020C4  60F6                    1808          BRA     BSCHSECONDFIND
000020C6                          1809          
000020C6                          1810          
000020C6                          1811  TESTOP: 
000020C6  538B                    1812          SUB.L   #1,A3   ;off by one
000020C8  4EB9 000026AC           1813          JSR     ASCII_ADDRESS
000020CE  2C45                    1814          MOVE.L  D5,A6   ;end address at A6
000020D0  2A1F                    1815          MOVE.L  (SP)+,D5    ;restore data
000020D2  BC3C 0002               1816          CMP.B   #2,D6
000020D6  6700 0016               1817          BEQ     BYTEBSCH
000020DA  BC3C 0004               1818          CMP.B   #4,D6
000020DE  6700 001C               1819          BEQ     WORDBSCH
000020E2  BC3C 0008               1820          CMP.B   #8,D6
000020E6  6700 0022               1821          BEQ     LONGBSCH
000020EA  6000 0574               1822          BRA     ERRORSR
000020EE                          1823          
000020EE                          1824  BYTEBSCH:
000020EE  BDCD                    1825          CMP.L   A5,A6
000020F0  6D00 0070               1826          BLT     ENDBSCH
000020F4  BA1D                    1827          CMP.B   (A5)+,D5
000020F6  6700 0020               1828          BEQ     FOUNDB
000020FA  60F2                    1829          BRA     BYTEBSCH
000020FC                          1830  
000020FC                          1831  WORDBSCH:
000020FC  BDCD                    1832          CMP.L   A5,A6
000020FE  6D00 0062               1833          BLT     ENDBSCH
00002102  BA5D                    1834          CMP.W   (A5)+,D5
00002104  6700 001A               1835          BEQ     FOUNDW
00002108  60F2                    1836          BRA     WORDBSCH
0000210A                          1837  
0000210A                          1838  LONGBSCH:
0000210A  BDCD                    1839          CMP.L   A5,A6
0000210C  6D00 0054               1840          BLT     ENDBSCH
00002110  BA9D                    1841          CMP.L   (A5)+,D5
00002112  6700 0014               1842          BEQ     FOUNDL
00002116  60F2                    1843          BRA     LONGBSCH
00002118                          1844  
00002118                          1845  
00002118                          1846  
00002118                          1847  FOUNDB:
00002118  538D                    1848          SUB.L   #1,A5
0000211A  1615                    1849          MOVE.B  (A5),D3
0000211C  6000 000E               1850          BRA     SUCCESSTEXT
00002120                          1851  FOUNDW:
00002120  558D                    1852          SUB.L   #2,A5
00002122  3615                    1853          MOVE.W  (A5),D3
00002124  6000 0006               1854          BRA     SUCCESSTEXT
00002128                          1855  FOUNDL:
00002128  598D                    1856          SUB.L   #4,A5
0000212A  2615                    1857          MOVE.L  (A5),D3
0000212C                          1858          
0000212C                          1859  SUCCESSTEXT:
0000212C  43F8 37E2               1860          LEA BSCH1,A1
00002130  7206                    1861          MOVE.L  #6,D1
00002132  7001                    1862          MOVE.L  #1,D0
00002134  4E4F                    1863          TRAP    #15
00002136                          1864  
00002136  4EB9 000026EC           1865          JSR     HEXTOASCII
0000213C  224A                    1866          MOVE.L  A2,A1
0000213E  97CA                    1867          SUB.L   A2,A3
00002140  220B                    1868          MOVE.L  A3,D1   ;how many bytes
00002142  7000                    1869          MOVE.L  #0,D0
00002144  4E4F                    1870          TRAP    #15
00002146                          1871          
00002146  43F8 37E8               1872          LEA BSCH2,A1
0000214A  7212                    1873          MOVE.L  #18,D1
0000214C  7001                    1874          MOVE.L  #1,D0
0000214E  4E4F                    1875          TRAP    #15
00002150                          1876          
00002150  260D                    1877          MOVE.L  A5,D3
00002152  4EB9 000026EC           1878          JSR     HEXTOASCII
00002158  224A                    1879          MOVE.L  A2,A1
0000215A  97CA                    1880          SUB.L   A2,A3
0000215C  220B                    1881          MOVE.L  A3,D1   ;how many bytes
0000215E  7000                    1882          MOVE.L  #0,D0
00002160  4E4F                    1883          TRAP    #15
00002162                          1884  
00002162                          1885          
00002162                          1886  ENDBSCH:        
00002162  6000 EF92               1887          BRA RESTORE
00002166                          1888  
00002166                          1889  *--------------------------------------------------------------------------------------*
00002166                          1890  
00002166                          1891  GO:    
00002166  2449                    1892          MOVE.L  A1,A2   ;setup for hex conversion
00002168  264A                    1893          MOVE.L  A2,A3   
0000216A                          1894  GGETEND:
0000216A  0C1B 0000               1895          CMP.B   #$00,(A3)+
0000216E  6700 0004               1896          BEQ     EXECUTE
00002172  60F6                    1897          BRA     GGETEND
00002174                          1898          
00002174                          1899  EXECUTE:
00002174  538B                    1900          SUB.L   #1,A3   ;off by one error
00002176  4EB9 000026AC           1901          JSR     ASCII_ADDRESS
0000217C  2045                    1902          MOVE.L  D5,A0   
0000217E  4E90                    1903          JSR     (A0)    ;go to program
00002180                          1904          **NOTE: THE PROGRAM MUST HAVE RTS OR CONTROL WILL NOT BE RETURNED BACK TO MONITOR441!!!**
00002180  6000 EF74               1905          BRA RESTORE
00002184                          1906  
00002184                          1907  *--------------------------------------------------------------------------------------*
00002184                          1908  
00002184                          1909  DF:    *Registers have already been saved to STACK, just need to pop them off first*
00002184                          1910          *Stack looks like this*
00002184                          1911          
00002184                          1912          *-------------*
00002184                          1913          *|D0-D7/A0-A6|*
00002184                          1914          *|     USP   |*
00002184                          1915          *|     SR    |*
00002184                          1916          *|     SSP   |*
00002184                          1917          *|     PC    |*
00002184                          1918          *-------------*
00002184                          1919          *I should've used loops for efficiency but runtime is not a design constraint*
00002184                          1920          *Maybe fix this in the future?*
00002184                          1921          
00002184                          1922            *----------D0-----------*
00002184  43F8 380B               1923         LEA      RD0,A1
00002188  7204                    1924         MOVE.L   #4,D1
0000218A  7001                    1925         MOVE.L   #1,D0
0000218C  4E4F                    1926         TRAP     #15
0000218E  261F                    1927         MOVE.L   (SP)+,D3    
00002190  4EB9 000026EC           1928         JSR      HEXTOASCII
00002196  224A                    1929         MOVE.L   A2,A1
00002198  95CB                    1930         SUB.L    A3,A2
0000219A  240A                    1931         MOVE.L   A2,D2
0000219C  B4BC FFFFFFF8           1932         CMP.L    #-8,D2
000021A2  6700 0006               1933         BEQ      D0DONTWORRY
000021A6                          1934  D0ACCOUNTFORZEROS:
000021A6  5082                    1935          ADDI.L  #8,D2
000021A8  93C2                    1936          SUB.L   D2,A1
000021AA                          1937  D0DONTWORRY:
000021AA  7000                    1938         MOVE.L   #0,D0
000021AC  7208                    1939         MOVE.L   #8,D1
000021AE  4E4F                    1940         TRAP     #15
000021B0                          1941         
000021B0                          1942             *----------D1-----------*
000021B0  43F8 380F               1943         LEA      RD1,A1
000021B4  7204                    1944         MOVE.L   #4,D1
000021B6  7001                    1945         MOVE.L   #1,D0
000021B8  4E4F                    1946         TRAP     #15
000021BA  261F                    1947         MOVE.L   (SP)+,D3    
000021BC  4EB9 000026EC           1948         JSR      HEXTOASCII
000021C2  224A                    1949         MOVE.L   A2,A1
000021C4  95CB                    1950         SUB.L    A3,A2
000021C6  240A                    1951         MOVE.L   A2,D2
000021C8  B4BC FFFFFFF8           1952         CMP.L    #-8,D2
000021CE  6700 0006               1953         BEQ      D1DONTWORRY
000021D2                          1954  D1ACCOUNTFORZEROS:
000021D2  5082                    1955          ADDI.L  #8,D2
000021D4  93C2                    1956          SUB.L   D2,A1
000021D6                          1957  D1DONTWORRY:
000021D6  7000                    1958         MOVE.L   #0,D0
000021D8  7208                    1959         MOVE.L   #8,D1
000021DA  4E4F                    1960         TRAP     #15
000021DC                          1961         
000021DC                          1962             *----------D2-----------*
000021DC  43F8 3813               1963         LEA      RD2,A1
000021E0  7204                    1964         MOVE.L   #4,D1
000021E2  7001                    1965         MOVE.L   #1,D0
000021E4  4E4F                    1966         TRAP     #15
000021E6  261F                    1967         MOVE.L   (SP)+,D3   
000021E8  4EB9 000026EC           1968         JSR      HEXTOASCII
000021EE  224A                    1969         MOVE.L   A2,A1
000021F0  95CB                    1970         SUB.L    A3,A2
000021F2  240A                    1971         MOVE.L   A2,D2
000021F4  B4BC FFFFFFF8           1972         CMP.L    #-8,D2
000021FA  6700 0006               1973         BEQ      D2DONTWORRY
000021FE                          1974  D2ACCOUNTFORZEROS:
000021FE  5082                    1975          ADDI.L  #8,D2
00002200  93C2                    1976          SUB.L   D2,A1
00002202                          1977  D2DONTWORRY:
00002202  7000                    1978         MOVE.L   #0,D0
00002204  7208                    1979         MOVE.L   #8,D1
00002206  4E4F                    1980         TRAP     #15
00002208                          1981         
00002208                          1982              *----------D3-----------*
00002208  43F8 3817               1983         LEA      RD3,A1
0000220C  7204                    1984         MOVE.L   #4,D1
0000220E  7001                    1985         MOVE.L   #1,D0
00002210  4E4F                    1986         TRAP     #15   
00002212  261F                    1987         MOVE.L   (SP)+,D3  
00002214  4EB9 000026EC           1988         JSR      HEXTOASCII
0000221A  224A                    1989         MOVE.L   A2,A1
0000221C  95CB                    1990         SUB.L    A3,A2
0000221E  240A                    1991         MOVE.L   A2,D2
00002220  B4BC FFFFFFF8           1992         CMP.L    #-8,D2
00002226  6700 0006               1993         BEQ      D3DONTWORRY
0000222A                          1994  D3ACCOUNTFORZEROS:
0000222A  5082                    1995          ADDI.L  #8,D2
0000222C  93C2                    1996          SUB.L   D2,A1
0000222E                          1997  D3DONTWORRY:
0000222E  7000                    1998         MOVE.L   #0,D0
00002230  7208                    1999         MOVE.L   #8,D1
00002232  4E4F                    2000         TRAP     #15
00002234                          2001         
00002234                          2002              *----------D4-----------*
00002234  43F8 381B               2003         LEA      RD4,A1
00002238  7204                    2004         MOVE.L   #4,D1
0000223A  7001                    2005         MOVE.L   #1,D0
0000223C  4E4F                    2006         TRAP     #15
0000223E  261F                    2007         MOVE.L   (SP)+,D3    
00002240  4EB9 000026EC           2008         JSR      HEXTOASCII
00002246  224A                    2009         MOVE.L   A2,A1
00002248  95CB                    2010         SUB.L    A3,A2
0000224A  240A                    2011         MOVE.L   A2,D2
0000224C  B4BC FFFFFFF8           2012         CMP.L    #-8,D2
00002252  6700 0006               2013         BEQ      D4DONTWORRY
00002256                          2014  D4ACCOUNTFORZEROS:
00002256  5082                    2015          ADDI.L  #8,D2
00002258  93C2                    2016          SUB.L   D2,A1
0000225A                          2017  D4DONTWORRY:
0000225A  7000                    2018         MOVE.L   #0,D0
0000225C  7208                    2019         MOVE.L   #8,D1
0000225E  4E4F                    2020         TRAP     #15
00002260                          2021         
00002260                          2022         *----------D5-----------*
00002260  43F8 381F               2023         LEA      RD5,A1
00002264  7204                    2024         MOVE.L   #4,D1
00002266  7001                    2025         MOVE.L   #1,D0
00002268  4E4F                    2026         TRAP     #15
0000226A  261F                    2027         MOVE.L   (SP)+,D3    
0000226C  4EB9 000026EC           2028         JSR      HEXTOASCII
00002272  224A                    2029         MOVE.L   A2,A1
00002274  95CB                    2030         SUB.L    A3,A2
00002276  240A                    2031         MOVE.L   A2,D2
00002278  B4BC FFFFFFF8           2032         CMP.L    #-8,D2
0000227E  6700 0006               2033         BEQ      D5DONTWORRY
00002282                          2034  D5ACCOUNTFORZEROS:
00002282  5082                    2035          ADDI.L  #8,D2
00002284  93C2                    2036          SUB.L   D2,A1
00002286                          2037  D5DONTWORRY:
00002286  7000                    2038         MOVE.L   #0,D0
00002288  7208                    2039         MOVE.L   #8,D1
0000228A  4E4F                    2040         TRAP     #15
0000228C                          2041  
0000228C                          2042          *----------D6-----------*
0000228C  43F8 3823               2043         LEA      RD6,A1
00002290  7204                    2044         MOVE.L   #4,D1
00002292  7001                    2045         MOVE.L   #1,D0
00002294  4E4F                    2046         TRAP     #15
00002296  261F                    2047         MOVE.L   (SP)+,D3    
00002298  4EB9 000026EC           2048         JSR      HEXTOASCII
0000229E  224A                    2049         MOVE.L   A2,A1
000022A0  95CB                    2050         SUB.L    A3,A2
000022A2  240A                    2051         MOVE.L   A2,D2
000022A4  B4BC FFFFFFF8           2052         CMP.L    #-8,D2
000022AA  6700 0006               2053         BEQ      D6DONTWORRY
000022AE                          2054  D6ACCOUNTFORZEROS:
000022AE  5082                    2055          ADDI.L  #8,D2
000022B0  93C2                    2056          SUB.L   D2,A1
000022B2                          2057  D6DONTWORRY:
000022B2  7000                    2058         MOVE.L   #0,D0
000022B4  7208                    2059         MOVE.L   #8,D1
000022B6  4E4F                    2060         TRAP     #15
000022B8                          2061         
000022B8                          2062           *----------D7-----------*
000022B8  43F8 3827               2063         LEA      RD7,A1
000022BC  7204                    2064         MOVE.L   #4,D1
000022BE  7001                    2065         MOVE.L   #1,D0
000022C0  4E4F                    2066         TRAP     #15
000022C2  261F                    2067         MOVE.L   (SP)+,D3    
000022C4  4EB9 000026EC           2068         JSR      HEXTOASCII
000022CA  224A                    2069         MOVE.L   A2,A1
000022CC  95CB                    2070         SUB.L    A3,A2
000022CE  240A                    2071         MOVE.L   A2,D2
000022D0  B4BC FFFFFFF8           2072         CMP.L    #-8,D2
000022D6  6700 0006               2073         BEQ      D7DONTWORRY
000022DA                          2074  D7ACCOUNTFORZEROS:
000022DA  5082                    2075          ADDI.L  #8,D2
000022DC  93C2                    2076          SUB.L   D2,A1
000022DE                          2077  D7DONTWORRY:
000022DE  7000                    2078         MOVE.L   #0,D0
000022E0  7208                    2079         MOVE.L   #8,D1
000022E2  4E4F                    2080         TRAP     #15
000022E4                          2081  
000022E4                          2082     *----------A0-----------*
000022E4  43F8 382B               2083         LEA      RA0,A1
000022E8  7204                    2084         MOVE.L   #4,D1
000022EA  7001                    2085         MOVE.L   #1,D0
000022EC  4E4F                    2086         TRAP     #15
000022EE  261F                    2087         MOVE.L   (SP)+,D3    
000022F0  4EB9 000026EC           2088         JSR      HEXTOASCII
000022F6  224A                    2089         MOVE.L   A2,A1
000022F8  95CB                    2090         SUB.L    A3,A2
000022FA  240A                    2091         MOVE.L   A2,D2
000022FC  B4BC FFFFFFF8           2092         CMP.L    #-8,D2
00002302  6700 0006               2093         BEQ      A0DONTWORRY
00002306                          2094  A0ACCOUNTFORZEROS:
00002306  5082                    2095          ADDI.L  #8,D2
00002308  93C2                    2096          SUB.L   D2,A1
0000230A                          2097  A0DONTWORRY:
0000230A  7000                    2098         MOVE.L   #0,D0
0000230C  7208                    2099         MOVE.L   #8,D1
0000230E  4E4F                    2100         TRAP     #15
00002310                          2101         
00002310                          2102            *----------A1-----------*
00002310  43F8 382F               2103         LEA      RA1,A1
00002314  7204                    2104         MOVE.L   #4,D1
00002316  7001                    2105         MOVE.L   #1,D0
00002318  4E4F                    2106         TRAP     #15
0000231A  261F                    2107         MOVE.L   (SP)+,D3    
0000231C  4EB9 000026EC           2108         JSR      HEXTOASCII
00002322  224A                    2109         MOVE.L   A2,A1
00002324  95CB                    2110         SUB.L    A3,A2
00002326  240A                    2111         MOVE.L   A2,D2
00002328  B4BC FFFFFFF8           2112         CMP.L    #-8,D2
0000232E  6700 0006               2113         BEQ      A1DONTWORRY
00002332                          2114  A1ACCOUNTFORZEROS:
00002332  5082                    2115          ADDI.L  #8,D2
00002334  93C2                    2116          SUB.L   D2,A1
00002336                          2117  A1DONTWORRY:
00002336  7000                    2118         MOVE.L   #0,D0
00002338  7208                    2119         MOVE.L   #8,D1
0000233A  4E4F                    2120         TRAP     #15
0000233C                          2121         
0000233C                          2122          *----------A2-----------*
0000233C  43F8 3833               2123         LEA      RA2,A1
00002340  7204                    2124         MOVE.L   #4,D1
00002342  7001                    2125         MOVE.L   #1,D0
00002344  4E4F                    2126         TRAP     #15
00002346  261F                    2127         MOVE.L   (SP)+,D3    
00002348  4EB9 000026EC           2128         JSR      HEXTOASCII
0000234E  224A                    2129         MOVE.L   A2,A1
00002350  95CB                    2130         SUB.L    A3,A2
00002352  240A                    2131         MOVE.L   A2,D2
00002354  B4BC FFFFFFF8           2132         CMP.L    #-8,D2
0000235A  6700 0006               2133         BEQ      A2DONTWORRY
0000235E                          2134  A2ACCOUNTFORZEROS:
0000235E  5082                    2135          ADDI.L  #8,D2
00002360  93C2                    2136          SUB.L   D2,A1
00002362                          2137  A2DONTWORRY:
00002362  7000                    2138         MOVE.L   #0,D0
00002364  7208                    2139         MOVE.L   #8,D1
00002366  4E4F                    2140         TRAP     #15
00002368                          2141         
00002368                          2142           *----------A3-----------*
00002368  43F8 3837               2143         LEA      RA3,A1
0000236C  7204                    2144         MOVE.L   #4,D1
0000236E  7001                    2145         MOVE.L   #1,D0
00002370  4E4F                    2146         TRAP     #15
00002372  261F                    2147         MOVE.L   (SP)+,D3    
00002374  4EB9 000026EC           2148         JSR      HEXTOASCII
0000237A  224A                    2149         MOVE.L   A2,A1
0000237C  95CB                    2150         SUB.L    A3,A2
0000237E  240A                    2151         MOVE.L   A2,D2
00002380  B4BC FFFFFFF8           2152         CMP.L    #-8,D2
00002386  6700 0006               2153         BEQ      A3DONTWORRY
0000238A                          2154  A3ACCOUNTFORZEROS:
0000238A  5082                    2155          ADDI.L  #8,D2
0000238C  93C2                    2156          SUB.L   D2,A1
0000238E                          2157  A3DONTWORRY:
0000238E  7000                    2158         MOVE.L   #0,D0
00002390  7208                    2159         MOVE.L   #8,D1
00002392  4E4F                    2160         TRAP     #15
00002394                          2161         
00002394                          2162          *----------A4-----------*
00002394  43F8 3837               2163         LEA      RA3,A1
00002398  7204                    2164         MOVE.L   #4,D1
0000239A  7001                    2165         MOVE.L   #1,D0
0000239C  4E4F                    2166         TRAP     #15
0000239E  261F                    2167         MOVE.L   (SP)+,D3    
000023A0  4EB9 000026EC           2168         JSR      HEXTOASCII
000023A6  224A                    2169         MOVE.L   A2,A1
000023A8  95CB                    2170         SUB.L    A3,A2
000023AA  240A                    2171         MOVE.L   A2,D2
000023AC  B4BC FFFFFFF8           2172         CMP.L    #-8,D2
000023B2  6700 0006               2173         BEQ      A4DONTWORRY
000023B6                          2174  A4ACCOUNTFORZEROS:
000023B6  5082                    2175          ADDI.L  #8,D2
000023B8  93C2                    2176          SUB.L   D2,A1
000023BA                          2177  A4DONTWORRY:
000023BA  7000                    2178         MOVE.L   #0,D0
000023BC  7208                    2179         MOVE.L   #8,D1
000023BE  4E4F                    2180         TRAP     #15
000023C0                          2181         
000023C0                          2182         *----------A5-----------*
000023C0  43F8 3837               2183         LEA      RA3,A1
000023C4  7204                    2184         MOVE.L   #4,D1
000023C6  7001                    2185         MOVE.L   #1,D0
000023C8  4E4F                    2186         TRAP     #15
000023CA  261F                    2187         MOVE.L   (SP)+,D3    
000023CC  4EB9 000026EC           2188         JSR      HEXTOASCII
000023D2  224A                    2189         MOVE.L   A2,A1
000023D4  95CB                    2190         SUB.L    A3,A2
000023D6  240A                    2191         MOVE.L   A2,D2
000023D8  B4BC FFFFFFF8           2192         CMP.L    #-8,D2
000023DE  6700 0006               2193         BEQ      A5DONTWORRY
000023E2                          2194  A5ACCOUNTFORZEROS:
000023E2  5082                    2195          ADDI.L  #8,D2
000023E4  93C2                    2196          SUB.L   D2,A1
000023E6                          2197  A5DONTWORRY:
000023E6  7000                    2198         MOVE.L   #0,D0
000023E8  7208                    2199         MOVE.L   #8,D1
000023EA  4E4F                    2200         TRAP     #15
000023EC                          2201         
000023EC                          2202         *----------A6-----------*
000023EC  43F8 3837               2203         LEA      RA3,A1
000023F0  7204                    2204         MOVE.L   #4,D1
000023F2  7001                    2205         MOVE.L   #1,D0
000023F4  4E4F                    2206         TRAP     #15
000023F6  261F                    2207         MOVE.L   (SP)+,D3    
000023F8  4EB9 000026EC           2208         JSR      HEXTOASCII
000023FE  224A                    2209         MOVE.L   A2,A1
00002400  95CB                    2210         SUB.L    A3,A2
00002402  240A                    2211         MOVE.L   A2,D2
00002404  B4BC FFFFFFF8           2212         CMP.L    #-8,D2
0000240A  6700 0006               2213         BEQ      A6DONTWORRY
0000240E                          2214  A6ACCOUNTFORZEROS:
0000240E  5082                    2215          ADDI.L  #8,D2
00002410  93C2                    2216          SUB.L   D2,A1
00002412                          2217  A6DONTWORRY:
00002412  7000                    2218         MOVE.L   #0,D0
00002414  7208                    2219         MOVE.L   #8,D1
00002416  4E4F                    2220         TRAP     #15
00002418                          2221       *-----HACK---*
00002418  DFFC 0000003C           2222       ADD.L  #60,SP  ;should put stack in correct place
0000241E                          2223       
0000241E                          2224                *----------USP-----------*
0000241E  43F8 384E               2225         LEA      RUS,A1
00002422  7204                    2226         MOVE.L   #4,D1
00002424  7001                    2227         MOVE.L   #1,D0
00002426  4E4F                    2228         TRAP     #15
00002428  261F                    2229         MOVE.L   (SP)+,D3    
0000242A  4EB9 000026EC           2230         JSR      HEXTOASCII
00002430  224A                    2231         MOVE.L   A2,A1
00002432  95CB                    2232         SUB.L    A3,A2
00002434  240A                    2233         MOVE.L   A2,D2
00002436  B4BC FFFFFFF8           2234         CMP.L    #-8,D2
0000243C  6700 0006               2235         BEQ      USPDONTWORRY
00002440                          2236  USPACCOUNTFORZEROS:
00002440  5082                    2237          ADDI.L  #8,D2
00002442  93C2                    2238          SUB.L   D2,A1
00002444                          2239  USPDONTWORRY:
00002444  7000                    2240         MOVE.L   #0,D0
00002446  7208                    2241         MOVE.L   #8,D1
00002448  4E4F                    2242         TRAP     #15
0000244A                          2243  
0000244A                          2244                *----------SR-----------*
0000244A  43F8 3856               2245         LEA      RSR,A1
0000244E  7204                    2246         MOVE.L   #4,D1
00002450  7001                    2247         MOVE.L   #1,D0
00002452  4E4F                    2248         TRAP     #15
00002454  361F                    2249         MOVE.W   (SP)+,D3
00002456  3E03                    2250         MOVE.W   D3,D7   ;temp storage to restore before return    
00002458  4EB9 000026EC           2251         JSR      HEXTOASCII
0000245E  224A                    2252         MOVE.L   A2,A1
00002460  95CB                    2253         SUB.L    A3,A2
00002462  240A                    2254         MOVE.L   A2,D2
00002464  B4BC FFFFFFFC           2255         CMP.L    #-4,D2
0000246A  6700 0006               2256         BEQ      SRDONTWORRY
0000246E                          2257  SRACCOUNTFORZEROS:
0000246E  5882                    2258          ADDI.L  #4,D2
00002470  93C2                    2259          SUB.L   D2,A1
00002472                          2260  SRDONTWORRY:
00002472  7000                    2261         MOVE.L   #0,D0
00002474  7204                    2262         MOVE.L   #4,D1
00002476  4E4F                    2263         TRAP     #15
00002478                          2264         
00002478                          2265      *----------SS/A7-----------*
00002478  43F8 3847               2266         LEA      RSS,A1
0000247C  7207                    2267         MOVE.L   #7,D1
0000247E  7001                    2268         MOVE.L   #1,D0
00002480  4E4F                    2269         TRAP     #15
00002482  261F                    2270         MOVE.L   (SP)+,D3    
00002484  4EB9 000026EC           2271         JSR      HEXTOASCII
0000248A  224A                    2272         MOVE.L   A2,A1
0000248C  95CB                    2273         SUB.L    A3,A2
0000248E  240A                    2274         MOVE.L   A2,D2
00002490  B4BC FFFFFFF8           2275         CMP.L    #-8,D2
00002496  6700 0006               2276         BEQ      SSDONTWORRY
0000249A                          2277  SSACCOUNTFORZEROS:
0000249A  5082                    2278          ADDI.L  #8,D2
0000249C  93C2                    2279          SUB.L   D2,A1
0000249E                          2280  SSDONTWORRY:
0000249E  7000                    2281         MOVE.L   #0,D0
000024A0  7208                    2282         MOVE.L   #8,D1
000024A2  4E4F                    2283         TRAP     #15
000024A4                          2284         
000024A4                          2285      *----------PC-----------*
000024A4  43F8 3852               2286         LEA      RPC,A1
000024A8  7204                    2287         MOVE.L   #4,D1
000024AA  7001                    2288         MOVE.L   #1,D0
000024AC  4E4F                    2289         TRAP     #15
000024AE  261F                    2290         MOVE.L   (SP)+,D3    
000024B0  4EB9 000026EC           2291         JSR      HEXTOASCII
000024B6  224A                    2292         MOVE.L   A2,A1
000024B8  95CB                    2293         SUB.L    A3,A2
000024BA  240A                    2294         MOVE.L   A2,D2
000024BC  B4BC FFFFFFF8           2295         CMP.L    #-8,D2
000024C2  6700 0006               2296         BEQ      PCDONTWORRY
000024C6                          2297  PCACCOUNTFORZEROS:
000024C6  5082                    2298          ADDI.L  #8,D2
000024C8  93C2                    2299          SUB.L   D2,A1
000024CA                          2300  PCDONTWORRY:
000024CA  7000                    2301         MOVE.L   #0,D0
000024CC  7208                    2302         MOVE.L   #8,D1
000024CE  4E4F                    2303         TRAP     #15       
000024D0                          2304         
000024D0                          2305     *---DF HACK RESTORE---*
000024D0  3F07                    2306     MOVE.W   D7,-(SP)
000024D2  DFFC FFFFFFB8           2307     ADD.L    #-72,SP
000024D8  4CDF 7FFF               2308     MOVEM.L  (SP)+,D0-D7/A0-A6
000024DC  DFFC 0000000C           2309     ADD.L    #12,SP  ;go back to original value
000024E2  46DF                    2310     MOVE.W   (SP)+,SR
000024E4                          2311          
000024E4  6000 EB8A               2312         BRA SHELL
000024E8                          2313  
000024E8                          2314  *--------------------------------------------------------------------------------------*
000024E8                          2315  
000024E8                          2316  
000024E8                          2317  ************************************EXCEPTIONS!*****************************************
000024E8                          2318  *--------------------------------------------------------------------------------------*
000024E8                          2319  
000024E8                          2320  BERR:
000024E8  48E7 C070               2321          MOVEM.L A1-A3/D0-D1,-(SP)
000024EC  43F8 385A               2322          LEA     BERR_TEXT,A1
000024F0  700D                    2323          MOVE.L  #13,D0
000024F2  4E4F                    2324          TRAP    #15
000024F4  43F8 394B               2325          LEA     SSW,A1
000024F8  700E                    2326          MOVE.L  #14,D0
000024FA  4E4F                    2327          TRAP    #15
000024FC  362F 0014               2328          MOVE.W  (20,SP),D3
00002500  4EB9 000026EC           2329          JSR     HEXTOASCII
00002506  598B                    2330          SUB.L   #4,A3
00002508  224B                    2331          MOVEA.L A3,A1
0000250A  7204                    2332          MOVE.L  #4,D1
0000250C  7000                    2333          MOVE.L  #0,D0
0000250E  4E4F                    2334          TRAP    #15
00002510  43F8 3951               2335          LEA     BA,A1
00002514  700E                    2336          MOVE.L  #14,D0
00002516  4E4F                    2337          TRAP    #15
00002518  262F 0016               2338          MOVE.L  (22,SP),D3
0000251C  4EB9 000026EC           2339          JSR     HEXTOASCII
00002522  518B                    2340          SUB.L   #8,A3
00002524  224B                    2341          MOVEA.L A3,A1
00002526  7208                    2342          MOVE.L  #8,D1
00002528  7000                    2343          MOVE.L  #0,D0
0000252A  4E4F                    2344          TRAP    #15
0000252C  43F8 3956               2345          LEA     IR,A1
00002530  700E                    2346          MOVE.L  #14,D0
00002532  4E4F                    2347          TRAP    #15
00002534  362F 001A               2348          MOVE.W  (26,SP),D3
00002538  4EB9 000026EC           2349          JSR     HEXTOASCII
0000253E  598B                    2350          SUB.L   #4,A3
00002540  224B                    2351          MOVEA.L A3,A1
00002542  7204                    2352          MOVE.L  #4,D1
00002544  7000                    2353          MOVE.L  #0,D0
00002546  4E4F                    2354          TRAP    #15
00002548  4CDF 0E03               2355          MOVEM.L (SP)+,A1-A3/D0-D1
0000254C  2E7C 01000000           2356          MOVE.L  #$01000000,SP   ;reset stack
00002552  6000 EB1C               2357          BRA     SHELL
00002556                          2358  
00002556                          2359  AERR:
00002556  48E7 C070               2360          MOVEM.L A1-A3/D0-D1,-(SP)
0000255A  43F8 3872               2361          LEA     AERR_TEXT,A1
0000255E  700D                    2362          MOVE.L  #13,D0
00002560  4E4F                    2363          TRAP    #15
00002562  43F8 394B               2364          LEA     SSW,A1
00002566  700E                    2365          MOVE.L  #14,D0
00002568  4E4F                    2366          TRAP    #15
0000256A  362F 0014               2367          MOVE.W  (20,SP),D3
0000256E  4EB9 000026EC           2368          JSR     HEXTOASCII
00002574  598B                    2369          SUB.L   #4,A3
00002576  224B                    2370          MOVEA.L A3,A1
00002578  7204                    2371          MOVE.L  #4,D1
0000257A  7000                    2372          MOVE.L  #0,D0
0000257C  4E4F                    2373          TRAP    #15
0000257E  43F8 3951               2374          LEA     BA,A1
00002582  700E                    2375          MOVE.L  #14,D0
00002584  4E4F                    2376          TRAP    #15
00002586  262F 0016               2377          MOVE.L  (22,SP),D3
0000258A  4EB9 000026EC           2378          JSR     HEXTOASCII
00002590  518B                    2379          SUB.L   #8,A3
00002592  224B                    2380          MOVEA.L A3,A1
00002594  7208                    2381          MOVE.L  #8,D1
00002596  7000                    2382          MOVE.L  #0,D0
00002598  4E4F                    2383          TRAP    #15
0000259A  43F8 3956               2384          LEA     IR,A1
0000259E  700E                    2385          MOVE.L  #14,D0
000025A0  4E4F                    2386          TRAP    #15
000025A2  362F 001A               2387          MOVE.W  (26,SP),D3
000025A6  4EB9 000026EC           2388          JSR     HEXTOASCII
000025AC  598B                    2389          SUB.L   #4,A3
000025AE  224B                    2390          MOVEA.L A3,A1
000025B0  7204                    2391          MOVE.L  #4,D1
000025B2  7000                    2392          MOVE.L  #0,D0
000025B4  4E4F                    2393          TRAP    #15
000025B6  4CDF 0E03               2394          MOVEM.L (SP)+,A1-A3/D0-D1
000025BA  2E7C 01000000           2395          MOVE.L  #$01000000,SP   ;reset stack
000025C0  6000 EAAE               2396          BRA     SHELL
000025C4                          2397  
000025C4                          2398  IERR:
000025C4  48E7 8040               2399      MOVEM.L A1/D0,-(SP)
000025C8  43F8 388F               2400      LEA IERR_TEXT,A1
000025CC  700D                    2401      MOVE.L #13,D0
000025CE  4E4F                    2402      TRAP #15
000025D0  4CDF 0201               2403      MOVEM.L (SP)+,A1/D0
000025D4  2E7C 01000000           2404      MOVE.L #$01000000,SP
000025DA  6000 EA94               2405      BRA SHELL
000025DE                          2406  
000025DE                          2407  PERR:
000025DE  48E7 8040               2408      MOVEM.L A1/D0,-(SP)
000025E2  43F8 38B8               2409      LEA PERR_TEXT,A1
000025E6  700D                    2410      MOVE.L #13,D0
000025E8  4E4F                    2411      TRAP #15
000025EA  4CDF 0201               2412      MOVEM.L (SP)+,A1/D0
000025EE  2E7C 01000000           2413      MOVE.L #$01000000,SP
000025F4  6000 EA7A               2414      BRA SHELL
000025F8                          2415      
000025F8                          2416  ZERR:
000025F8  48E7 8040               2417      MOVEM.L A1/D0,-(SP)
000025FC  43F8 38D6               2418      LEA ZERR_TEXT,A1
00002600  700D                    2419      MOVE.L #13,D0
00002602  4E4F                    2420      TRAP #15
00002604  4CDF 0201               2421      MOVEM.L (SP)+,A1/D0
00002608  2E7C 01000000           2422      MOVE.L #$01000000,SP
0000260E  6000 EA60               2423      BRA SHELL
00002612                          2424  
00002612                          2425  ALERR:
00002612  48E7 8040               2426      MOVEM.L A1/D0,-(SP)
00002616  43F8 38F9               2427      LEA ALERR_TEXT,A1
0000261A  700D                    2428      MOVE.L #13,D0
0000261C  4E4F                    2429      TRAP #15
0000261E  4CDF 0201               2430      MOVEM.L (SP)+,A1/D0
00002622  2E7C 01000000           2431      MOVE.L #$01000000,SP
00002628  6000 EA46               2432      BRA SHELL
0000262C                          2433      
0000262C                          2434  FLERR:
0000262C  48E7 8040               2435      MOVEM.L A1/D0,-(SP)
00002630  43F8 3915               2436      LEA FLERR_TEXT,A1
00002634  700D                    2437      MOVE.L #13,D0
00002636  4E4F                    2438      TRAP #15
00002638  4CDF 0201               2439      MOVEM.L (SP)+,A1/D0
0000263C  2E7C 01000000           2440      MOVE.L #$01000000,SP
00002642  6000 EA2C               2441      BRA SHELL
00002646                          2442      
00002646                          2443  CHKERR:
00002646  48E7 8040               2444      MOVEM.L A1/D0,-(SP)
0000264A  43F8 3931               2445      LEA CHKERR_TEXT,A1
0000264E  700D                    2446      MOVE.L #13,D0
00002650  4E4F                    2447      TRAP #15
00002652  4CDF 0201               2448      MOVEM.L (SP)+,A1/D0
00002656  2E7C 01000000           2449      MOVE.L #$01000000,SP
0000265C  6000 EA12               2450      BRA SHELL
00002660                          2451  
00002660                          2452  
00002660                          2453  
00002660                          2454  ****************************COMMON SUBROUTINES NEEDED**********************************
00002660                          2455  
00002660                          2456  
00002660                          2457  *--------------------------------------------------------------------------------------*
00002660  43F8 3755               2458  ERRORSR:        LEA   ERROR,A1    ;load message
00002664  323C 002C               2459                  MOVE.W  #44,D1
00002668  7000                    2460                  MOVE.L  #0,D0
0000266A  4E4F                    2461                  TRAP    #15
0000266C  6000 EA88               2462                  BRA     RESTORE
00002670                          2463  *--------------------------------------------------------------------------------------*
00002670                          2464  ASCII_TO_BCD:   *Number passed via D3 byte size only(to be expected)*
00002670  B67C 0046               2465                  CMP #$46,D3
00002674  6EEA                    2466                  BGT ERRORSR
00002676  B67C 0040               2467                  CMP #$40,D3
0000267A  6E00 000A               2468                  BGT UPPER
0000267E  0483 00000030           2469                  SUBI.L  #$30,D3
00002684  4E75                    2470                  RTS
00002686  0483 00000031           2471  UPPER:          SUBI.L  #$31,D3 ;If ASCII number is A-F
0000268C  4E75                    2472                  RTS
0000268E                          2473  *--------------------------------------------------------------------------------------*
0000268E                          2474  
0000268E                          2475  BCD_TO_HEX:     *Number passed via D3 accepts BYTE ONLY*
0000268E  2803                    2476                  MOVE.L  D3,D4   
00002690  2A03                    2477                  MOVE.L  D3,D5
00002692  0284 000000F0           2478                  ANDI.L  #240,D4 ;upper byte
00002698  0285 0000000F           2479                  ANDI.L  #15,D5  ;lower byte
0000269E  E89C                    2480                  ROR.L   #4,D4   ;get bits into correct place
000026A0  C8FC 000A               2481                  MULU    #10,D4  ;multiply by its tens place
000026A4  4283                    2482                  CLR.L   D3
000026A6  D684                    2483                  ADD.L   D4,D3
000026A8  D685                    2484                  ADD.L   D5,D3
000026AA  4E75                    2485                  RTS
000026AC                          2486  *--------------------------------------------------------------------------------------*                
000026AC                          2487  ASCII_ADDRESS:   *Address to be converted from ascii to hex passed through A2 and A3*
000026AC                          2488                   *Returned in D5                                                    *
000026AC  4283                    2489                  CLR.L   D3
000026AE  4285                    2490                  CLR.L   D5
000026B0  220A                    2491                  MOVE.L   A2,D1
000026B2  200B                    2492                  MOVE.L   A3,D0
000026B4  9081                    2493                  SUB.L   D1,D0   ;store the difference in D0
000026B6  7800                    2494                  MOVE.L  #0,D4   ;set up 10's place counter
000026B8  5380                    2495                  SUBI.L  #1,D0
000026BA  B07C 0000               2496  PLACECOUNTER:   CMP     #0,D0
000026BE  6700 0008               2497                  BEQ     CONVERTADDRESS
000026C2  5884                    2498                  ADDI.L  #4,D4
000026C4  5380                    2499                  SUBI.L  #1,D0
000026C6  60F2                    2500                  BRA     PLACECOUNTER
000026C8  B6CA                    2501  CONVERTADDRESS  CMP     A2,A3
000026CA  6700 001E               2502                  BEQ     ADDRESSDONE
000026CE  4283                    2503                  CLR.L   D3
000026D0  161A                    2504                  MOVE.B  (A2)+,D3
000026D2  48E7 EC30               2505                  MOVEM.L A2-A3/D0-D2/D4-D5,-(SP)   ;so regs dont get destroyed
000026D6  4EB8 2670               2506                  JSR     ASCII_TO_BCD
000026DA  4EB8 268E               2507                  JSR     BCD_TO_HEX
000026DE  4CDF 0C37               2508                  MOVEM.L (SP)+,A2-A3/D0-D2/D4-D5
000026E2  E9BB                    2509                  ROL.L     D4,D3
000026E4  5984                    2510                  SUBI.L  #4,D4
000026E6  DA83                    2511                  ADD.L     D3,D5   ;get total
000026E8  60DE                    2512                  BRA     CONVERTADDRESS
000026EA  4E75                    2513  ADDRESSDONE     RTS
000026EC                          2514  
000026EC                          2515  *--------------------------------------------------------------------------------------*
000026EC                          2516  HEXTOASCII: *Result returned in address buffer from A2 to A3, HEX number passed*
000026EC                          2517              *through D3*
000026EC  4284                    2518              CLR.L   D4
000026EE  4285                    2519              CLR.L   D5
000026F0  247C 00003A00           2520              MOVE.L  #$3A00,A2
000026F6  267C 00003A32           2521              MOVE.L  #$3A32,A3
000026FC                          2522  KEEP_CONVERTING:
000026FC  1803                    2523              MOVE.B  D3,D4  
000026FE  1A03                    2524              MOVE.B  D3,D5 
00002700  E08B                    2525              LSR.L   #8,D3   ;prepare for next byte
00002702  0284 0000000F           2526              ANDI.L  #15,D4   ;get lower byte
00002708  0285 000000F0           2527              ANDI.L  #240,D5 ;get upper byte'
0000270E  E85D                    2528              ROR     #4,D5   ;move D5 into position
00002710  B83C 0009               2529              CMP.B     #$9,D4
00002714  6E00 000C               2530              BGT     A_TO_F
00002718  0684 00000030           2531              ADDI.L  #$30,D4
0000271E  6000 0008               2532              BRA     NEXTHEX
00002722  0684 00000037           2533  A_TO_F:     ADDI.L  #$37,D4
00002728  BA3C 0009               2534  NEXTHEX:    CMP.B     #$9,D5
0000272C  6E00 000C               2535              BGT     A_TO_F2
00002730  0685 00000030           2536              ADDI.L  #$30,D5
00002736  6000 0008               2537              BRA     PUTBUFFER
0000273A  0685 00000037           2538  A_TO_F2:    ADDI.L  #$37,D5
00002740  1704                    2539  PUTBUFFER:  MOVE.B  D4,-(A3)
00002742  1705                    2540              MOVE.B  D5,-(A3)
00002744  B6CA                    2541              CMP      A2,A3
00002746  66B4                    2542              BNE      KEEP_CONVERTING
00002748  0C12 0030               2543  RID_ZEROS:  CMP.B   #$30,(A2)
0000274C  6700 0006               2544              BEQ     ADD
00002750  6000 0006               2545              BRA     HEXASCIIDONE
00002754  528A                    2546  ADD:        ADD.L   #1,A2   ;increment to find start of string
00002756  60F0                    2547              BRA     RID_ZEROS
00002758                          2548  HEXASCIIDONE:   
00002758  267C 00003A32           2549              MOVE.L  #$3A32,A3    ;end of original number
0000275E  B7CA                    2550              CMP.L   A2,A3
00002760  6700 0006               2551              BEQ     ZEROS
00002764  6000 0004               2552              BRA     NOTZEROS
00002768  518A                    2553  ZEROS       SUB.L   #8,A2               
0000276A  4E75                    2554  NOTZEROS    RTS
0000276C                          2555  *--------------------------------------------------------------------------------------*
0000276C                          2556  
0000276C                          2557  
0000276C                          2558  NEXT:   ;for debugging single commands
0000276C                          2559              
0000276C                          2560              
0000276C                          2561              
0000276C                          2562              
0000276C                          2563  
0000276C                          2564  
0000276C                          2565         END    START        

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A0ACCOUNTFORZEROS   2306
A0DONTWORRY         230A
A1ACCOUNTFORZEROS   2332
A1DONTWORRY         2336
A2ACCOUNTFORZEROS   235E
A2DONTWORRY         2362
A3ACCOUNTFORZEROS   238A
A3DONTWORRY         238E
A4ACCOUNTFORZEROS   23B6
A4DONTWORRY         23BA
A5ACCOUNTFORZEROS   23E2
A5DONTWORRY         23E6
A6ACCOUNTFORZEROS   240E
A6DONTWORRY         2412
ACMP                1BB2
ADD                 2754
ADDRESSDONE         26EA
AERR                2556
AERR_TEXT           3872
AFADDCONV           1B8C
AGETFIRSTADDRESS    1B7A
AGETSECADDRESS      1B9A
ALERR               2612
ALERR_TEXT          38F9
ARESETLOOP          1BB0
ASADDCONV           1BA4
ASCEND              1B6A
ASCII_ADDRESS       26AC
ASCII_TO_BCD        2670
ASWAP               1BC0
A_TO_F              2722
A_TO_F2             273A
BA                  3951
BCD_TO_HEX          268E
BERR                24E8
BERR_TEXT           385A
BF                  1EA6
BFGETENDADDRONE     1EC4
BFGETENDDATA        1EAA
BFGETLASTEND        1EEA
BFNEXTADDR          1EB4
BFNEXTADDRTWO       1ECE
BFTEST              11C0
BLCKTEST            1134
BMOV                1F1C
BMOVDONE            1FA6
BMOVTEST            119E
BSCH                2080
BSCH1               37E2
BSCH2               37E8
BSCH3               37FA
BSCHENDDATA         2084
BSCHFADDEND         20A4
BSCHFIRSTADD        208E
BSCHSECONDADD       20AE
BSCHSECONDFIND      20BC
BSCHTEST            115A
BTST                1FAA
BTST1               3785
BTST2               3799
BTST3               37AA
BTST4               37BC
BTST5               37C7
BTSTDATALOOP        1FF8
BTSTGETENDADDRONE   1FC8
BTSTGETENDDATA      1FAE
BTSTGETLASTEND      1FE2
BTSTNEXTADDR        1FB8
BTSTNEXTADDRTWO     1FD2
BTSTTEST            117C
BUFFER              3000
BYTEBSCH            20EE
CHKERR              2646
CHKERR_TEXT         3931
COMPLETE            2072
COMPUTATION         1AFE
COMPUTEFIRSTADD     1F2C
COMPUTEFOURTHADDRESS  1F74
COMPUTESECONDADDRESS  1F44
COMPUTETHIRDADDRESS  1F5C
CONVERT             1AE2
CONVERTADDRESS      26C8
CONVERTMINUS1       1AE0
D0ACCOUNTFORZEROS   21A6
D0DONTWORRY         21AA
D1ACCOUNTFORZEROS   21D2
D1DONTWORRY         21D6
D2ACCOUNTFORZEROS   21FE
D2DONTWORRY         2202
D3ACCOUNTFORZEROS   222A
D3DONTWORRY         222E
D4ACCOUNTFORZEROS   2256
D4DONTWORRY         225A
D5ACCOUNTFORZEROS   2282
D5DONTWORRY         2286
D6ACCOUNTFORZEROS   22AE
D6DONTWORRY         22B2
D7ACCOUNTFORZEROS   22DA
D7DONTWORRY         22DE
DATALOOP            1F0E
DATATRANSFER        1F9C
DCMP                1C10
DEBUG               3782
DEFAULT             1C60
DESCEND             1BC8
DF                  2184
DFADDCONV           1BEA
DFTST               11CE
DGETFIRSTADDRESS    1BD8
DGETSECADDRESS      1BF8
DISPLOOP            1A5C
DONEASCEND          1C26
DONEDESCEND         1C26
DRESETLOOP          1C0E
DSADDCONV           1C02
DSWAP               1C1E
ECHO                130A
ECHOTEST            110E
EEND                130C
EFOUND              1316
ENDBF               1F18
ENDBSCH             2162
ENDCONVERT          1B10
ENDLP               1EA2
ENDPARSE            1CF2
ENDPARSEL           1E9A
ENDPARSEW           1DB4
ENDPTRMM            1C30
ENTER               1CF4
ENTERL              1E9C
ENTERW              1DB6
ERROR               3755
ERRORSR             2660
EXECUTE             2174
FAIL                2010
FINDEND             19C8
FINDEND1            1A1E
FINDEND2            1A2E
FINDLASTNUM         1AD6
FINDNEXT            1A28
FIRSTADDRESS        1F22
FLERR               262C
FLERR_TEXT          3915
FONT                1090000
FOUNDB              2118
FOUNDL              2128
FOUNDW              2120
FOURTHADDRESS       1F6A
GGETEND             216A
GO                  2166
GOBACK              1772
GOTST               121C
GREEN               FF00
HELP                1778
HELPORHXDC          1234
HELPTST             124A
HEXASCIIDONE        2758
HEXTOASCII          26EC
HIGHHEX             1AFA
HIGHHEXMM           1CE2
HIGHHEXMML          1E88
HIGHHEXMMW          1DA2
HTXT                3063
HTXT1               3074
HTXT10              35E5
HTXT11              3622
HTXT12              365A
HTXT13              369C
HTXT14              36CF
HTXT15              3716
HTXT1A              30BF
HTXT1B              30FC
HTXT2               3110
HTXT3               315B
HTXT3A              31A0
HTXT3B              31D9
HTXT3C              31ED
HTXT3D              3202
HTXT3E              321F
HTXT4               3252
HTXT4A              3299
HTXT4B              32DE
HTXT4C              32F9
HTXT4D              3317
HTXT4E              3336
HTXT5               335A
HTXT5A              33A0
HTXT6               33A9
HTXT6A              33EF
HTXT6B              3437
HTXT7               345D
HTXT7A              34A1
HTXT7B              34E9
HTXT8               3501
HTXT8A              3548
HTXT9               3570
HTXT9A              35B8
HXDC                1AB6
HXDCTEST            12C8
IERR                25C4
IERR_TEXT           388F
IR                  3956
KEEP_CONVERTING     26FC
LONG                1DBC
LONGBSCH            210A
MDSPCTEST           1298
MEMCONT             19D2
MEMDISP             1A14
MEMNEXT             1A38
MEMSET              19C0
MEMTEST             126C
MM                  1C2A
MMSPCTEST           12BA
MODIFYLOOP          1C74
MODIFYLOOPL         1DD0
MODIFYLOOPW         1D0E
MODIFYREGS          1324
MODIFYREGTEST       12F4
MRA                 136A
MRA0                15A8
MRA1                15E8
MRA2                1628
MRA3                1668
MRA4                16A8
MRA5                16E8
MRA6                1728
MRD                 1324
MRD0                13A8
MRD1                13E8
MRD2                1428
MRD3                1468
MRD4                14A8
MRD5                14E8
MRD6                1528
MRD7                1568
MRDFINDDATA         1768
MSSPCTEST           128A
NEXT                276C
NEXTHEX             2728
NEXTMMSTEP          1CE6
NEXTMMSTEPL         1E8C
NEXTMMSTEPW         1DA6
NOTZEROS            276A
OUTPUTBUFF          3050
OUTPUTNUM           1B2E
PARSELOOP           1CCA
PARSELOOPL          1E70
PARSELOOPW          1D8A
PCACCOUNTFORZEROS   24C6
PCDONTWORRY         24CA
PERR                25DE
PERR_TEXT           38B8
PLACECOUNTER        26BA
PROMPT              3058
PUTBUFFER           2740
RA0                 382B
RA1                 382F
RA2                 3833
RA3                 3837
RA4                 383B
RA5                 383F
RA6                 3843
RD0                 380B
RD1                 380F
RD2                 3813
RD3                 3817
RD4                 381B
RD5                 381F
RD6                 3823
RD7                 3827
READ                2002
RESTORE             10F6
RID_ZEROS           2748
RPC                 3852
RSR                 3856
RSS                 3847
RUS                 384E
SECONDADDRESS       1F3A
SECONDLOOP          1A94
SHELL               1070
SIZECHECK           1C2E
SORTTEST            11E6
SORTW               1B44
SPACE               3781
SRACCOUNTFORZEROS   246E
SRDONTWORRY         2472
SSACCOUNTFORZEROS   249A
SSDONTWORRY         249E
SSW                 394B
START               1000
STOREDATA           1EF4
STOREDATABTST       1FEC
SUCCESSTEXT         212C
TESTOP              20C6
THIRDADDRESS        1F52
UPPER               2686
USPACCOUNTFORZEROS  2440
USPDONTWORRY        2444
WORD                1CFA
WORDBSCH            20FC
X                   1C26
ZEROS               2768
ZERR                25F8
ZERR_TEXT           38D6

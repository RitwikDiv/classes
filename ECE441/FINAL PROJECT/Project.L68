00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 4/25/2015 2:54:39 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Monitor Project
00000000                             3  * Written by :  Adam Sumner 
00000000                             4  * Date       :  4/28/2015
00000000                             5  * Description:  Monitor Final Project
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  
00000000                             9  *---------------DISCLAIMER!-------------------------*
00000000                            10  *Subroutines are not as optimized as they should be!*
00000000                            11  *Things such as checking for spaces, getting addresses, etc. *
00000000                            12  *can easily be their own subroutines to save code space!*
00000000                            13  *Luckily code size is not a huge concern*
00000000                            14  *This is why there are no plans to optimize in the future*
00000000                            15  
00000000                            16  
00000000                            17  
00003000                            18      ORG    $3000
00003000                            19      
00003000                            20  BUFFER        DS.B      80              ;space for command storage 
00003050                            21  OUTPUTBUFF    DS.B      8               ;to output numbers easily
00003058= 4D 4F 4E 49 54 4F ...     22  PROMPT        DC.B      'MONITOR441>'   ;prompt definition
00003063                            23  
00003063                            24  *Help text*
00003063= 4C 69 73 74 20 6F ...     25  HTXT          DC.B      'List of Commands:'
00003074= 4D 44 53 50 20 3C ...     26  HTXT1         DC.B      'MDSP <address1> <address2> - Memory Display: Outputs the address and memory' 
000030BF= 63 6F 6E 74 65 6E ...     27  HTXT1A        DC.B      'contents from <address1> to <address2> amd from <address1> to' 
000030FC= 3C 61 64 64 72 65 ...     28  HTXT1B        DC.B      '<address2 + 16bytes>'
00003110= 48 58 44 45 43 20 ...     29  HTXT2         DC.B      'HXDEC <num> - Conversion: Converts a hexadecimal number to a decimal number'
0000315B= 53 4F 52 54 57 20 ...     30  HTXT3         DC.B      'SORTW <option> <address1> <address2> - Sort: Sorts a block of memory.'
000031A0= 3C 6F 70 74 69 6F ...     31  HTXT3A        DC.B      '<option> specifies the order in which the list is sorted:'
000031D9= 3B 41 20 2D 20 41 ...     32  HTXT3B        DC.B      ';A - Ascending Order'
000031ED= 3B 44 20 2D 20 44 ...     33  HTXT3C        DC.B      ';D - Descending Order'
00003202= 2D 28 64 65 66 61 ...     34  HTXT3D        DC.B      '-(default) - Descending Order'
0000321F= 53 6F 72 74 73 20 ...     35  HTXT3E        DC.B      'Sorts block of memory from <address1> to <address2>'
00003252= 4D 4D 20 3C 6F 70 ...     36  HTXT4         DC.B      'MM <option> <address> - Memory Modify: Display memory and, as required,'
00003299= 6D 6F 64 69 66 79 ...     37  HTXT4A        DC.B      'modify data or enter new data. <option> specifies the number of bytes'
000032DE= 64 69 73 70 6C 61 ...     38  HTXT4B        DC.B      'displayed for each address:'
000032F9= 2D 28 64 65 66 61 ...     39  HTXT4C        DC.B      '-(default) - Displays one byte'
00003317= 3B 57 20 2D 20 44 ...     40  HTXT4D        DC.B      ';W - Displays one word(2 bytes)'
00003336= 3B 4C 20 2D 20 44 ...     41  HTXT4E        DC.B      ';L - Displays one long word(4 bytes)'
0000335A= 4D 53 20 3C 64 61 ...     42  HTXT5         DC.B      'MS <data> <address> - Memory Set: Alters memory by setting <data> into' 
000033A0= 3C 61 64 64 72 65 ...     43  HTXT5A        DC.B      '<address>'
000033A9= 42 46 20 3C 64 61 ...     44  HTXT6         DC.B      'BF <data> <address1> <address2> - Block Fill: Fills memory starting at' 
000033EF= 3C 61 64 64 72 65 ...     45  HTXT6A        DC.B      '<address1> to <address2>. Both must be even addresses. This command only'
00003437= 77 6F 72 6B 73 20 ...     46  HTXT6B        DC.B      'works with a word-sized <data> pattern'
0000345D= 42 4D 4F 56 20 3C ...     47  HTXT7         DC.B      'BMOV <address1> <address2> <address3> <address4> - Block Move: Moves' 
000034A1= 61 20 64 75 70 6C ...     48  HTXT7A        DC.B      'a duplicate block of memory from <address1> to <address2> into the block'
000034E9= 3C 61 64 64 72 65 ...     49  HTXT7B        DC.B      '<address3> to <address4>'
00003501= 42 54 53 54 20 3C ...     50  HTXT8         DC.B      'BTST <data> <address1> <address2> - Block Test: Tests a block of memory'
00003548= 66 72 6F 6D 20 3C ...     51  HTXT8A        DC.B      'from <address1> to <address2> for <data>'
00003570= 42 53 43 48 20 3C ...     52  HTXT9         DC.B      'BSCH <data> <address1> <address2> - Block Search: Searches for <data> in'
000035B8= 69 6E 20 6D 65 6D ...     53  HTXT9A        DC.B      'in memory block from <address1> to <address2>'
000035E5= 47 4F 20 3C 61 64 ...     54  HTXT10        DC.B      'GO <address> - Execute Program: Executes program at <address>'
00003622= 44 46 20 2D 20 44 ...     55  HTXT11        DC.B      'DF - Display Formatted Registers: Displays all registers'
0000365A= 48 45 4C 50 20 2D ...     56  HTXT12        DC.B      'HELP - Help: Displays all available commands and their description'
0000369C                            57  
0000369C                            58  *Error Message*
0000369C= 45 52 52 4F 52 3A ...     59  ERROR         DC.B      'ERROR: TRY COMMAND AGAIN WITH CORRECT SYNTAX'
000036C8                            60  
000036C8                            61  *Space*
000036C8= 20                        62  SPACE         DC.B      ' '
000036C9                            63  
000036C9                            64  *Debugger Print Statement*
000036C9= 57 49 4E                  65  DEBUG         DC.B      'WIN'      
000036CC                            66  
000036CC                            67  *BTST Text*
000036CC= 4E 75 6D 62 65 72 ...     68  BTST1         DC.B      'Number written was: '
000036E0= 4E 75 6D 62 65 72 ...     69  BTST2         DC.B      'Number read was: '
000036F1= 42 6C 6F 63 6B 20 ...     70  BTST3         DC.B      'Block Test PASSES!'
00003703= 46 41 49 4C 55 52 ...     71  BTST4         DC.B      'FAILURE!!!!'  
0000370E= 45 72 72 6F 72 20 ...     72  BTST5         DC.B      'Error Occurred at address: '      
00003729                            73  
00003729                            74  *BSCH Text*
00003729= 44 61 74 61 3A 20         75  BSCH1         DC.B      'Data: '
0000372F= 46 6F 75 6E 64 20 ...     76  BSCH2         DC.B      'Found at address: '
00003741= 50 61 74 74 65 72 ...     77  BSCH3         DC.B      'Pattern not found'
00003752                            78  
00003752                            79  *DF Text*
00003752= 44 30 3A 20               80  RD0            DC.B      'D0: '
00003756= 44 31 3A 20               81  RD1            DC.B      'D1: '
0000375A= 44 32 3A 20               82  RD2            DC.B      'D2: '
0000375E= 44 33 3A 20               83  RD3            DC.B      'D3: '
00003762= 44 34 3A 20               84  RD4            DC.B      'D4: '
00003766= 44 35 3A 20               85  RD5            DC.B      'D5: '
0000376A= 44 36 3A 20               86  RD6            DC.B      'D6: '
0000376E= 44 37 3A 20               87  RD7            DC.B      'D7: '
00003772                            88  
00003772= 41 30 3A 20               89  RA0            DC.B      'A0: '
00003776= 41 31 3A 20               90  RA1            DC.B      'A1: '
0000377A= 41 32 3A 20               91  RA2            DC.B      'A2: '
0000377E= 41 33 3A 20               92  RA3            DC.B      'A3: '
00003782= 41 34 3A 20               93  RA4            DC.B      'A4: '
00003786= 41 35 3A 20               94  RA5            DC.B      'A5: '
0000378A= 41 36 3A 20               95  RA6            DC.B      'A6: '
0000378E                            96  
0000378E= 53 53 2F 41 37 3A 20      97  RSS            DC.B      'SS/A7: '
00003795= 55 53 3A 20               98  RUS            DC.B      'US: '
00003799= 50 43 3A 20               99  RPC            DC.B      'PC: '
0000379D= 53 52 3A 20              100  RSR            DC.B      'SR: '
000037A1                           101  
000037A1                           102  *Color definition for Font*
000037A1  =01090000                103  FONT        EQU     $01090000  
000037A1  =0000FF00                104  GREEN       EQU     $0000FF00
000037A1                           105  
00001000                           106      ORG     $1000
00001000                           107  START:  
00001000                           108          *Makes it look like a REAL terminal*
00001000  223C 0000FF00            109          MOVE.L  #GREEN,D1
00001006  243C 01090000            110          MOVE.L  #FONT,D2
0000100C  103C 0015                111          MOVE.B  #21,D0
00001010  4E4F                     112          TRAP    #15
00001012  4281                     113          CLR.L   D1
00001014  4282                     114          CLR.L   D2
00001016  4200                     115          CLR.B   D0
00001018                           116  
00001018                           117  *--------------------------------------------------------------------------------------*
00001018  4878 1018                118  SHELL:      PEA     *           ;save PC on Stack for DF
0000101C  588F                     119              ADD.L   #4,SP       ;get original value of stack pointer
0000101E  2F4F FFF8                120              MOVE.L  SP,-8(SP)   ;save it
00001022  DFFC FFFFFFF8            121              ADD.L   #-8,SP      ;update Stack position
00001028  40E7                     122              MOVE    SR,-(SP)    ;save Status register for use with DF
0000102A  2F0E                     123              MOVE.L  A6,-(SP)    ;temp save
0000102C  4E6E                     124              MOVE    USP,A6      ;for use with DF command
0000102E  2F0E                     125              MOVE.L  A6,-(SP)    ;store USP to STACK
00001030  588F                     126              ADD.L   #4,SP       
00001032  2C57                     127              MOVE.L  (SP),A6    ;restore original value
00001034  2F67 0004                128              MOVE.L  -(SP),4(SP)  ;move correct value to correct stack position
00001038  588F                     129              ADD.L   #4,SP       ;point stack to CORRECT PLACE
0000103A                           130              
0000103A                           131  
0000103A  48E7 FFFE                132              MOVEM.L D0-D7/A0-A6,-(SP)  ;save initial values of registers
0000103E  48E7 FFFE                133              MOVEM.L D0-D7/A0-A6,-(SP)  ;unorthodox implementation to save registers when using DF command
00001042                           134               
00001042                           135                
00001042  43F8 3058                136              LEA  PROMPT,A1      ;Load message            
00001046  323C 000B                137              MOVE.W  #11,D1      ;load n bytes
0000104A  103C 0001                138              MOVE.B  #1,D0       ;set up trap call
0000104E  4E4F                     139              TRAP    #15
00001050  43F8 3000                140              LEA     BUFFER,A1   ;set up storage for command
00001054  103C 0002                141              MOVE.B  #2,D0       ;load input trap call
00001058  4E4F                     142              TRAP    #15
0000105A  0C11 0048                143              CMP.B   #$48,(A1)   ;check for help/hxdc
0000105E  6700 017C                144              BEQ     HELPORHXDC
00001062  0C11 004D                145              CMP.B   #$4D,(A1)   ;check for memory command
00001066  6700 01AC                146              BEQ     MEMTEST
0000106A  0C11 0047                147              CMP.B   #$47,(A1)   ;check for go
0000106E  6700 0154                148              BEQ     GOTST
00001072  0C11 0044                149              CMP.B   #$44,(A1)   ;check for df
00001076  6700 00FE                150              BEQ     DFTST
0000107A  0C11 0042                151              CMP.B   #$42,(A1)   ;check for blck command
0000107E  6700 005C                152              BEQ     BLCKTEST
00001082  0C11 0053                153              CMP.B   #$53,(A1)   ;check for sort command
00001086  6700 0106                154              BEQ     SORTTEST
0000108A  0C11 0045                155              CMP.B   #$45,(A1)   ;check for echo command
0000108E  6700 0026                156              BEQ     ECHOTEST
00001092  0C11 002E                157              CMP.B   #$2E,(A1)   ;check for modify register command
00001096  6700 01FA                158              BEQ     MODIFYREGTEST
0000109A  6000 13B4                159              BRA     ERRORSR
0000109E  4CDF 7FFF                160  RESTORE:    MOVEM.L (SP)+,D0-D7/A0-A6
000010A2  4CDF 7FFF                161              MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
000010A6  588F                     162              ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
000010A8                           163                                  ;EASY68k simulator starts in supervisor mode
000010A8  46DF                     164              MOVE    (SP)+,SR
000010AA  201F                     165              MOVE.L  (SP)+,D0    ;save stack cuz it'll get destroyed
000010AC  588F                     166              ADD.L   #4,SP       ;get rid of PC, itll fix itself
000010AE  2E40                     167              MOVE.L  D0,SP
000010B0  4280                     168              CLR.L   D0          ;no longer needed
000010B2                           169  
000010B2  6000 FF64                170              BRA     SHELL
000010B6                           171  *--------------------------------------------------------------------------------------*
000010B6                           172  
000010B6  5289                     173  ECHOTEST:   ADD.L   #1,A1
000010B8  0C19 0043                174              CMP.B   #$43,(A1)+   ;C?
000010BC  6600 1392                175              BNE     ERRORSR
000010C0  0C19 0048                176              CMP.B   #$48,(A1)+   ;H?
000010C4  6600 138A                177              BNE     ERRORSR
000010C8  0C19 004F                178              CMP.B   #$4F,(A1)+   ;O?
000010CC  6600 1382                179              BNE     ERRORSR
000010D0  0C19 0020                180              CMP.B   #$20,(A1)+   ;SPACE?
000010D4  6700 01D2                181              BEQ     ECHO
000010D8  6000 1376                182              BRA     ERRORSR
000010DC                           183  *--------------------------------------------------------------------------------------*
000010DC                           184  
000010DC                           185  
000010DC                           186  *--------------------------------------------------------------------------------------*
000010DC                           187  
000010DC  5289                     188  BLCKTEST:   ADD.L   #1,A1
000010DE  0C11 0046                189              CMP.B   #$46,(A1)   ;BF?
000010E2  6700 0084                190              BEQ     BFTEST
000010E6  0C11 004D                191              CMP.B   #$4D,(A1)   ;BMOV?
000010EA  6700 005A                192              BEQ     BMOVTEST
000010EE  0C11 0054                193              CMP.B   #$54,(A1)   ;BTST?
000010F2  6700 0030                194              BEQ     BTSTTEST
000010F6  0C11 0053                195              CMP.B   #$53,(A1)   ;BSCH?
000010FA  6700 0006                196              BEQ     BSCHTEST
000010FE  6000 1350                197              BRA     ERRORSR
00001102                           198  *--------------------------------------------------------------------------------------*
00001102                           199  
00001102  5289                     200  BSCHTEST:   ADD.L   #1,A1
00001104  0C11 0043                201              CMP.B   #$43,(A1)
00001108  6600 1346                202              BNE     ERRORSR
0000110C  5289                     203              ADD.L   #1,A1
0000110E  0C11 0048                204              CMP.B   #$48,(A1)
00001112  6600 133C                205              BNE     ERRORSR
00001116  5289                     206              ADD.L   #1,A1
00001118  0C11 0020                207              CMP.B   #$20,(A1)
0000111C  6600 1332                208              BNE     ERRORSR
00001120  6000 0EC6                209              BRA     BSCH
00001124                           210                        
00001124                           211  *--------------------------------------------------------------------------------------*
00001124                           212  
00001124                           213  BTSTTEST:   
00001124  5289                     214              ADD.L   #1,A1
00001126  0C11 0053                215              CMP.B   #$53,(A1)
0000112A  6600 1324                216              BNE     ERRORSR
0000112E  5289                     217              ADD.L   #1,A1
00001130  0C11 0054                218              CMP.B   #$54,(A1)
00001134  6600 131A                219              BNE     ERRORSR
00001138  5289                     220              ADD.L   #1,A1
0000113A  0C11 0020                221              CMP.B   #$20,(A1)
0000113E  6600 1310                222              BNE     ERRORSR
00001142  6000 0DCE                223              BRA     BTST
00001146                           224  
00001146                           225  *--------------------------------------------------------------------------------------*
00001146                           226  
00001146  5289                     227  BMOVTEST:   ADD.L   #1,A1
00001148  0C11 004F                228              CMP.B   #$4F,(A1)
0000114C  6600 1302                229              BNE     ERRORSR
00001150  5289                     230              ADD.L   #1,A1
00001152  0C11 0056                231              CMP.B   #$56,(A1)
00001156  6600 12F8                232              BNE     ERRORSR
0000115A  5289                     233              ADD.L   #1,A1
0000115C  0C11 0020                234              CMP.B   #$20,(A1)
00001160  6600 12EE                235              BNE     ERRORSR
00001164  6000 0D1E                236              BRA     BMOV
00001168                           237  *--------------------------------------------------------------------------------------*
00001168  5289                     238  BFTEST:     ADD.L   #1,A1
0000116A  0C11 0020                239              CMP.B   #$20,(A1)
0000116E  6600 12E0                240              BNE     ERRORSR
00001172  6000 0C9A                241              BRA     BF
00001176                           242  *--------------------------------------------------------------------------------------*
00001176                           243  
00001176  5289                     244  DFTST:      ADD.L   #1,A1
00001178  0C11 0046                245              CMP.B   #$46,(A1)
0000117C  6600 12D2                246              BNE     ERRORSR
00001180  5289                     247              ADD.L   #1,A1
00001182  0C11 0000                248              CMP.B   #$00,(A1)
00001186  6600 12C8                249              BNE     ERRORSR
0000118A  6000 0F60                250              BRA     DF
0000118E                           251  *--------------------------------------------------------------------------------------*
0000118E                           252  
0000118E  5289                     253  SORTTEST:    ADD.L   #1,A1
00001190  0C11 004F                254              CMP.B   #$4F,(A1)   ;O?
00001194  6600 12BA                255              BNE     ERRORSR
00001198  5289                     256               ADD.L   #1,A1
0000119A  0C11 0052                257              CMP.B   #$52,(A1)   ;R?
0000119E  6600 12B0                258              BNE     ERRORSR
000011A2  5289                     259              ADD.L   #1,A1
000011A4  0C11 0054                260              CMP.B   #$54,(A1)   ;T?
000011A8  6600 12A6                261              BNE     ERRORSR
000011AC  5289                     262              ADD.L   #1,A1
000011AE  0C11 0057                263              CMP.B   #$57,(A1)   ;W?
000011B2  6600 129C                264              BNE     ERRORSR
000011B6  5289                     265              ADD.L   #1,A1
000011B8  0C11 0020                266              CMP.B   #$20,(A1)
000011BC  6600 1292                267              BNE     ERRORSR
000011C0                           268  
000011C0  6000 08EA                269              BRA     SORTW
000011C4                           270  *--------------------------------------------------------------------------------------*
000011C4                           271  
000011C4  5289                     272  GOTST:      ADD.L   #1,A1
000011C6  0C11 004F                273              CMP.B   #$4F,(A1)
000011CA  6600 1284                274              BNE     ERRORSR
000011CE  5289                     275              ADD.L   #1,A1
000011D0  0C19 0020                276              CMP.B   #$20,(A1)+
000011D4  6600 127A                277              BNE     ERRORSR
000011D8  6000 0EF4                278              BRA     GO
000011DC                           279  *--------------------------------------------------------------------------------------*
000011DC                           280  
000011DC  5289                     281  HELPORHXDC: ADD.L   #1,A1
000011DE  0C11 0045                282              CMP.B   #$45,(A1)   ;is it help?
000011E2  6700 000E                283              BEQ     HELPTST
000011E6  0C11 0058                284              CMP.B   #$58,(A1)   ;or is it hxdc
000011EA  6700 0084                285              BEQ     HXDCTEST
000011EE  6000 1260                286              BRA     ERRORSR     
000011F2                           287  *--------------------------------------------------------------------------------------*
000011F2                           288  
000011F2                           289  HELPTST:   
000011F2  5289                     290             ADD.L   #1,A1   ; check next char
000011F4  0C11 004C                291             CMP.B    #$4C,(A1) ;check for L
000011F8  6600 1256                292             BNE      ERRORSR
000011FC  5289                     293             ADD.L   #1,A1
000011FE  0C11 0050                294             CMP.B    #$50,(A1)   ;check for P
00001202  6600 124C                295             BNE      ERRORSR
00001206  5289                     296             ADD.L   #1,A1   ;check for anything else
00001208  0C11 0000                297             CMP.B    #$00,(A1)
0000120C  6600 1242                298             BNE      ERRORSR
00001210  6000 0504                299             BRA      HELP
00001214                           300              
00001214                           301  
00001214                           302   
00001214                           303  *--------------------------------------------------------------------------------------*
00001214                           304              
00001214  5289                     305  MEMTEST:    ADD.L   #1,A1
00001216  0C11 0053                306              CMP.B   #$53,(A1)
0000121A  6700 0016                307              BEQ     MSSPCTEST
0000121E  0C11 0044                308              CMP.B   #$44,(A1)
00001222  6700 001C                309              BEQ     MDSPCTEST
00001226  0C11 004D                310              CMP.B   #$4D,(A1)
0000122A  6700 0036                311              BEQ     MMSPCTEST
0000122E  6000 1220                312              BRA     ERRORSR
00001232                           313              
00001232  5289                     314  MSSPCTEST   ADD.L   #1,A1
00001234  0C11 0020                315              CMP.B   #$20,(A1)
00001238  6700 06EE                316              BEQ     MEMSET
0000123C  6000 1212                317              BRA     ERRORSR
00001240                           318              
00001240                           319  MDSPCTEST:  
00001240  5289                     320              ADD.L   #1,A1
00001242  0C11 0053                321              CMP.B   #$53,(A1)
00001246  6600 1208                322              BNE     ERRORSR
0000124A  5289                     323              ADD.L   #1,A1
0000124C  0C11 0050                324              CMP.B   #$50,(A1)
00001250  6600 11FE                325              BNE     ERRORSR
00001254  5289                     326              ADD.L   #1,A1
00001256  0C11 0020                327              CMP.B   #$20,(A1)
0000125A  6700 0720                328              BEQ     MEMDISP          
0000125E  6000 11F0                329              BRA     ERRORSR
00001262                           330             
00001262  5289                     331  MMSPCTEST:  ADD.L   #1,A1
00001264  0C11 0020                332              CMP.B   #$20,(A1)
00001268  6700 0928                333              BEQ     MM          
0000126C  6000 11E2                334              BRA     ERRORSR
00001270                           335  *--------------------------------------------------------------------------------------*
00001270                           336  HXDCTEST:   
00001270  5289                     337              ADD.L   #1,A1
00001272  0C11 0044                338              CMP.B   #$44,(A1)
00001276  6600 11D8                339              BNE     ERRORSR
0000127A  5289                     340              ADD.L   #1,A1
0000127C  0C11 0043                341              CMP.B   #$43,(A1)
00001280  6600 11CE                342              BNE     ERRORSR
00001284  5289                     343              ADD.L   #1,A1
00001286  0C11 0020                344              CMP.B   #$20,(A1)
0000128A  6600 11C4                345              BNE     ERRORSR
0000128E  6000 078E                346              BRA     HXDC
00001292                           347  *--------------------------------------------------------------------------------------*
00001292                           348  MODIFYREGTEST:
00001292  5289                     349              ADD.L   #1,A1
00001294  0C11 0044                350              CMP.B   #$44,(A1)
00001298  6700 0028                351              BEQ     MRD
0000129C  0C11 0041                352              CMP.B   #$41,(A1)
000012A0  6700 0066                353              BEQ     MRA
000012A4  6000 11AA                354              BRA     ERRORSR
000012A8                           355              
000012A8                           356  *----------------------------USER DEFINED COMMANDS---------------------------------*
000012A8                           357  *--------------------------------------------------------------------------------------*
000012A8                           358  ECHO: *This command was made for fun. What terminal DOESN'T have echo?*
000012A8                           359  
000012A8  2449                     360          MOVE.L  A1,A2   ;setup to find end of string
000012AA  0C1A 0000                361  EEND:   CMP.B   #$00,(A2)+
000012AE  6700 0004                362          BEQ     EFOUND
000012B2  60F6                     363          BRA     EEND
000012B4                           364  EFOUND:
000012B4  538A                     365          SUB.L   #1,A2   ;off by one
000012B6  95C9                     366          SUB.L   A1,A2   ;find out how many bytes
000012B8  220A                     367          MOVE.L  A2,D1   ;place it for trap function
000012BA  7000                     368          MOVE.L  #0,D0
000012BC  4E4F                     369          TRAP    #15
000012BE                           370          
000012BE  6000 FDDE                371          BRA RESTORE
000012C2                           372  *--------------------------------------------------------------------------------------*
000012C2                           373  MODIFYREGS:
000012C2                           374  
000012C2                           375  MRD:
000012C2  5289                     376          ADD.L   #1,A1   ;inc
000012C4  0C11 0030                377          CMP.B   #$30,(A1)
000012C8  6700 007C                378          BEQ     MRD0
000012CC  0C11 0031                379          CMP.B   #$31,(A1)
000012D0  6700 00B4                380          BEQ     MRD1
000012D4  0C11 0032                381          CMP.B   #$32,(A1)
000012D8  6700 00EC                382          BEQ     MRD2
000012DC  0C11 0033                383          CMP.B   #$33,(A1)
000012E0  6700 0124                384          BEQ     MRD3
000012E4  0C11 0034                385          CMP.B   #$34,(A1)
000012E8  6700 015C                386          BEQ     MRD4
000012EC  0C11 0035                387          CMP.B   #$35,(A1)
000012F0  6700 0194                388          BEQ     MRD5
000012F4  0C11 0036                389          CMP.B   #$36,(A1)
000012F8  6700 01CC                390          BEQ     MRD6
000012FC  0C11 0037                391          CMP.B   #$37,(A1)
00001300  6700 0204                392          BEQ     MRD7
00001304  6000 114A                393          BRA     ERRORSR
00001308                           394  
00001308                           395  MRA:
00001308  5289                     396          ADD.L   #1,A1   ;inc
0000130A  0C11 0030                397          CMP.B   #$30,(A1)
0000130E  6700 0236                398          BEQ     MRA0
00001312  0C11 0031                399          CMP.B   #$31,(A1)
00001316  6700 026E                400          BEQ     MRA1
0000131A  0C11 0032                401          CMP.B   #$32,(A1)
0000131E  6700 02A6                402          BEQ     MRA2
00001322  0C11 0033                403          CMP.B   #$33,(A1)
00001326  6700 02DE                404          BEQ     MRA3
0000132A  0C11 0034                405          CMP.B   #$34,(A1)
0000132E  6700 0316                406          BEQ     MRA4
00001332  0C11 0035                407          CMP.B   #$35,(A1)
00001336  6700 034E                408          BEQ     MRA5
0000133A  0C11 0036                409          CMP.B   #$36,(A1)
0000133E  6700 0386                410          BEQ     MRA6
00001342  6000 110C                411          BRA     ERRORSR
00001346                           412               
00001346                           413  
00001346                           414  
00001346                           415          
00001346                           416          
00001346                           417  MRD0: 
00001346  5289                     418          ADD.L   #1,A1
00001348  0C19 0020                419          CMP.B   #$20,(A1)+
0000134C  6600 1102                420          BNE     ERRORSR
00001350  2449                     421          MOVE.L  A1,A2
00001352  264A                     422          MOVE.L  A2,A3
00001354  4EB9 00001706            423          JSR     MRDFINDDATA
0000135A  538B                     424          SUB.L   #1,A3
0000135C  4EB9 0000249C            425          JSR     ASCII_ADDRESS   ;convert data to hex
00001362  2F05                     426          MOVE.L  D5,-(SP)        ;store it temporarily
00001364  588F                     427          ADD.L   #4,SP       ;dont lose data
00001366  4CDF 7FFF                428          MOVEM.L (SP)+,D0-D7/A0-A6
0000136A  4CDF 7FFF                429          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
0000136E  588F                     430          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001370                           431                                  ;EASY68k simulator starts in supervisor mode
00001370  46DF                     432          MOVE    (SP)+,SR
00001372  588F                     433          ADD.L   #4,SP       ;skip saved stack
00001374  9FFC 00000086            434          SUB.L   #134,SP     ;find data again
0000137A  2017                     435          MOVE.L  (SP),D0
0000137C  DFFC 0000008A            436          ADD.L   #138,SP     ;go back to original spot
00001382  6000 FC94                437          BRA     SHELL
00001386                           438               
00001386                           439  MRD1:
00001386  5289                     440          ADD.L   #1,A1
00001388  0C19 0020                441          CMP.B   #$20,(A1)+
0000138C  6600 10C2                442          BNE     ERRORSR
00001390  2449                     443          MOVE.L  A1,A2
00001392  264A                     444          MOVE.L  A2,A3
00001394  4EB9 00001706            445          JSR     MRDFINDDATA
0000139A  538B                     446          SUB.L   #1,A3
0000139C  4EB9 0000249C            447          JSR     ASCII_ADDRESS   ;convert data to hex
000013A2  2F05                     448          MOVE.L  D5,-(SP)        ;store it temporarily
000013A4  588F                     449          ADD.L   #4,SP       ;dont lose data
000013A6  4CDF 7FFF                450          MOVEM.L (SP)+,D0-D7/A0-A6
000013AA  4CDF 7FFF                451          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
000013AE  588F                     452          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
000013B0                           453                                  ;EASY68k simulator starts in supervisor mode
000013B0  46DF                     454          MOVE    (SP)+,SR
000013B2  588F                     455          ADD.L   #4,SP       ;skip saved stack
000013B4  9FFC 00000086            456          SUB.L   #134,SP     ;find data again
000013BA  2217                     457          MOVE.L  (SP),D1
000013BC  DFFC 0000008A            458          ADD.L   #138,SP     ;go back to original spot
000013C2  6000 FC54                459          BRA     SHELL
000013C6                           460  
000013C6                           461  MRD2:
000013C6  5289                     462          ADD.L   #1,A1
000013C8  0C19 0020                463          CMP.B   #$20,(A1)+
000013CC  6600 1082                464          BNE     ERRORSR
000013D0  2449                     465          MOVE.L  A1,A2
000013D2  264A                     466          MOVE.L  A2,A3
000013D4  4EB9 00001706            467          JSR     MRDFINDDATA
000013DA  538B                     468          SUB.L   #1,A3
000013DC  4EB9 0000249C            469          JSR     ASCII_ADDRESS   ;convert data to hex
000013E2  2F05                     470          MOVE.L  D5,-(SP)        ;store it temporarily
000013E4  588F                     471          ADD.L   #4,SP       ;dont lose data
000013E6  4CDF 7FFF                472          MOVEM.L (SP)+,D0-D7/A0-A6
000013EA  4CDF 7FFF                473          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
000013EE  588F                     474          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
000013F0                           475                                  ;EASY68k simulator starts in supervisor mode
000013F0  46DF                     476          MOVE    (SP)+,SR
000013F2  588F                     477          ADD.L   #4,SP       ;skip saved stack
000013F4  9FFC 00000086            478          SUB.L   #134,SP     ;find data again
000013FA  2417                     479          MOVE.L  (SP),D2
000013FC  DFFC 0000008A            480          ADD.L   #138,SP     ;go back to original spot
00001402  6000 FC14                481          BRA     SHELL
00001406                           482  
00001406                           483  MRD3:
00001406  5289                     484          ADD.L   #1,A1
00001408  0C19 0020                485          CMP.B   #$20,(A1)+
0000140C  6600 1042                486          BNE     ERRORSR
00001410  2449                     487          MOVE.L  A1,A2
00001412  264A                     488          MOVE.L  A2,A3
00001414  4EB9 00001706            489          JSR     MRDFINDDATA
0000141A  538B                     490          SUB.L   #1,A3
0000141C  4EB9 0000249C            491          JSR     ASCII_ADDRESS   ;convert data to hex
00001422  2F05                     492          MOVE.L  D5,-(SP)        ;store it temporarily
00001424  588F                     493          ADD.L   #4,SP       ;dont lose data
00001426  4CDF 7FFF                494          MOVEM.L (SP)+,D0-D7/A0-A6
0000142A  4CDF 7FFF                495          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
0000142E  588F                     496          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001430                           497                                  ;EASY68k simulator starts in supervisor mode
00001430  46DF                     498          MOVE    (SP)+,SR
00001432  588F                     499          ADD.L   #4,SP       ;skip saved stack
00001434  9FFC 00000086            500          SUB.L   #134,SP     ;find data again
0000143A  2617                     501          MOVE.L  (SP),D3
0000143C  DFFC 0000008A            502          ADD.L   #138,SP     ;go back to original spot
00001442  6000 FBD4                503          BRA     SHELL
00001446                           504  
00001446                           505  MRD4:
00001446  5289                     506          ADD.L   #1,A1
00001448  0C19 0020                507          CMP.B   #$20,(A1)+
0000144C  6600 1002                508          BNE     ERRORSR
00001450  2449                     509          MOVE.L  A1,A2
00001452  264A                     510          MOVE.L  A2,A3
00001454  4EB9 00001706            511          JSR     MRDFINDDATA
0000145A  538B                     512          SUB.L   #1,A3
0000145C  4EB9 0000249C            513          JSR     ASCII_ADDRESS   ;convert data to hex
00001462  2F05                     514          MOVE.L  D5,-(SP)        ;store it temporarily
00001464  588F                     515          ADD.L   #4,SP       ;dont lose data
00001466  4CDF 7FFF                516          MOVEM.L (SP)+,D0-D7/A0-A6
0000146A  4CDF 7FFF                517          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
0000146E  588F                     518          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001470                           519                                  ;EASY68k simulator starts in supervisor mode
00001470  46DF                     520          MOVE    (SP)+,SR
00001472  588F                     521          ADD.L   #4,SP       ;skip saved stack
00001474  9FFC 00000086            522          SUB.L   #134,SP     ;find data again
0000147A  2817                     523          MOVE.L  (SP),D4
0000147C  DFFC 0000008A            524          ADD.L   #138,SP     ;go back to original spot
00001482  6000 FB94                525          BRA     SHELL
00001486                           526  
00001486                           527  MRD5:
00001486  5289                     528          ADD.L   #1,A1
00001488  0C19 0020                529          CMP.B   #$20,(A1)+
0000148C  6600 0FC2                530          BNE     ERRORSR
00001490  2449                     531          MOVE.L  A1,A2
00001492  264A                     532          MOVE.L  A2,A3
00001494  4EB9 00001706            533          JSR     MRDFINDDATA
0000149A  538B                     534          SUB.L   #1,A3
0000149C  4EB9 0000249C            535          JSR     ASCII_ADDRESS   ;convert data to hex
000014A2  2F05                     536          MOVE.L  D5,-(SP)        ;store it temporarily
000014A4  588F                     537          ADD.L   #4,SP       ;dont lose data
000014A6  4CDF 7FFF                538          MOVEM.L (SP)+,D0-D7/A0-A6
000014AA  4CDF 7FFF                539          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
000014AE  588F                     540          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
000014B0                           541                                  ;EASY68k simulator starts in supervisor mode
000014B0  46DF                     542          MOVE    (SP)+,SR
000014B2  588F                     543          ADD.L   #4,SP       ;skip saved stack
000014B4  9FFC 00000086            544          SUB.L   #134,SP     ;find data again
000014BA  2A17                     545          MOVE.L  (SP),D5
000014BC  DFFC 0000008A            546          ADD.L   #138,SP     ;go back to original spot
000014C2  6000 FB54                547          BRA     SHELL
000014C6                           548  
000014C6                           549  MRD6:
000014C6  5289                     550          ADD.L   #1,A1
000014C8  0C19 0020                551          CMP.B   #$20,(A1)+
000014CC  6600 0F82                552          BNE     ERRORSR
000014D0  2449                     553          MOVE.L  A1,A2
000014D2  264A                     554          MOVE.L  A2,A3
000014D4  4EB9 00001706            555          JSR     MRDFINDDATA
000014DA  538B                     556          SUB.L   #1,A3
000014DC  4EB9 0000249C            557          JSR     ASCII_ADDRESS   ;convert data to hex
000014E2  2F05                     558          MOVE.L  D5,-(SP)        ;store it temporarily
000014E4  588F                     559          ADD.L   #4,SP       ;dont lose data
000014E6  4CDF 7FFF                560          MOVEM.L (SP)+,D0-D7/A0-A6
000014EA  4CDF 7FFF                561          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
000014EE  588F                     562          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
000014F0                           563                                  ;EASY68k simulator starts in supervisor mode
000014F0  46DF                     564          MOVE    (SP)+,SR
000014F2  588F                     565          ADD.L   #4,SP       ;skip saved stack
000014F4  9FFC 00000086            566          SUB.L   #134,SP     ;find data again
000014FA  2C17                     567          MOVE.L  (SP),D6
000014FC  DFFC 0000008A            568          ADD.L   #138,SP     ;go back to original spot
00001502  6000 FB14                569          BRA     SHELL
00001506                           570  
00001506                           571  MRD7:
00001506  5289                     572          ADD.L   #1,A1
00001508  0C19 0020                573          CMP.B   #$20,(A1)+
0000150C  6600 0F42                574          BNE     ERRORSR
00001510  2449                     575          MOVE.L  A1,A2
00001512  264A                     576          MOVE.L  A2,A3
00001514  4EB9 00001706            577          JSR     MRDFINDDATA
0000151A  538B                     578          SUB.L   #1,A3
0000151C  4EB9 0000249C            579          JSR     ASCII_ADDRESS   ;convert data to hex
00001522  2F05                     580          MOVE.L  D5,-(SP)        ;store it temporarily
00001524  588F                     581          ADD.L   #4,SP       ;dont lose data
00001526  4CDF 7FFF                582          MOVEM.L (SP)+,D0-D7/A0-A6
0000152A  4CDF 7FFF                583          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
0000152E  588F                     584          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001530                           585                                  ;EASY68k simulator starts in supervisor mode
00001530  46DF                     586          MOVE    (SP)+,SR
00001532  588F                     587         ADD.L   #4,SP       ;skip saved stack
00001534  9FFC 00000086            588          SUB.L   #134,SP     ;find data again
0000153A  2E17                     589          MOVE.L  (SP),D7
0000153C  DFFC 0000008A            590          ADD.L   #138,SP     ;go back to original spot
00001542  6000 FAD4                591          BRA     SHELL
00001546                           592  
00001546                           593  MRA0:
00001546  5289                     594          ADD.L   #1,A1
00001548  0C19 0020                595          CMP.B   #$20,(A1)+
0000154C  6600 0F02                596          BNE     ERRORSR
00001550  2449                     597          MOVE.L  A1,A2
00001552  264A                     598          MOVE.L  A2,A3
00001554  4EB9 00001706            599          JSR     MRDFINDDATA
0000155A  538B                     600          SUB.L   #1,A3
0000155C  4EB9 0000249C            601          JSR     ASCII_ADDRESS   ;convert data to hex
00001562  2F05                     602          MOVE.L  D5,-(SP)        ;store it temporarily
00001564  588F                     603          ADD.L   #4,SP       ;dont lose data
00001566  4CDF 7FFF                604          MOVEM.L (SP)+,D0-D7/A0-A6
0000156A  4CDF 7FFF                605          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
0000156E  588F                     606          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001570                           607                                  ;EASY68k simulator starts in supervisor mode
00001570  46DF                     608          MOVE    (SP)+,SR
00001572  588F                     609          ADD.L   #4,SP       ;skip saved stack
00001574  9FFC 00000086            610          SUB.L   #134,SP     ;find data again
0000157A  2057                     611          MOVE.L  (SP),A0
0000157C  DFFC 0000008A            612          ADD.L   #138,SP     ;go back to original spot
00001582  6000 FA94                613          BRA     SHELL
00001586                           614  MRA1:
00001586  5289                     615          ADD.L   #1,A1
00001588  0C19 0020                616          CMP.B   #$20,(A1)+
0000158C  6600 0EC2                617          BNE     ERRORSR
00001590  2449                     618          MOVE.L  A1,A2
00001592  264A                     619          MOVE.L  A2,A3
00001594  4EB9 00001706            620          JSR     MRDFINDDATA
0000159A  538B                     621          SUB.L   #1,A3
0000159C  4EB9 0000249C            622          JSR     ASCII_ADDRESS   ;convert data to hex
000015A2  2F05                     623          MOVE.L  D5,-(SP)        ;store it temporarily
000015A4  588F                     624          ADD.L   #4,SP       ;dont lose data
000015A6  4CDF 7FFF                625          MOVEM.L (SP)+,D0-D7/A0-A6
000015AA  4CDF 7FFF                626          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
000015AE  588F                     627          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
000015B0                           628                                  ;EASY68k simulator starts in supervisor mode
000015B0  46DF                     629          MOVE    (SP)+,SR
000015B2  588F                     630         ADD.L   #4,SP       ;skip saved stack
000015B4  9FFC 00000086            631          SUB.L   #134,SP     ;find data again
000015BA  2257                     632          MOVE.L  (SP),A1
000015BC  DFFC 0000008A            633          ADD.L   #138,SP     ;go back to original spot
000015C2  6000 FA54                634          BRA     SHELL
000015C6                           635  
000015C6                           636  MRA2:
000015C6  5289                     637          ADD.L   #1,A1
000015C8  0C19 0020                638          CMP.B   #$20,(A1)+
000015CC  6600 0E82                639          BNE     ERRORSR
000015D0  2449                     640          MOVE.L  A1,A2
000015D2  264A                     641          MOVE.L  A2,A3
000015D4  4EB9 00001706            642          JSR     MRDFINDDATA
000015DA  538B                     643          SUB.L   #1,A3
000015DC  4EB9 0000249C            644          JSR     ASCII_ADDRESS   ;convert data to hex
000015E2  2F05                     645          MOVE.L  D5,-(SP)        ;store it temporarily
000015E4  588F                     646          ADD.L   #4,SP       ;dont lose data
000015E6  4CDF 7FFF                647          MOVEM.L (SP)+,D0-D7/A0-A6
000015EA  4CDF 7FFF                648          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
000015EE  588F                     649          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
000015F0                           650                                  ;EASY68k simulator starts in supervisor mode
000015F0  46DF                     651          MOVE    (SP)+,SR
000015F2  588F                     652          ADD.L   #4,SP       ;skip saved stack
000015F4  9FFC 00000086            653          SUB.L   #134,SP     ;find data again
000015FA  2457                     654          MOVE.L  (SP),A2
000015FC  DFFC 0000008A            655          ADD.L   #138,SP     ;go back to original spot
00001602  6000 FA14                656          BRA     SHELL
00001606                           657          
00001606                           658  MRA3:
00001606  5289                     659          ADD.L   #1,A1
00001608  0C19 0020                660          CMP.B   #$20,(A1)+
0000160C  6600 0E42                661          BNE     ERRORSR
00001610  2449                     662          MOVE.L  A1,A2
00001612  264A                     663          MOVE.L  A2,A3
00001614  4EB9 00001706            664          JSR     MRDFINDDATA
0000161A  538B                     665          SUB.L   #1,A3
0000161C  4EB9 0000249C            666          JSR     ASCII_ADDRESS   ;convert data to hex
00001622  2F05                     667          MOVE.L  D5,-(SP)        ;store it temporarily
00001624  588F                     668          ADD.L   #4,SP       ;dont lose data
00001626  4CDF 7FFF                669          MOVEM.L (SP)+,D0-D7/A0-A6
0000162A  4CDF 7FFF                670          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
0000162E  588F                     671          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001630                           672                                  ;EASY68k simulator starts in supervisor mode
00001630  46DF                     673          MOVE    (SP)+,SR
00001632  588F                     674          ADD.L   #4,SP       ;skip saved stack
00001634  9FFC 00000086            675          SUB.L   #134,SP     ;find data again
0000163A  2657                     676          MOVE.L  (SP),A3
0000163C  DFFC 0000008A            677          ADD.L   #138,SP     ;go back to original spot
00001642  6000 F9D4                678          BRA     SHELL
00001646                           679  
00001646                           680  MRA4:
00001646  5289                     681          ADD.L   #1,A1
00001648  0C19 0020                682          CMP.B   #$20,(A1)+
0000164C  6600 0E02                683          BNE     ERRORSR
00001650  2449                     684          MOVE.L  A1,A2
00001652  264A                     685          MOVE.L  A2,A3
00001654  4EB9 00001706            686          JSR     MRDFINDDATA
0000165A  538B                     687          SUB.L   #1,A3
0000165C  4EB9 0000249C            688          JSR     ASCII_ADDRESS   ;convert data to hex
00001662  2F05                     689          MOVE.L  D5,-(SP)        ;store it temporarily
00001664  588F                     690          ADD.L   #4,SP       ;dont lose data
00001666  4CDF 7FFF                691          MOVEM.L (SP)+,D0-D7/A0-A6
0000166A  4CDF 7FFF                692          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
0000166E  588F                     693          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001670                           694                                  ;EASY68k simulator starts in supervisor mode
00001670  46DF                     695          MOVE    (SP)+,SR
00001672  588F                     696          ADD.L   #4,SP       ;skip saved stack
00001674  9FFC 00000086            697          SUB.L   #134,SP     ;find data again
0000167A  2857                     698          MOVE.L  (SP),A4
0000167C  DFFC 0000008A            699          ADD.L   #138,SP     ;go back to original spot
00001682  6000 F994                700          BRA     SHELL
00001686                           701  
00001686                           702  MRA5:
00001686  5289                     703          ADD.L   #1,A1
00001688  0C19 0020                704          CMP.B   #$20,(A1)+
0000168C  6600 0DC2                705          BNE     ERRORSR
00001690  2449                     706          MOVE.L  A1,A2
00001692  264A                     707          MOVE.L  A2,A3
00001694  4EB9 00001706            708          JSR     MRDFINDDATA
0000169A  538B                     709          SUB.L   #1,A3
0000169C  4EB9 0000249C            710          JSR     ASCII_ADDRESS   ;convert data to hex
000016A2  2F05                     711          MOVE.L  D5,-(SP)        ;store it temporarily
000016A4  588F                     712          ADD.L   #4,SP       ;dont lose data
000016A6  4CDF 7FFF                713          MOVEM.L (SP)+,D0-D7/A0-A6
000016AA  4CDF 7FFF                714          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
000016AE  588F                     715          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
000016B0                           716                                  ;EASY68k simulator starts in supervisor mode
000016B0  46DF                     717          MOVE    (SP)+,SR
000016B2  588F                     718         ADD.L   #4,SP       ;skip saved stack
000016B4  9FFC 00000086            719          SUB.L   #134,SP     ;find data again
000016BA  2A57                     720          MOVE.L  (SP),A5
000016BC  DFFC 0000008A            721          ADD.L   #138,SP     ;go back to original spot
000016C2  6000 F954                722          BRA     SHELL
000016C6                           723  
000016C6                           724  MRA6:
000016C6  5289                     725          ADD.L   #1,A1
000016C8  0C19 0020                726          CMP.B   #$20,(A1)+
000016CC  6600 0D82                727          BNE     ERRORSR
000016D0  2449                     728          MOVE.L  A1,A2
000016D2  264A                     729          MOVE.L  A2,A3
000016D4  4EB9 00001706            730          JSR     MRDFINDDATA
000016DA  538B                     731          SUB.L   #1,A3
000016DC  4EB9 0000249C            732          JSR     ASCII_ADDRESS   ;convert data to hex
000016E2  2F05                     733          MOVE.L  D5,-(SP)        ;store it temporarily
000016E4  588F                     734          ADD.L   #4,SP       ;dont lose data
000016E6  4CDF 7FFF                735          MOVEM.L (SP)+,D0-D7/A0-A6
000016EA  4CDF 7FFF                736          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
000016EE  588F                     737          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
000016F0                           738                                  ;EASY68k simulator starts in supervisor mode
000016F0  46DF                     739          MOVE    (SP)+,SR
000016F2  588F                     740          ADD.L   #4,SP       ;skip saved stack
000016F4  9FFC 00000086            741          SUB.L   #134,SP     ;find data again
000016FA  2C57                     742          MOVE.L  (SP),A6
000016FC  DFFC 0000008A            743          ADD.L   #138,SP     ;go back to original spot
00001702  6000 F914                744          BRA     SHELL
00001706                           745  
00001706                           746  MRDFINDDATA:
00001706  0C1B 0000                747          CMP.B   #$00,(A3)+
0000170A  6700 0004                748          BEQ     GOBACK
0000170E  60F6                     749          BRA     MRDFINDDATA
00001710  4E75                     750  GOBACK: RTS
00001712                           751          
00001712                           752          
00001712                           753  
00001712                           754  
00001712                           755  
00001712                           756  
00001712  6000 F98A                757          BRA RESTORE
00001716                           758  *--------------------REQUIRED COMMAND DEFINITION START---------------------------------*
00001716                           759  *--------------------------------------------------------------------------------------*
00001716  43F8 3063                760  HELP:       LEA     HTXT,A1     ;list of commands test
0000171A  323C 0011                761              MOVE.W  #17,D1
0000171E  103C 0000                762              MOVE.B  #0,D0
00001722  4E4F                     763              TRAP    #15
00001724  323C 0000                764              MOVE.W  #0,D1       ;newline
00001728  4E4F                     765              TRAP    #15
0000172A                           766              
0000172A  43F8 3074                767              LEA     HTXT1,A1    ;mem display command
0000172E  323C 004B                768              MOVE.W  #75,D1
00001732  103C 0000                769              MOVE.B  #0,D0
00001736  4E4F                     770              TRAP    #15
00001738  43F8 30BF                771              LEA     HTXT1A,A1   ;mem display
0000173C  323C 003D                772              MOVE.W  #61,D1
00001740  103C 0000                773              MOVE.B  #0,D0
00001744  4E4F                     774              TRAP    #15
00001746  43F8 30FC                775              LEA     HTXT1B,A1   ;mem display
0000174A  323C 0014                776              MOVE.W  #20,D1
0000174E  103C 0000                777              MOVE.B  #0,D0
00001752  4E4F                     778              TRAP    #15
00001754  323C 0000                779              MOVE.W  #0,D1       ;newline
00001758  4E4F                     780              TRAP    #15
0000175A                           781              
0000175A  43F8 3110                782              LEA     HTXT2,A1    ;hxdec command text
0000175E  323C 004B                783              MOVE.W  #75,D1
00001762  103C 0000                784              MOVE.B  #0,D0
00001766  4E4F                     785              TRAP    #15
00001768  123C 0000                786              MOVE.B  #0,D1       ;newline
0000176C  4E4F                     787              TRAP    #15
0000176E                           788              
0000176E  43F8 315B                789              LEA     HTXT3,A1    ;sort command text
00001772  323C 0045                790              MOVE.W  #69,D1
00001776  103C 0000                791              MOVE.B  #0,D0
0000177A  4E4F                     792              TRAP    #15
0000177C  43F8 31A0                793              LEA     HTXT3A,A1    ;sort command text continued
00001780  323C 0039                794              MOVE.W  #57,D1
00001784  103C 0000                795              MOVE.B  #0,D0
00001788  4E4F                     796              TRAP    #15
0000178A  43F8 31D9                797              LEA     HTXT3B,A1    ;sort command text continued
0000178E  323C 0014                798              MOVE.W  #20,D1
00001792  103C 0000                799              MOVE.B  #0,D0
00001796  4E4F                     800              TRAP    #15
00001798  43F8 31ED                801              LEA     HTXT3C,A1    ;sort command text continued
0000179C  323C 0015                802              MOVE.W  #21,D1
000017A0  103C 0000                803              MOVE.B  #0,D0
000017A4  4E4F                     804              TRAP    #15
000017A6  43F8 3202                805              LEA     HTXT3D,A1    ;sort command text continued
000017AA  323C 001D                806              MOVE.W  #29,D1
000017AE  103C 0000                807              MOVE.B  #0,D0
000017B2  4E4F                     808              TRAP    #15
000017B4  43F8 321F                809              LEA     HTXT3E,A1    ;sort command text continued
000017B8  323C 0033                810              MOVE.W  #51,D1
000017BC  103C 0000                811              MOVE.B  #0,D0
000017C0  4E4F                     812              TRAP    #15
000017C2  123C 0000                813              MOVE.B  #0,D1       ;newline
000017C6  4E4F                     814              TRAP    #15
000017C8                           815              
000017C8  43F8 3252                816              LEA     HTXT4,A1    ;memory modify command text 
000017CC  323C 0047                817              MOVE.W  #71,D1
000017D0  103C 0000                818              MOVE.B  #0,D0
000017D4  4E4F                     819              TRAP    #15
000017D6  43F8 3299                820              LEA     HTXT4A,A1    ;mem modify command text continued
000017DA  323C 0045                821              MOVE.W  #69,D1
000017DE  103C 0000                822              MOVE.B  #0,D0
000017E2  4E4F                     823              TRAP    #15
000017E4  43F8 32DE                824              LEA     HTXT4B,A1    ;mem modify command text continued
000017E8  323C 001B                825              MOVE.W  #27,D1
000017EC  103C 0000                826              MOVE.B  #0,D0
000017F0  4E4F                     827              TRAP    #15
000017F2  43F8 32F9                828              LEA     HTXT4C,A1    ;mem modify command text continued
000017F6  323C 001E                829              MOVE.W  #30,D1
000017FA  103C 0000                830              MOVE.B  #0,D0
000017FE  4E4F                     831              TRAP    #15
00001800  43F8 3317                832              LEA     HTXT4D,A1    ;mem modify command text continued
00001804  323C 001F                833              MOVE.W  #31,D1
00001808  103C 0000                834              MOVE.B  #0,D0
0000180C  4E4F                     835              TRAP    #15
0000180E  43F8 3336                836              LEA     HTXT4E,A1    ;mem modify command text continued
00001812  323C 0024                837              MOVE.W  #36,D1
00001816  103C 0000                838              MOVE.B  #0,D0
0000181A  4E4F                     839              TRAP    #15
0000181C  123C 0000                840              MOVE.B  #0,D1
00001820  4E4F                     841              TRAP    #15         ;newline
00001822                           842              
00001822  43F8 335A                843              LEA     HTXT5,A1    ;memory set command text 
00001826  323C 0046                844              MOVE.W  #70,D1
0000182A  103C 0000                845              MOVE.B  #0,D0
0000182E  4E4F                     846              TRAP    #15
00001830  43F8 33A0                847              LEA     HTXT5A,A1    ;memory set command text continued
00001834  323C 0009                848              MOVE.W  #9,D1
00001838  103C 0000                849              MOVE.B  #0,D0
0000183C  4E4F                     850              TRAP    #15
0000183E  123C 0000                851              MOVE.B  #0,D1       ;newline
00001842  4E4F                     852              TRAP    #15
00001844                           853              
00001844  43F8 33A9                854              LEA     HTXT6,A1    ;block fill command text
00001848  323C 0045                855              MOVE.W  #69,D1
0000184C  103C 0000                856              MOVE.B  #0,D0
00001850  4E4F                     857              TRAP    #15
00001852  43F8 33EF                858              LEA     HTXT6A,A1    ;block fill command text
00001856  323C 0048                859              MOVE.W  #72,D1
0000185A  103C 0000                860              MOVE.B  #0,D0
0000185E  4E4F                     861              TRAP    #15
00001860  43F8 3437                862              LEA     HTXT6B,A1    ;block fill command text
00001864  323C 0026                863              MOVE.W  #38,D1
00001868  103C 0000                864              MOVE.B  #0,D0
0000186C  4E4F                     865              TRAP    #15
0000186E  123C 0000                866              MOVE.B  #0,D1
00001872  4E4F                     867              TRAP    #15         ;newline
00001874                           868              
00001874                           869              
00001874  43F8 345D                870              LEA     HTXT7,A1    ;block move command text
00001878  323C 0044                871              MOVE.W  #68,D1
0000187C  103C 0000                872              MOVE.B  #0,D0
00001880  4E4F                     873              TRAP    #15
00001882  43F8 34A1                874              LEA     HTXT7A,A1    ;block move command text
00001886  323C 0048                875              MOVE.W  #72,D1
0000188A  103C 0000                876              MOVE.B  #0,D0
0000188E  4E4F                     877              TRAP    #15
00001890  43F8 34E9                878              LEA     HTXT7B,A1    ;block move command text
00001894  323C 0018                879              MOVE.W  #24,D1
00001898  103C 0000                880              MOVE.B  #0,D0
0000189C  4E4F                     881              TRAP    #15
0000189E  123C 0000                882              MOVE.B  #0,D1       ;newline
000018A2  4E4F                     883              TRAP    #15
000018A4                           884              
000018A4  43F8 3501                885              LEA     HTXT8,A1    ;block test command text
000018A8  323C 0047                886              MOVE.W  #71,D1
000018AC  103C 0000                887              MOVE.B  #0,D0
000018B0  4E4F                     888              TRAP    #15
000018B2  43F8 3548                889              LEA     HTXT8A,A1    ;block test command text
000018B6  323C 0028                890              MOVE.W  #40,D1
000018BA  103C 0000                891              MOVE.B  #0,D0
000018BE  4E4F                     892              TRAP    #15
000018C0  123C 0000                893              MOVE.B  #0,D1       ;newline
000018C4  4E4F                     894              TRAP    #15
000018C6                           895              
000018C6  43F8 3570                896              LEA     HTXT9,A1    ;block search command text
000018CA  323C 0046                897              MOVE.W  #70,D1
000018CE  103C 0000                898              MOVE.B  #0,D0
000018D2  4E4F                     899              TRAP    #15
000018D4  43F8 35B8                900              LEA     HTXT9A,A1    ;block search command text
000018D8  323C 002D                901              MOVE.W  #45,D1
000018DC  103C 0000                902              MOVE.B  #0,D0
000018E0  4E4F                     903              TRAP    #15
000018E2  123C 0000                904              MOVE.B  #0,D1       ;newline
000018E6  4E4F                     905              TRAP    #15
000018E8                           906              
000018E8  43F8 35E5                907              LEA     HTXT10,A1    ;go command text
000018EC  323C 003D                908              MOVE.W  #61,D1
000018F0  103C 0000                909              MOVE.B  #0,D0
000018F4  4E4F                     910              TRAP    #15
000018F6  123C 0000                911              MOVE.B  #0,D1      ;newline
000018FA  4E4F                     912              TRAP    #15
000018FC                           913  
000018FC  43F8 3622                914              LEA     HTXT11,A1   ;df command text   
00001900  323C 0038                915              MOVE.W  #56,D1
00001904  103C 0000                916              MOVE.B  #0,D0
00001908  4E4F                     917              TRAP    #15
0000190A  123C 0000                918              MOVE.B  #0,D1
0000190E  4E4F                     919              TRAP    #15
00001910                           920              
00001910  43F8 365A                921              LEA     HTXT12,A1   ;help command text
00001914  323C 0042                922              MOVE.W  #66,D1
00001918  103C 0000                923              MOVE.B  #0,D0
0000191C  4E4F                     924              TRAP    #15
0000191E  123C 0000                925              MOVE.B  #0,D1       ;newline
00001922  4E4F                     926              TRAP    #15   
00001924  6000 F778                927              BRA     RESTORE  
00001928                           928  *--------------------------------------------------------------------------------------*
00001928                           929  *Fix ASCII String input? ask in lab*
00001928  45F8 3000                930  MEMSET:     LEA     BUFFER,A2
0000192C  568A                     931              ADD.L   #3,A2
0000192E  264A                     932              MOVE.L  A2,A3   ;set up to find end
00001930  0C1B 0000                933  FINDEND:    CMP.B   #$00,(A3)+
00001934  6700 0004                934              BEQ     MEMCONT
00001938  60F6                     935              BRA     FINDEND
0000193A  538B                     936  MEMCONT:    SUB.L  #1,A3   ;get rid of off by one erro
0000193C  121A                     937              MOVE.B  (A2)+,D1
0000193E  1412                     938              MOVE.B  (A2),D2
00001940  1601                     939              MOVE.B  D1,D3       ;pass value to subroutine
00001942  4EB9 00002460            940              JSR     ASCII_TO_BCD           
00001948  1203                     941              MOVE.B  D3,D1       ;get converted value
0000194A  1602                     942              MOVE.B  D2,D3       ;pass value
0000194C  4EB9 00002460            943              JSR     ASCII_TO_BCD
00001952  1403                     944              MOVE.B  D3,D2       ;get returned value
00001954  1601                     945              MOVE.B  D1,D3
00001956  4EB9 0000247E            946              JSR     BCD_TO_HEX
0000195C  1203                     947              MOVE.B  D3,D1
0000195E  1602                     948              MOVE.B  D2,D3
00001960  4EB9 0000247E            949              JSR     BCD_TO_HEX
00001966  1403                     950              MOVE.B  D3,D2
00001968  E999                     951              ROL.L   #4,D1       ;put data in correct place
0000196A  D441                     952              ADD     D1,D2       ;get combined data input
0000196C  548A                     953              ADD.L   #2,A2       ;go to start of address
0000196E  4EB9 0000249C            954              JSR     ASCII_ADDRESS  ;get address in workable form
00001974  2845                     955              MOVE.L  D5,A4       ;load target address
00001976  1882                     956              MOVE.B  D2,(A4)       ;put data in target address
00001978  6000 F724                957              BRA     RESTORE                 ;return to shell
0000197C                           958  *--------------------------------------------------------------------------------------*
0000197C  45F8 3000                959  MEMDISP:    LEA     BUFFER,A2
00001980  7C01                     960              MOVE.L  #1,D6       ;counter for how many times to loop
00001982  5A8A                     961              ADD.L   #5,A2       ;get first address
00001984  264A                     962              MOVE.L  A2,A3       
00001986  0C1B 0020                963  FINDEND1:   CMP.B   #$20,(A3)+
0000198A  6700 0004                964              BEQ     FINDNEXT
0000198E  60F6                     965              BRA     FINDEND1  
00001990  284B                     966  FINDNEXT:   MOVE.L  A3,A4
00001992  2A4B                     967              MOVE.L  A3,A5
00001994  538B                     968              SUB.L   #1,A3   ;get rid of off by one error
00001996  0C1D 0000                969  FINDEND2:   CMP.B   #$00,(A5)+
0000199A  6700 0004                970              BEQ     MEMNEXT
0000199E  60F6                     971              BRA     FINDEND2
000019A0  538D                     972  MEMNEXT:    SUB.L   #1,A5   ;off by one error
000019A2  4EB9 0000249C            973              JSR     ASCII_ADDRESS
000019A8  2C45                     974              MOVE.L  D5,A6   ;put 1st address in A6
000019AA  244C                     975              MOVE.L  A4,A2
000019AC  264D                     976              MOVE.L  A5,A3
000019AE  4EB9 0000249C            977              JSR ASCII_ADDRESS
000019B4  2A45                     978              MOVE.L  D5,A5   ;second address in A5
000019B6  204E                     979              MOVE.L  A6,A0   ;for second run through
000019B8  224D                     980              MOVE.L  A5,A1   ;see above comment
000019BA  D3FC 00000010            981              ADD.L   #16,A1 ;16 byte offset
000019C0  48E7 0040                982              MOVEM.L A1,-(SP)
000019C4  BBCE                     983  DISPLOOP:   CMP.L   A6,A5
000019C6  6D00 0034                984              BLT     SECONDLOOP
000019CA  260E                     985              MOVE.L  A6,D3
000019CC  4EB9 000024DC            986              JSR     HEXTOASCII
000019D2  97CA                     987              SUB.L   A2,A3
000019D4  220B                     988              MOVE.L  A3,D1   ;number of ascii values to display
000019D6  224A                     989              MOVE.L  A2,A1
000019D8  7001                     990              MOVE.L  #1,D0
000019DA  4E4F                     991              TRAP    #15
000019DC  43F8 36C8                992              LEA     SPACE,A1
000019E0  7201                     993              MOVE.L #1,D1
000019E2  4E4F                     994              TRAP    #15
000019E4  4283                     995              CLR.L   D3
000019E6  1616                     996              MOVE.B  (A6),D3
000019E8  4EB9 000024DC            997              JSR     HEXTOASCII
000019EE  97CA                     998              SUB.L   A2,A3
000019F0  220B                     999              MOVE.L  A3,D1
000019F2  224A                    1000              MOVE.L  A2,A1
000019F4  7000                    1001              MOVE.L  #0,D0
000019F6  4E4F                    1002              TRAP    #15
000019F8  528E                    1003              ADD.L   #1,A6
000019FA  60C8                    1004              BRA     DISPLOOP
000019FC                          1005              
000019FC                          1006  SECONDLOOP: 
000019FC  103C 0000               1007              MOVE.B  #0,D0
00001A00  123C 0000               1008              MOVE.B  #0,D1
00001A04  4E4F                    1009              TRAP    #15
00001A06  4CDF 0200               1010              MOVEM.L (SP)+,A1
00001A0A  2C48                    1011              MOVE.L  A0,A6   ;reinit
00001A0C  2A49                    1012              MOVE.L  A1,A5
00001A0E  5386                    1013              SUBI.L  #1,D6
00001A10  BCBC 00000000           1014              CMP.L   #$0,D6
00001A16  67AC                    1015              BEQ     DISPLOOP
00001A18  598F                    1016              SUB.L   #4,SP   ;off by long error on stack
00001A1A  6000 F682               1017              BRA     RESTORE
00001A1E                          1018              
00001A1E                          1019  *--------------------------------------------------------------------------------------*
00001A1E                          1020  
00001A1E  45F8 3000               1021  HXDC:   LEA BUFFER,A2   ;load buffer
00001A22  5A8A                    1022          ADD.L   #5,A2   ; start of number
00001A24  264A                    1023          MOVE.L  A2,A3   ;set up end pointer
00001A26  7201                    1024          MOVE.L  #1,D1   ;set up 16's place
00001A28  4282                    1025          CLR.L   D2      ;clear total
00001A2A  4283                    1026          CLR.L   D3      ;temp holder for number
00001A2C  4286                    1027          CLR.L   D6      ;Final Value in BCD
00001A2E  283C 00002710           1028          MOVE.L  #10000,D4    ;maximum 10's place of converted number
00001A34  7A10                    1029          MOVE.L  #16,D5      ;Max number of rotates needed
00001A36  4BF8 3050               1030          LEA OUTPUTBUFF,A5
00001A3A  49F8 3050               1031          LEA OUTPUTBUFF,A4   ;set up start pointer
00001A3E                          1032  FINDLASTNUM:    
00001A3E  0C1B 0000               1033          CMP.B #$00,(A3)+
00001A42  6700 0004               1034          BEQ     CONVERTMINUS1
00001A46  60F6                    1035          BRA     FINDLASTNUM
00001A48                          1036  CONVERTMINUS1:   
00001A48  538B                    1037               SUB.L   #1,A3 ; cure off by 1 error
00001A4A                          1038  CONVERT:
00001A4A  538B                    1039              SUB.L   #1,A3
00001A4C  B4CB                    1040              CMP   A3,A2
00001A4E  6E00 0028               1041              BGT   ENDCONVERT
00001A52  0C13 0040               1042              CMP.B   #$40,(A3)
00001A56  6E00 000A               1043              BGT     HIGHHEX
00001A5A  0413 0030               1044              SUBI.B  #$30,(A3)   ;get hex value
00001A5E  6000 0006               1045              BRA     COMPUTATION
00001A62  0413 0037               1046  HIGHHEX:     SUBI.B  #$37,(A3)  ;get hex value
00001A66                          1047  COMPUTATION:
00001A66  1613                    1048              MOVE.B  (A3),D3 
00001A68  C6C1                    1049              MULU    D1,D3   ;get 16's place
00001A6A                          1050             ; DIVU    #16,D3  ;get rid of off by 1 exponent error
00001A6A  C2FC 0010               1051              MULU    #16,D1  ;inc 16's place counter
00001A6E  1883                    1052              MOVE.B  D3,(A4)
00001A70  538C                    1053              SUB.L   #1,A4
00001A72  D483                    1054              ADD.L   D3,D2   ;store it in total for debugging 
00001A74  4283                    1055              CLR.L   D3      ;get rid of any numbers in there   
00001A76  60D2                    1056              BRA     CONVERT     
00001A78                          1057  ENDCONVERT:                  ;must convert back to ascii for display
00001A78  4283                    1058              CLR.L   D3      ;Cleared for workability
00001A7A  84C4                    1059              DIVU    D4,D2   ;get 10's place digit
00001A7C  3602                    1060              MOVE.W  D2,D3   ;extract 10's place digit to D3
00001A7E  EBBB                    1061              ROL.L   D5,D3   ;put it in its place
00001A80  4242                    1062              CLR.W   D2      ;get rid of whole number
00001A82  4842                    1063              SWAP    D2      ;keep remainder
00001A84  5985                    1064              SUBI.L  #4,D5   ;dec rotate counter
00001A86  DC83                    1065              ADD.L   D3,D6   ;put it into it's place
00001A88  88FC 000A               1066              DIVU    #10,D4  ;go down a 10's place
00001A8C  B87C 0000               1067              CMP.W   #0,D4   ;are we done
00001A90  6700 0004               1068              BEQ     OUTPUTNUM
00001A94  60E2                    1069              BRA     ENDCONVERT
00001A96                          1070              
00001A96                          1071  OUTPUTNUM:
00001A96  2606                    1072             MOVE.L   D6,D3   ;put into register for conversion to ASCII
00001A98  4EB9 000024DC           1073             JSR      HEXTOASCII
00001A9E  224A                    1074             MOVEA.L  A2,A1   ;get start of number
00001AA0  96CA                    1075             SUBA     A2,A3   ;get how many bytes to output
00001AA2  220B                    1076             MOVE.L   A3,D1   ;for Trap call
00001AA4  7000                    1077             MOVE.L   #0,D0   
00001AA6  4E4F                    1078             TRAP     #15
00001AA8                          1079             
00001AA8  6000 F5F4               1080             BRA RESTORE
00001AAC                          1081  
00001AAC                          1082  *--------------------------------------------------------------------------------------*
00001AAC                          1083  
00001AAC  5289                    1084  SORTW:  ADD.L   #1,A1       ;increment to check for semicolon/dash
00001AAE  0C11 002D               1085          CMP.B   #$2D,(A1)   ;check for default
00001AB2  6700 007C               1086          BEQ     DESCEND
00001AB6  0C19 003B               1087          CMP.B   #$3B,(A1)+
00001ABA  6600 0994               1088          BNE     ERRORSR
00001ABE  0C11 0041               1089          CMP.B   #$41,(A1)   ;is it ascending?
00001AC2  6700 000E               1090          BEQ     ASCEND
00001AC6  0C11 0044               1091          CMP.B   #$44,(A1)   ;or descending?
00001ACA  6600 0984               1092          BNE     ERRORSR
00001ACE  6000 0060               1093          BRA     DESCEND
00001AD2                          1094          
00001AD2                          1095  ASCEND:
00001AD2  5289                    1096         ADD.L    #1,A1   ;inc
00001AD4  0C11 0020               1097         CMP.B    #$20,(A1)   ;check space
00001AD8  6600 0976               1098         BNE      ERRORSR
00001ADC  5289                    1099         ADD.L    #1,A1   ;start of 1st address
00001ADE  2449                    1100         MOVE.L   A1,A2
00001AE0  264A                    1101         MOVE.L   A2,A3
00001AE2                          1102  AGETFIRSTADDRESS:
00001AE2  0C13 0000               1103         CMP.B    #$00,(A3)
00001AE6  6700 0968               1104         BEQ      ERRORSR     ;incorrect syntax
00001AEA  0C1B 0020               1105         CMP.B    #$20,(A3)+  ;trying to find the end
00001AEE  6700 0004               1106         BEQ      AFADDCONV
00001AF2  60EE                    1107         BRA      AGETFIRSTADDRESS
00001AF4                          1108  AFADDCONV:
00001AF4  538B                    1109         SUB.L    #1,A3   ;off by one error
00001AF6  4EB9 0000249C           1110         JSR ASCII_ADDRESS    ;D5 now has that address 
00001AFC  2845                    1111         MOVE.L D5,A4
00001AFE  528B                    1112         ADD.L    #1,A3   ;start of second address
00001B00  244B                    1113         MOVE.L   A3,A2   ;setup for second address
00001B02                          1114  AGETSECADDRESS:
00001B02  0C1B 0000               1115         CMP.B    #$00,(A3)+  ;trying to find the end
00001B06  6700 0004               1116         BEQ      ASADDCONV
00001B0A  60F6                    1117         BRA      AGETSECADDRESS
00001B0C                          1118  ASADDCONV:
00001B0C  538B                    1119          SUB.L   #1,A3   ;off by one
00001B0E  4EB9 0000249C           1120          JSR     ASCII_ADDRESS
00001B14  2A45                    1121          MOVE.L  D5,A5
00001B16  2C4C                    1122          MOVEA.L  A4,A6  ;CLR A6
00001B18                          1123          
00001B18  284E                    1124  ARESETLOOP: MOVE.L  A6,A4    ;reset to top of loop
00001B1A  B94C                    1125  ACMP:       CMP.W   (A4)+,(A4)+  ;check adjacent mem
00001B1C  630A                    1126              BLS.S   ASWAP    
00001B1E  558C                    1127              SUBQ.L  #2,A4
00001B20  BBCC                    1128              CMP.L   A4,A5   ;done?
00001B22  66F6                    1129              BNE     ACMP     ;nope
00001B24  6000 0068               1130              BRA     DONEASCEND  ;yep
00001B28  2024                    1131  ASWAP:       MOVE.L  -(A4),D0    ;start bubbling 
00001B2A  4840                    1132              SWAP.W  D0
00001B2C  2880                    1133              MOVE.L  D0,(A4)
00001B2E  60E8                    1134              BRA     ARESETLOOP
00001B30                          1135  
00001B30                          1136  
00001B30                          1137  DESCEND:
00001B30  5289                    1138         ADD.L    #1,A1   ;inc
00001B32  0C11 0020               1139         CMP.B    #$20,(A1)   ;check space
00001B36  6600 0918               1140         BNE      ERRORSR
00001B3A  5289                    1141         ADD.L    #1,A1   ;start of 1st address
00001B3C  2449                    1142         MOVE.L   A1,A2
00001B3E  264A                    1143         MOVE.L   A2,A3
00001B40                          1144  DGETFIRSTADDRESS:
00001B40  0C13 0000               1145         CMP.B    #$00,(A3)
00001B44  6700 090A               1146         BEQ      ERRORSR     ;incorrect syntax
00001B48  0C1B 0020               1147         CMP.B    #$20,(A3)+  ;trying to find the end
00001B4C  6700 0004               1148         BEQ      DFADDCONV
00001B50  60EE                    1149         BRA      DGETFIRSTADDRESS
00001B52                          1150  DFADDCONV:
00001B52  538B                    1151         SUB.L    #1,A3   ;off by one error
00001B54  4EB9 0000249C           1152         JSR ASCII_ADDRESS    ;D5 now has that address 
00001B5A  2845                    1153         MOVE.L D5,A4
00001B5C  528B                    1154         ADD.L    #1,A3   ;start of second address
00001B5E  244B                    1155         MOVE.L   A3,A2   ;setup for second address
00001B60                          1156  DGETSECADDRESS:
00001B60  0C1B 0000               1157         CMP.B    #$00,(A3)+  ;trying to find the end
00001B64  6700 0004               1158         BEQ      DSADDCONV
00001B68  60F6                    1159         BRA      DGETSECADDRESS
00001B6A                          1160  DSADDCONV:
00001B6A  538B                    1161          SUB.L   #1,A3   ;off by one
00001B6C  4EB9 0000249C           1162          JSR     ASCII_ADDRESS
00001B72  2A45                    1163          MOVE.L  D5,A5
00001B74  2C4C                    1164          MOVEA.L  A4,A6  ;CLR A6
00001B76                          1165          
00001B76  284E                    1166  DRESETLOOP: MOVE.L  A6,A4    ;reset to top of loop
00001B78  B94C                    1167  DCMP:       CMP.W   (A4)+,(A4)+  ;check adjacent mem
00001B7A  620A                    1168              BHI.S   DSWAP    
00001B7C  558C                    1169              SUBQ.L  #2,A4
00001B7E  BBCC                    1170              CMP.L   A4,A5   ;done?
00001B80  66F6                    1171              BNE     DCMP     ;nope
00001B82  6000 000A               1172              BRA     DONEDESCEND  ;yep
00001B86  2024                    1173  DSWAP:       MOVE.L  -(A4),D0    ;start bubbling 
00001B88  4840                    1174              SWAP.W  D0
00001B8A  2880                    1175              MOVE.L  D0,(A4)
00001B8C  60E8                    1176              BRA     DRESETLOOP
00001B8E                          1177  x
00001B8E                          1178  DONEASCEND:
00001B8E                          1179  DONEDESCEND:
00001B8E  6000 F50E               1180              BRA RESTORE
00001B92                          1181  
00001B92                          1182  *--------------------------------------------------------------------------------------*
00001B92                          1183  
00001B92  4282                    1184  MM:    CLR.L    D2      ;used for storing values
00001B94  4286                    1185         CLR.L    D6      
00001B96                          1186  SIZECHECK:  
00001B96  2649                    1187          MOVE.L  A1,A3   ;set up to find end ptr
00001B98                          1188  ENDPTRMM:
00001B98  0C1B 0000               1189          CMP.B   #$00,(A3)+
00001B9C  66FA                    1190          BNE     ENDPTRMM
00001B9E  538B                    1191          SUB.L   #1,A3   ;off by one error
00001BA0  5289                    1192          ADD.L   #1,A1   ;inc pointer to start of specifier
00001BA2  0C11 002D               1193          CMP.B   #$2D,(A1)   ;check for default
00001BA6  6700 0020               1194          BEQ     DEFAULT        
00001BAA  0C11 003B               1195          CMP.B   #$3B,(A1)
00001BAE  6600 08A0               1196          BNE     ERRORSR
00001BB2  5289                    1197          ADD.L   #1,A1   ;find out which size
00001BB4  0C11 0057               1198          CMP.B   #$57,(A1) ; word
00001BB8  6700 00A8               1199          BEQ     WORD
00001BBC  0C11 004C               1200          CMP.B   #$4C,(A1)   ;long
00001BC0  6700 0162               1201          BEQ     LONG
00001BC4  6000 088A               1202          BRA     ERRORSR
00001BC8                          1203  
00001BC8                          1204  ***************************************************
00001BC8                          1205  
00001BC8                          1206  DEFAULT:
00001BC8                          1207          
00001BC8  5489                    1208          ADD.L   #2,A1       ;set up for subroutine
00001BCA  3449                    1209          MOVE    A1,A2       ;set up for subroutine
00001BCC  48E7 4270               1210          MOVEM.L D1/D6/A1-A3,-(SP)
00001BD0  4EB9 0000249C           1211          JSR     ASCII_ADDRESS
00001BD6  4CDF 0E42               1212          MOVEM.L (SP)+,D1/D6/A1-A3
00001BDA  2845                    1213          MOVE.L  D5,A4       ;set up address to modify
00001BDC                          1214         
00001BDC                          1215  MODIFYLOOP:
00001BDC                          1216          *-------Display Memory First-----*
00001BDC  260C                    1217          MOVE.L  A4,D3       ;set up for subroutine
00001BDE  4EB9 000024DC           1218          JSR     HEXTOASCII  ;convert new address to ascii for output
00001BE4  96CA                    1219          SUBA    A2,A3       ;get num of bytes to produce
00001BE6  7001                    1220          MOVE.L  #1,D0
00001BE8  220B                    1221          MOVE.L  A3,D1
00001BEA  224A                    1222          MOVE.L  A2,A1
00001BEC  4E4F                    1223          TRAP    #15
00001BEE                          1224          
00001BEE                          1225          *add colon to denote containing data*
00001BEE  12BC 003A               1226          MOVE.B  #$3A,(A1)
00001BF2  7201                    1227          MOVE.L  #1,D1   ;display only the colon
00001BF4  7001                    1228          MOVE.L  #1,D0
00001BF6  4E4F                    1229          TRAP    #15
00001BF8                          1230          
00001BF8  1614                    1231          MOVE.B  (A4),D3
00001BFA  4EB9 000024DC           1232          JSR     HEXTOASCII
00001C00  7202                    1233          MOVE.L  #2,D1
00001C02  224A                    1234          MOVE.L  A2,A1
00001C04  103C 0001               1235          MOVE.B  #1,D0
00001C08  4E4F                    1236          TRAP    #15
00001C0A                          1237          
00001C0A  12BC 0020               1238          MOVE.B  #$20,(A1)
00001C0E  7201                    1239          MOVE.L  #1,D1   ;space between held data and input
00001C10  7001                    1240          MOVE.L  #1,D0
00001C12  4E4F                    1241          TRAP    #15
00001C14                          1242  
00001C14                          1243          
00001C14                          1244          *-----Enter Input-------*
00001C14  4283                    1245          CLR.L   D3
00001C16  7C04                    1246          MOVE.L  #4,D6
00001C18  43F8 3000               1247          LEA     BUFFER,A1   ;set up storage for command
00001C1C  103C 0002               1248          MOVE.B  #2,D0       ;load input trap call
00001C20  4E4F                    1249          TRAP    #15
00001C22  0C11 002E               1250          CMP.B   #$2E,(A1)
00001C26  6700 01E2               1251          BEQ     ENDLP
00001C2A  0C11 0000               1252          CMP.B   #$00,(A1)
00001C2E  6700 002C               1253          BEQ     ENTER
00001C32                          1254          
00001C32                          1255  PARSELOOP:
00001C32  0C11 0000               1256          CMP.B   #$00,(A1)
00001C36  6700 0022               1257          BEQ     ENDPARSE        
00001C3A  0C11 0040               1258          CMP.B   #$40,(A1)
00001C3E  6E00 000A               1259          BGT     HIGHHEXMM
00001C42  0411 0030               1260          SUBI.B  #$30,(A1)   ;get hex value
00001C46  6000 0006               1261          BRA     NEXTMMSTEP
00001C4A  0411 0037               1262  HIGHHEXMM: SUBI.B  #$37,(A1)  ;get hex value
00001C4E                          1263  NEXTMMSTEP:
00001C4E  1411                    1264          MOVE.B  (A1),D2
00001C50  EDBA                    1265          ROL.L   D6,D2
00001C52  5986                    1266          SUBI.L  #4,D6
00001C54  5289                    1267          ADD.L   #1,A1
00001C56  D602                    1268          ADD.B   D2,D3   ;total byte stored in D3
00001C58  60D8                    1269          BRA     PARSELOOP
00001C5A                          1270  ENDPARSE:
00001C5A  1883                    1271          MOVE.B  D3,(A4)   ;commit memory change 
00001C5C  528C                    1272  ENTER:  ADD.L   #1,A4   ;increment address
00001C5E  6000 FF7C               1273          BRA     MODIFYLOOP
00001C62                          1274          
00001C62                          1275  ***************************************************
00001C62                          1276  
00001C62                          1277  WORD:
00001C62                          1278              
00001C62  5489                    1279          ADD.L   #2,A1       ;set up for subroutine
00001C64  3449                    1280          MOVE    A1,A2       ;set up for subroutine
00001C66  48E7 4270               1281          MOVEM.L D1/D6/A1-A3,-(SP)
00001C6A  4EB9 0000249C           1282          JSR     ASCII_ADDRESS
00001C70  4CDF 0E42               1283          MOVEM.L (SP)+,D1/D6/A1-A3
00001C74  2845                    1284          MOVE.L  D5,A4       ;set up address to modify
00001C76                          1285         
00001C76                          1286  MODIFYLOOPW:
00001C76                          1287          *-------Display Memory First-----*
00001C76  200C                    1288          MOVE.L  A4,D0
00001C78  80FC 0002               1289          DIVU    #2,D0
00001C7C  4840                    1290          SWAP    D0      ;check if it's an odd address
00001C7E  B07C 0000               1291          CMP.W   #$00,D0
00001C82  6600 07CC               1292          BNE     ERRORSR
00001C86  260C                    1293          MOVE.L  A4,D3       ;set up for subroutine
00001C88  2A4C                    1294          MOVE.L  A4,A5       ;next byte of memory may not be needed
00001C8A  528D                    1295          ADD.L   #1,A5
00001C8C  4EB9 000024DC           1296          JSR     HEXTOASCII  ;convert new address to ascii for output
00001C92  96CA                    1297          SUBA    A2,A3       ;get num of bytes to produce
00001C94  7001                    1298          MOVE.L  #1,D0
00001C96  220B                    1299          MOVE.L  A3,D1
00001C98  224A                    1300          MOVE.L  A2,A1
00001C9A  4E4F                    1301          TRAP    #15
00001C9C                          1302          
00001C9C                          1303          *add colon to denote containing data*
00001C9C  12BC 003A               1304          MOVE.B  #$3A,(A1)
00001CA0  7201                    1305          MOVE.L  #1,D1   ;display only the colon
00001CA2  7001                    1306          MOVE.L  #1,D0
00001CA4  4E4F                    1307          TRAP    #15
00001CA6                          1308          
00001CA6  1614                    1309          MOVE.B  (A4),D3
00001CA8  4EB9 000024DC           1310          JSR     HEXTOASCII
00001CAE  7202                    1311          MOVE.L  #2,D1
00001CB0  224A                    1312          MOVE.L  A2,A1
00001CB2  103C 0001               1313          MOVE.B  #1,D0
00001CB6  4E4F                    1314          TRAP    #15
00001CB8                          1315          
00001CB8  1615                    1316          MOVE.B  (A5),D3
00001CBA  4EB9 000024DC           1317          JSR     HEXTOASCII
00001CC0  7202                    1318          MOVE.L  #2,D1
00001CC2  224A                    1319          MOVE.L  A2,A1
00001CC4  103C 0001               1320          MOVE.B  #1,D0
00001CC8  4E4F                    1321          TRAP    #15
00001CCA                          1322  
00001CCA                          1323          
00001CCA  12BC 0020               1324          MOVE.B  #$20,(A1)
00001CCE  7201                    1325          MOVE.L  #1,D1   ;space between held data and input
00001CD0  7001                    1326          MOVE.L  #1,D0
00001CD2  4E4F                    1327          TRAP    #15
00001CD4                          1328  
00001CD4                          1329          
00001CD4                          1330          *-----Enter Input-------*
00001CD4  4283                    1331          CLR.L   D3
00001CD6  7C0C                    1332          MOVE.L  #12,D6
00001CD8  43F8 3000               1333          LEA     BUFFER,A1   ;set up storage for command
00001CDC  103C 0002               1334          MOVE.B  #2,D0       ;load input trap call
00001CE0  4E4F                    1335          TRAP    #15
00001CE2  0C11 002E               1336          CMP.B   #$2E,(A1)
00001CE6  6700 0122               1337          BEQ     ENDLP
00001CEA  0C11 0000               1338          CMP.B   #$00,(A1)
00001CEE  6700 002E               1339          BEQ     ENTERW
00001CF2                          1340          
00001CF2                          1341  PARSELOOPW:
00001CF2  0C11 0000               1342          CMP.B   #$00,(A1)
00001CF6  6700 0024               1343          BEQ     ENDPARSEW        
00001CFA  0C11 0040               1344          CMP.B   #$40,(A1)
00001CFE  6E00 000A               1345          BGT     HIGHHEXMMW
00001D02  0411 0030               1346          SUBI.B  #$30,(A1)   ;get hex value
00001D06  6000 0006               1347          BRA     NEXTMMSTEPW
00001D0A  0411 0037               1348  HIGHHEXMMW: SUBI.B  #$37,(A1)  ;get hex value
00001D0E                          1349  NEXTMMSTEPW:
00001D0E  1411                    1350          MOVE.B  (A1),D2
00001D10  EDBA                    1351          ROL.L   D6,D2
00001D12  5986                    1352          SUBI.L  #4,D6
00001D14  5289                    1353          ADD.L   #1,A1
00001D16  D682                    1354          ADD.L   D2,D3   ;total byte stored in D3
00001D18  4282                    1355          CLR.L   D2      ;clear for next rotate
00001D1A  60D6                    1356          BRA     PARSELOOPW
00001D1C                          1357  ENDPARSEW:
00001D1C                          1358          
00001D1C  3883                    1359          MOVE.W  D3,(A4)   ;commit memory change 
00001D1E  548C                    1360  ENTERW:  ADD.L   #2,A4   ;increment address
00001D20  6000 FF54               1361          BRA     MODIFYLOOPW
00001D24                          1362  
00001D24                          1363  ***************************************************
00001D24                          1364  
00001D24                          1365  LONG:  
00001D24  5489                    1366          ADD.L   #2,A1       ;set up for subroutine
00001D26  3449                    1367          MOVE    A1,A2       ;set up for subroutine
00001D28  48E7 4270               1368          MOVEM.L D1/D6/A1-A3,-(SP)
00001D2C  4EB9 0000249C           1369          JSR     ASCII_ADDRESS
00001D32  4CDF 0E42               1370          MOVEM.L (SP)+,D1/D6/A1-A3
00001D36  2845                    1371          MOVE.L  D5,A4       ;set up address to modify
00001D38                          1372         
00001D38                          1373  MODIFYLOOPL:
00001D38                          1374          *-------Display Memory First-----*
00001D38  200C                    1375          MOVE.L  A4,D0
00001D3A  80FC 0002               1376          DIVU    #2,D0
00001D3E  4840                    1377          SWAP    D0      ;check if it's an odd address
00001D40  B07C 0000               1378          CMP.W   #$00,D0
00001D44  6600 070A               1379          BNE     ERRORSR
00001D48  260C                    1380          MOVE.L  A4,D3       ;set up for subroutine
00001D4A  2A4C                    1381          MOVE.L  A4,A5       ;next byte of memory may not be needed
00001D4C  528D                    1382          ADD.L   #1,A5
00001D4E  4EB9 000024DC           1383          JSR     HEXTOASCII  ;convert new address to ascii for output
00001D54  96CA                    1384          SUBA    A2,A3       ;get num of bytes to produce
00001D56  7001                    1385          MOVE.L  #1,D0
00001D58  220B                    1386          MOVE.L  A3,D1
00001D5A  224A                    1387          MOVE.L  A2,A1
00001D5C  4E4F                    1388          TRAP    #15
00001D5E                          1389          
00001D5E                          1390          *add colon to denote containing data*
00001D5E  12BC 003A               1391          MOVE.B  #$3A,(A1)
00001D62  7201                    1392          MOVE.L  #1,D1   ;display only the colon
00001D64  7001                    1393          MOVE.L  #1,D0
00001D66  4E4F                    1394          TRAP    #15
00001D68                          1395          
00001D68  1614                    1396          MOVE.B  (A4),D3
00001D6A  4EB9 000024DC           1397          JSR     HEXTOASCII
00001D70  7202                    1398          MOVE.L  #2,D1
00001D72  224A                    1399          MOVE.L  A2,A1
00001D74  103C 0001               1400          MOVE.B  #1,D0
00001D78  4E4F                    1401          TRAP    #15
00001D7A                          1402          
00001D7A  161D                    1403          MOVE.B  (A5)+,D3
00001D7C  4EB9 000024DC           1404          JSR     HEXTOASCII
00001D82  7202                    1405          MOVE.L  #2,D1
00001D84  224A                    1406          MOVE.L  A2,A1
00001D86  103C 0001               1407          MOVE.B  #1,D0
00001D8A  4E4F                    1408          TRAP    #15
00001D8C                          1409          
00001D8C  161D                    1410          MOVE.B  (A5)+,D3
00001D8E  4EB9 000024DC           1411          JSR     HEXTOASCII
00001D94  7202                    1412          MOVE.L  #2,D1
00001D96  224A                    1413          MOVE.L  A2,A1
00001D98  103C 0001               1414          MOVE.B  #1,D0
00001D9C  4E4F                    1415          TRAP    #15
00001D9E  161D                    1416          MOVE.B  (A5)+,D3
00001DA0  4EB9 000024DC           1417          JSR     HEXTOASCII
00001DA6  7202                    1418          MOVE.L  #2,D1
00001DA8  224A                    1419          MOVE.L  A2,A1
00001DAA  103C 0001               1420          MOVE.B  #1,D0
00001DAE  4E4F                    1421          TRAP    #15
00001DB0                          1422     
00001DB0  12BC 0020               1423          MOVE.B  #$20,(A1)
00001DB4  7201                    1424          MOVE.L  #1,D1   ;space between held data and input
00001DB6  7001                    1425          MOVE.L  #1,D0
00001DB8  4E4F                    1426          TRAP    #15
00001DBA                          1427  
00001DBA                          1428          
00001DBA                          1429          *-----Enter Input-------*
00001DBA  4283                    1430          CLR.L   D3
00001DBC  7C1C                    1431          MOVE.L  #28,D6
00001DBE  43F8 3000               1432          LEA     BUFFER,A1   ;set up storage for command
00001DC2  103C 0002               1433          MOVE.B  #2,D0       ;load input trap call
00001DC6  4E4F                    1434          TRAP    #15
00001DC8  0C11 002E               1435          CMP.B   #$2E,(A1)
00001DCC  6700 003C               1436          BEQ     ENDLP
00001DD0  0C11 0000               1437          CMP.B   #$00,(A1)
00001DD4  6700 002E               1438          BEQ     ENTERL
00001DD8                          1439          
00001DD8                          1440  PARSELOOPL:
00001DD8  0C11 0000               1441          CMP.B   #$00,(A1)
00001DDC  6700 0024               1442          BEQ     ENDPARSEL        
00001DE0  0C11 0040               1443          CMP.B   #$40,(A1)
00001DE4  6E00 000A               1444          BGT     HIGHHEXMML
00001DE8  0411 0030               1445          SUBI.B  #$30,(A1)   ;get hex value
00001DEC  6000 0006               1446          BRA     NEXTMMSTEPL
00001DF0  0411 0037               1447  HIGHHEXMML: SUBI.B  #$37,(A1)  ;get hex value
00001DF4                          1448  NEXTMMSTEPL:
00001DF4  1411                    1449          MOVE.B  (A1),D2
00001DF6  EDBA                    1450          ROL.L   D6,D2
00001DF8  5986                    1451          SUBI.L  #4,D6
00001DFA  5289                    1452          ADD.L   #1,A1
00001DFC  D682                    1453          ADD.L   D2,D3   ;total byte stored in D3
00001DFE  4282                    1454          CLR.L   D2      ;clear for next rotate
00001E00  60D6                    1455          BRA     PARSELOOPL
00001E02                          1456  ENDPARSEL:
00001E02  2883                    1457          MOVE.L  D3,(A4)   ;commit memory change 
00001E04  588C                    1458  ENTERL:  ADD.L   #4,A4   ;increment address
00001E06  6000 FF30               1459          BRA     MODIFYLOOPL
00001E0A                          1460  
00001E0A                          1461  
00001E0A  6000 F292               1462  ENDLP:  BRA RESTORE
00001E0E                          1463          
00001E0E                          1464          
00001E0E                          1465  *--------------------------------------------------------------------------------------*
00001E0E                          1466  
00001E0E                          1467  BF:    
00001E0E  5289                    1468         ADD.L    #1,A1   ;first byte of data
00001E10  2649                    1469         MOVE.L   A1,A3   ;for end ptr
00001E12                          1470  BFGETENDDATA:
00001E12  0C1B 0020               1471          CMP.B   #$20,(A3)+
00001E16  6700 0004               1472          BEQ     BFNEXTADDR
00001E1A  60F6                    1473          BRA     BFGETENDDATA
00001E1C                          1474  BFNEXTADDR:
00001E1C  2449                    1475          MOVE.L  A1,A2   ;for subroutine
00001E1E  538B                    1476          SUB.L   #1,A3   ;off by one error
00001E20  4EB9 0000249C           1477          JSR     ASCII_ADDRESS
00001E26  2F05                    1478          MOVE.L  D5,-(SP)    ;save data on the stack
00001E28                          1479          
00001E28  528B                    1480          ADD.L   #1,A3   ;inc end ptr to first byte of address
00001E2A  244B                    1481          MOVE.L  A3,A2   ;set start ptr
00001E2C                          1482  BFGETENDADDRONE:
00001E2C  0C1B 0020               1483          CMP.B   #$20,(A3)+
00001E30  6700 0004               1484          BEQ     BFNEXTADDRTWO
00001E34  60F6                    1485          BRA     BFGETENDADDRONE
00001E36                          1486          
00001E36                          1487  BFNEXTADDRTWO:
00001E36  538B                    1488          SUB.L   #1,A3   ;off by one error
00001E38  4EB9 0000249C           1489          JSR     ASCII_ADDRESS   ;convert address to hex
00001E3E  2A45                    1490          MOVE.L  D5,A5       ;store address 1 in A5
00001E40  8AFC 0002               1491          DIVU    #2,D5
00001E44  4845                    1492          SWAP    D5
00001E46  BA7C 0000               1493          CMP.W   #$00,D5
00001E4A  6600 0604               1494          BNE     ERRORSR
00001E4E                          1495          
00001E4E  528B                    1496          ADD.L   #1,A3   ;inc end ptr to first byte of address
00001E50  244B                    1497          MOVE.L  A3,A2   ;set start ptr
00001E52                          1498  BFGETLASTEND:
00001E52  0C1B 0000               1499          CMP.B   #$00,(A3)+
00001E56  6700 0004               1500          BEQ     STOREDATA
00001E5A  60F6                    1501          BRA     BFGETLASTEND
00001E5C                          1502          
00001E5C                          1503  STOREDATA:
00001E5C  538B                    1504          SUB.L   #1,A3   ;off by one error
00001E5E  4EB9 0000249C           1505          JSR     ASCII_ADDRESS
00001E64  2C45                    1506          MOVE.L  D5,A6   ;end address in A6
00001E66  8AFC 0002               1507          DIVU    #2,D5
00001E6A  4845                    1508          SWAP    D5
00001E6C  BA7C 0000               1509          CMP.W   #$00,D5
00001E70  6600 05DE               1510          BNE     ERRORSR
00001E74  2A1F                    1511          MOVE.L  (SP)+,D5
00001E76                          1512          
00001E76                          1513  DATALOOP:
00001E76  BDCD                    1514          CMP.L   A5,A6
00001E78  6D00 0006               1515          BLT     ENDBF
00001E7C  3AC5                    1516          MOVE.W  D5,(A5)+
00001E7E  60F6                    1517          BRA     DATALOOP
00001E80                          1518  
00001E80  6000 F21C               1519  ENDBF:  BRA RESTORE
00001E84                          1520  *--------------------------------------------------------------------------------------*
00001E84                          1521  
00001E84  5289                    1522  BMOV:   ADD.L   #1,A1   ;get to start of first address
00001E86  2449                    1523          MOVE.L  A1,A2   ;set up start ptr
00001E88  264A                    1524          MOVE.L  A2,A3   ;set up end ptr
00001E8A                          1525          
00001E8A                          1526  FIRSTADDRESS:
00001E8A  0C1B 0020               1527          CMP.B #$20,(A3)+
00001E8E  6700 0004               1528          BEQ     COMPUTEFIRSTADD
00001E92  60F6                    1529          BRA     FIRSTADDRESS
00001E94                          1530          
00001E94                          1531  COMPUTEFIRSTADD:
00001E94  538B                    1532          SUB.L   #1,A3   ;off by one error
00001E96  4EB9 0000249C           1533          JSR     ASCII_ADDRESS
00001E9C  2045                    1534          MOVE.L  D5,A0   ; save 1st address
00001E9E                          1535          
00001E9E  528B                    1536          ADD.L   #1,A3
00001EA0  244B                    1537          MOVE.L  A3,A2
00001EA2                          1538  SECONDADDRESS:
00001EA2  0C1B 0020               1539          CMP.B   #$20,(A3)+
00001EA6  6700 0004               1540          BEQ     COMPUTESECONDADDRESS
00001EAA  60F6                    1541          BRA     SECONDADDRESS
00001EAC                          1542          
00001EAC                          1543  COMPUTESECONDADDRESS:
00001EAC  538B                    1544          SUB.L   #1,A3   ;off by one error
00001EAE  4EB9 0000249C           1545          JSR     ASCII_ADDRESS
00001EB4  2845                    1546          MOVE.L  D5,A4   ;save 2nd address
00001EB6                          1547  
00001EB6  528B                    1548          ADD.L   #1,A3
00001EB8  244B                    1549          MOVE.L  A3,A2
00001EBA                          1550  THIRDADDRESS:
00001EBA  0C1B 0020               1551          CMP.B   #$20,(A3)+
00001EBE  6700 0004               1552          BEQ     COMPUTETHIRDADDRESS
00001EC2  60F6                    1553          BRA     THIRDADDRESS
00001EC4                          1554          
00001EC4                          1555  COMPUTETHIRDADDRESS:
00001EC4  538B                    1556          SUB.L   #1,A3
00001EC6  4EB9 0000249C           1557          JSR     ASCII_ADDRESS
00001ECC  2A45                    1558          MOVE.L  D5,A5   ;save 3rd address
00001ECE                          1559          
00001ECE  528B                    1560          ADD.L   #1,A3
00001ED0  244B                    1561          MOVE.L  A3,A2
00001ED2                          1562  FOURTHADDRESS:
00001ED2  0C1B 0000               1563          CMP.B   #$00,(A3)+
00001ED6  6700 0004               1564          BEQ     COMPUTEFOURTHADDRESS
00001EDA  60F6                    1565          BRA     FOURTHADDRESS
00001EDC                          1566          
00001EDC                          1567  COMPUTEFOURTHADDRESS:
00001EDC  538B                    1568          SUB.L   #1,A3
00001EDE  4EB9 0000249C           1569          JSR     ASCII_ADDRESS
00001EE4  2C45                    1570          MOVE.L  D5,A6   ;save 3rd address
00001EE6                          1571          
00001EE6                          1572          
00001EE6                          1573  
00001EE6                          1574          *Check for matching dimensions*
00001EE6  2008                    1575          MOVE.L  A0,D0
00001EE8  220C                    1576          MOVE.L  A4,D1
00001EEA  2A0D                    1577          MOVE.L  A5,D5
00001EEC  2C0E                    1578          MOVE.L  A6,D6
00001EEE  9280                    1579          SUB.L   D0,D1
00001EF0  9C85                    1580          SUB.L   D5,D6
00001EF2  BC81                    1581          CMP.L   D1,D6
00001EF4  6600 055A               1582          BNE     ERRORSR
00001EF8  B9C8                    1583          CMP.L   A0,A4
00001EFA  6D00 0554               1584          BLT     ERRORSR
00001EFE  BDCD                    1585          CMP.L   A5,A6
00001F00  6D00 054E               1586          BLT     ERRORSR
00001F04                          1587  
00001F04                          1588  DATATRANSFER:
00001F04  B9C8                    1589          CMP.L   A0,A4
00001F06  6D00 0006               1590          BLT     BMOVDONE
00001F0A  1AD8                    1591          MOVE.B  (A0)+,(A5)+
00001F0C  60F6                    1592          BRA     DATATRANSFER
00001F0E                          1593          
00001F0E                          1594  
00001F0E                          1595  
00001F0E                          1596  BMOVDONE:
00001F0E  6000 F18E               1597          BRA RESTORE
00001F12                          1598  
00001F12                          1599  *--------------------------------------------------------------------------------------*
00001F12                          1600  
00001F12                          1601  BTST:   
00001F12  5289                    1602         ADD.L    #1,A1   ;first byte of data
00001F14  2649                    1603         MOVE.L   A1,A3   ;for end ptr
00001F16                          1604  BTSTGETENDDATA:
00001F16  0C1B 0020               1605          CMP.B   #$20,(A3)+
00001F1A  6700 0004               1606          BEQ     BTSTNEXTADDR
00001F1E  60F6                    1607          BRA     BTSTGETENDDATA
00001F20                          1608  BTSTNEXTADDR:
00001F20  2449                    1609          MOVE.L  A1,A2   ;for subroutine
00001F22  538B                    1610          SUB.L   #1,A3   ;off by one error
00001F24  4EB9 0000249C           1611          JSR     ASCII_ADDRESS
00001F2A  2F05                    1612          MOVE.L  D5,-(SP)    ;save data on the stack
00001F2C                          1613          
00001F2C  528B                    1614          ADD.L   #1,A3   ;inc end ptr to first byte of address
00001F2E  244B                    1615          MOVE.L  A3,A2   ;set start ptr
00001F30                          1616  BTSTGETENDADDRONE:
00001F30  0C1B 0020               1617          CMP.B   #$20,(A3)+
00001F34  6700 0004               1618          BEQ     BTSTNEXTADDRTWO
00001F38  60F6                    1619          BRA     BTSTGETENDADDRONE
00001F3A                          1620          
00001F3A                          1621  BTSTNEXTADDRTWO:
00001F3A  538B                    1622          SUB.L   #1,A3   ;off by one error
00001F3C  4EB9 0000249C           1623          JSR     ASCII_ADDRESS   ;convert address to hex
00001F42  2A45                    1624          MOVE.L  D5,A5       ;store address 1 in A5
00001F44  2845                    1625          MOVE.L  D5,A4       ;for second run through
00001F46                          1626                
00001F46  528B                    1627          ADD.L   #1,A3   ;inc end ptr to first byte of address
00001F48  244B                    1628          MOVE.L  A3,A2   ;set start ptr
00001F4A                          1629  BTSTGETLASTEND:
00001F4A  0C1B 0000               1630          CMP.B   #$00,(A3)+
00001F4E  6700 0004               1631          BEQ     STOREDATABTST
00001F52  60F6                    1632          BRA     BTSTGETLASTEND
00001F54                          1633  
00001F54                          1634  
00001F54                          1635  STOREDATABTST:
00001F54  538B                    1636          SUB.L   #1,A3   ;off by one error
00001F56  4EB9 0000249C           1637          JSR     ASCII_ADDRESS
00001F5C  2C45                    1638          MOVE.L  D5,A6   ;end address in A6
00001F5E  2A1F                    1639          MOVE.L  (SP)+,D5
00001F60                          1640          
00001F60                          1641  BTSTDATALOOP:
00001F60  BDCD                    1642          CMP.L   A5,A6
00001F62  6D00 0006               1643          BLT     READ
00001F66  1AC5                    1644          MOVE.B  D5,(A5)+
00001F68  60F6                    1645          BRA     BTSTDATALOOP
00001F6A                          1646  
00001F6A                          1647  
00001F6A                          1648  READ:
00001F6A  BDCC                    1649          CMP.L   A4,A6
00001F6C  6D00 006C               1650          BLT     COMPLETE
00001F70  BA1C                    1651          CMP.B   (A4)+,D5
00001F72  6600 0004               1652          BNE     FAIL
00001F76  60F2                    1653          BRA     READ
00001F78                          1654          
00001F78                          1655  FAIL:
00001F78  43F8 3703               1656          LEA     BTST4,A1
00001F7C  720B                    1657          MOVE.L  #11,D1
00001F7E  7000                    1658          MOVE.L  #0,D0
00001F80  4E4F                    1659          TRAP    #15
00001F82                          1660          
00001F82  43F8 36CC               1661          LEA     BTST1,A1
00001F86  7001                    1662          MOVE.L  #1,D0
00001F88  7214                    1663          MOVE.L  #20,D1
00001F8A  4E4F                    1664          TRAP    #15
00001F8C                          1665          
00001F8C  1605                    1666          MOVE.B  D5,D3   ;for subroutine
00001F8E  4EB9 000024DC           1667          JSR     HEXTOASCII
00001F94  224A                    1668          MOVE.L     A2,A1
00001F96  7000                    1669          MOVE.L  #0,D0
00001F98  97CA                    1670          SUBA.L  A2,A3   ;number of bytes
00001F9A  220B                    1671          MOVE.L  A3,D1
00001F9C  4E4F                    1672          TRAP    #15
00001F9E                          1673          
00001F9E                          1674          
00001F9E  43F8 36E0               1675          LEA     BTST2,A1
00001FA2  7001                    1676          MOVE.L  #1,D0
00001FA4  7211                    1677          MOVE.L  #17,D1
00001FA6  4E4F                    1678          TRAP    #15
00001FA8                          1679          
00001FA8                          1680          
00001FA8  538C                    1681          SUB.L   #1,A4   ;go back to address that failed
00001FAA  1614                    1682          MOVE.B  (A4),D3
00001FAC  4EB9 000024DC           1683          JSR     HEXTOASCII  ;convert for output
00001FB2  224A                    1684          MOVE.L     A2,A1
00001FB4  7000                    1685          MOVE.L  #0,D0
00001FB6  97CA                    1686          SUBA.L  A2,A3   ;number of bytes
00001FB8  220B                    1687          MOVE.L  A3,D1
00001FBA  4E4F                    1688          TRAP    #15
00001FBC                          1689          
00001FBC  43F8 370E               1690          LEA     BTST5,A1
00001FC0  721B                    1691          MOVE.L  #27,D1
00001FC2  103C 0001               1692          MOVE.B  #1,D0
00001FC6  4E4F                    1693          TRAP    #15
00001FC8  260C                    1694          MOVE.L  A4,D3
00001FCA  4EB9 000024DC           1695          JSR     HEXTOASCII
00001FD0  224A                    1696          MOVE.L     A2,A1
00001FD2  7000                    1697          MOVE.L  #0,D0
00001FD4  97CA                    1698          SUBA.L  A2,A3   ;number of bytes
00001FD6  220B                    1699          MOVE.L  A3,D1
00001FD8  4E4F                    1700          TRAP    #15
00001FDA                          1701  
00001FDA                          1702  
00001FDA                          1703          
00001FDA                          1704  COMPLETE:
00001FDA                          1705  
00001FDA  43F8 36F1               1706          LEA     BTST3,A1
00001FDE  7212                    1707          MOVE.L  #18,D1
00001FE0  7000                    1708          MOVE.L  #0,D0
00001FE2  4E4F                    1709          TRAP    #15
00001FE4  6000 F0B8               1710          BRA RESTORE
00001FE8                          1711  
00001FE8                          1712  *--------------------------------------------------------------------------------------*
00001FE8                          1713  
00001FE8                          1714  BSCH:   
00001FE8  5289                    1715          ADD.L   #1,A1   ;start of data
00001FEA  2449                    1716          MOVE.L  A1,A2   ;set up bac ptr
00001FEC                          1717          
00001FEC                          1718  BSCHENDDATA:
00001FEC  0C1A 0020               1719          CMP.B   #$20,(A2)+
00001FF0  6700 0004               1720          BEQ     BSCHFIRSTADD
00001FF4  60F6                    1721          BRA     BSCHENDDATA
00001FF6                          1722  
00001FF6                          1723  
00001FF6                          1724  BSCHFIRSTADD:
00001FF6  538A                    1725          SUB.L   #1,A2
00001FF8  264A                    1726          MOVE.L  A2,A3
00001FFA  2449                    1727          MOVE.L  A1,A2
00001FFC  4EB9 0000249C           1728          JSR     ASCII_ADDRESS
00002002  97C9                    1729          SUB.L   A1,A3   ;see how many bytes
00002004  2C0B                    1730          MOVE.L  A3,D6   ;store byte/word/long in D6   
00002006  528A                    1731          ADD.L   #1,A2   ;set up for start of next address     
00002008  264A                    1732          MOVE.L  A2,A3   ;set up for end ptr
0000200A  2F05                    1733          MOVE.L  D5,-(SP)    ;save data to stack
0000200C                          1734          
0000200C                          1735          
0000200C                          1736  BSCHFADDEND:
0000200C  0C1B 0020               1737          CMP.B   #$20,(A3)+
00002010  6700 0004               1738          BEQ     BSCHSECONDADD
00002014  60F6                    1739          BRA     BSCHFADDEND
00002016                          1740          
00002016                          1741          
00002016                          1742  BSCHSECONDADD:
00002016  538B                    1743          SUB.L   #1,A3   ;off by one
00002018  4EB9 0000249C           1744          JSR     ASCII_ADDRESS
0000201E  2A45                    1745          MOVE.L  D5,A5   ;first address destination
00002020  528B                    1746          ADD.L   #1,A3   ;start it at next address
00002022  244B                    1747          MOVE.L  A3,A2   ; set up for next address
00002024                          1748          
00002024                          1749          
00002024                          1750  BSCHSECONDFIND:
00002024  0C1B 0000               1751          CMP.B   #$00,(A3)+
00002028  6700 0004               1752          BEQ     TESTOP
0000202C  60F6                    1753          BRA     BSCHSECONDFIND
0000202E                          1754          
0000202E                          1755          
0000202E                          1756  TESTOP: 
0000202E  538B                    1757          SUB.L   #1,A3   ;off by one
00002030  4EB9 0000249C           1758          JSR     ASCII_ADDRESS
00002036  2C45                    1759          MOVE.L  D5,A6   ;end address at A6
00002038  2A1F                    1760          MOVE.L  (SP)+,D5    ;restore data
0000203A  BC3C 0002               1761          CMP.B   #2,D6
0000203E  6700 0016               1762          BEQ     BYTEBSCH
00002042  BC3C 0004               1763          CMP.B   #4,D6
00002046  6700 001C               1764          BEQ     WORDBSCH
0000204A  BC3C 0008               1765          CMP.B   #8,D6
0000204E  6700 0022               1766          BEQ     LONGBSCH
00002052  6000 03FC               1767          BRA     ERRORSR
00002056                          1768          
00002056                          1769  BYTEBSCH:
00002056  BDCD                    1770          CMP.L   A5,A6
00002058  6D00 0070               1771          BLT     ENDBSCH
0000205C  BA1D                    1772          CMP.B   (A5)+,D5
0000205E  6700 0020               1773          BEQ     FOUNDB
00002062  60F2                    1774          BRA     BYTEBSCH
00002064                          1775  
00002064                          1776  WORDBSCH:
00002064  BDCD                    1777          CMP.L   A5,A6
00002066  6D00 0062               1778          BLT     ENDBSCH
0000206A  BA5D                    1779          CMP.W   (A5)+,D5
0000206C  6700 001A               1780          BEQ     FOUNDW
00002070  60F2                    1781          BRA     WORDBSCH
00002072                          1782  
00002072                          1783  LONGBSCH:
00002072  BDCD                    1784          CMP.L   A5,A6
00002074  6D00 0054               1785          BLT     ENDBSCH
00002078  BA9D                    1786          CMP.L   (A5)+,D5
0000207A  6700 0014               1787          BEQ     FOUNDL
0000207E  60F2                    1788          BRA     LONGBSCH
00002080                          1789  
00002080                          1790  
00002080                          1791  
00002080                          1792  FOUNDB:
00002080  538D                    1793          SUB.L   #1,A5
00002082  1615                    1794          MOVE.B  (A5),D3
00002084  6000 000E               1795          BRA     SUCCESSTEXT
00002088                          1796  FOUNDW:
00002088  558D                    1797          SUB.L   #2,A5
0000208A  3615                    1798          MOVE.W  (A5),D3
0000208C  6000 0006               1799          BRA     SUCCESSTEXT
00002090                          1800  FOUNDL:
00002090  598D                    1801          SUB.L   #4,A5
00002092  2615                    1802          MOVE.L  (A5),D3
00002094                          1803          
00002094                          1804  SUCCESSTEXT:
00002094  43F8 3729               1805          LEA BSCH1,A1
00002098  7206                    1806          MOVE.L  #6,D1
0000209A  7001                    1807          MOVE.L  #1,D0
0000209C  4E4F                    1808          TRAP    #15
0000209E                          1809  
0000209E  4EB9 000024DC           1810          JSR     HEXTOASCII
000020A4  224A                    1811          MOVE.L  A2,A1
000020A6  97CA                    1812          SUB.L   A2,A3
000020A8  220B                    1813          MOVE.L  A3,D1   ;how many bytes
000020AA  7000                    1814          MOVE.L  #0,D0
000020AC  4E4F                    1815          TRAP    #15
000020AE                          1816          
000020AE  43F8 372F               1817          LEA BSCH2,A1
000020B2  7212                    1818          MOVE.L  #18,D1
000020B4  7001                    1819          MOVE.L  #1,D0
000020B6  4E4F                    1820          TRAP    #15
000020B8                          1821          
000020B8  260D                    1822          MOVE.L  A5,D3
000020BA  4EB9 000024DC           1823          JSR     HEXTOASCII
000020C0  224A                    1824          MOVE.L  A2,A1
000020C2  97CA                    1825          SUB.L   A2,A3
000020C4  220B                    1826          MOVE.L  A3,D1   ;how many bytes
000020C6  7000                    1827          MOVE.L  #0,D0
000020C8  4E4F                    1828          TRAP    #15
000020CA                          1829  
000020CA                          1830          
000020CA                          1831  ENDBSCH:        
000020CA  6000 EFD2               1832          BRA RESTORE
000020CE                          1833  
000020CE                          1834  *--------------------------------------------------------------------------------------*
000020CE                          1835  
000020CE                          1836  GO:    
000020CE  2449                    1837          MOVE.L  A1,A2   ;setup for hex conversion
000020D0  264A                    1838          MOVE.L  A2,A3   
000020D2                          1839  GGETEND:
000020D2  0C1B 0000               1840          CMP.B   #$00,(A3)+
000020D6  6700 0004               1841          BEQ     EXECUTE
000020DA  60F6                    1842          BRA     GGETEND
000020DC                          1843          
000020DC                          1844  EXECUTE:
000020DC  538B                    1845          SUB.L   #1,A3   ;off by one error
000020DE  4EB9 0000249C           1846          JSR     ASCII_ADDRESS
000020E4  2045                    1847          MOVE.L  D5,A0   
000020E6  4E90                    1848          JSR     (A0)    ;go to program
000020E8                          1849          **NOTE: THE PROGRAM MUST HAVE RTS OR CONTROL WILL NOT BE RETURNED BACK TO MONITOR441!!!**
000020E8  6000 EFB4               1850          BRA RESTORE
000020EC                          1851  
000020EC                          1852  *--------------------------------------------------------------------------------------*
000020EC                          1853  
000020EC                          1854  DF:    *Registers have already been saved to STACK, just need to pop them off first*
000020EC                          1855          *Stack looks like this*
000020EC                          1856          
000020EC                          1857          *-------------*
000020EC                          1858          *|D0-D7/A0-A6|*
000020EC                          1859          *|     USP   |*
000020EC                          1860          *|     SR    |*
000020EC                          1861          *|     SSP   |*
000020EC                          1862          *|     PC    |*
000020EC                          1863          *-------------*
000020EC                          1864          *I should've used loops for efficiency but runtime is not a design constraint*
000020EC                          1865          *Maybe fix this in the future?*
000020EC                          1866          
000020EC                          1867            *----------D0-----------*
000020EC  43F8 3752               1868         LEA      RD0,A1
000020F0  7204                    1869         MOVE.L   #4,D1
000020F2  7001                    1870         MOVE.L   #1,D0
000020F4  4E4F                    1871         TRAP     #15
000020F6  261F                    1872         MOVE.L   (SP)+,D3    
000020F8  4EB9 000024DC           1873         JSR      HEXTOASCII
000020FE  224A                    1874         MOVE.L   A2,A1
00002100  95CB                    1875         SUB.L    A3,A2
00002102  240A                    1876         MOVE.L   A2,D2
00002104  B4BC FFFFFFF8           1877         CMP.L    #-8,D2
0000210A  6700 0006               1878         BEQ      D0DONTWORRY
0000210E                          1879  D0ACCOUNTFORZEROS:
0000210E  5082                    1880          ADDI.L  #8,D2
00002110  93C2                    1881          SUB.L   D2,A1
00002112                          1882  D0DONTWORRY:
00002112  7000                    1883         MOVE.L   #0,D0
00002114  7208                    1884         MOVE.L   #8,D1
00002116  4E4F                    1885         TRAP     #15
00002118                          1886         
00002118                          1887             *----------D1-----------*
00002118  43F8 3756               1888         LEA      RD1,A1
0000211C  7204                    1889         MOVE.L   #4,D1
0000211E  7001                    1890         MOVE.L   #1,D0
00002120  4E4F                    1891         TRAP     #15
00002122  261F                    1892         MOVE.L   (SP)+,D3    
00002124  4EB9 000024DC           1893         JSR      HEXTOASCII
0000212A  224A                    1894         MOVE.L   A2,A1
0000212C  95CB                    1895         SUB.L    A3,A2
0000212E  240A                    1896         MOVE.L   A2,D2
00002130  B4BC FFFFFFF8           1897         CMP.L    #-8,D2
00002136  6700 0006               1898         BEQ      D1DONTWORRY
0000213A                          1899  D1ACCOUNTFORZEROS:
0000213A  5082                    1900          ADDI.L  #8,D2
0000213C  93C2                    1901          SUB.L   D2,A1
0000213E                          1902  D1DONTWORRY:
0000213E  7000                    1903         MOVE.L   #0,D0
00002140  7208                    1904         MOVE.L   #8,D1
00002142  4E4F                    1905         TRAP     #15
00002144                          1906         
00002144                          1907             *----------D2-----------*
00002144  43F8 375A               1908         LEA      RD2,A1
00002148  7204                    1909         MOVE.L   #4,D1
0000214A  7001                    1910         MOVE.L   #1,D0
0000214C  4E4F                    1911         TRAP     #15
0000214E  261F                    1912         MOVE.L   (SP)+,D3   
00002150  4EB9 000024DC           1913         JSR      HEXTOASCII
00002156  224A                    1914         MOVE.L   A2,A1
00002158  95CB                    1915         SUB.L    A3,A2
0000215A  240A                    1916         MOVE.L   A2,D2
0000215C  B4BC FFFFFFF8           1917         CMP.L    #-8,D2
00002162  6700 0006               1918         BEQ      D2DONTWORRY
00002166                          1919  D2ACCOUNTFORZEROS:
00002166  5082                    1920          ADDI.L  #8,D2
00002168  93C2                    1921          SUB.L   D2,A1
0000216A                          1922  D2DONTWORRY:
0000216A  7000                    1923         MOVE.L   #0,D0
0000216C  7208                    1924         MOVE.L   #8,D1
0000216E  4E4F                    1925         TRAP     #15
00002170                          1926         
00002170                          1927              *----------D3-----------*
00002170  43F8 375E               1928         LEA      RD3,A1
00002174  7204                    1929         MOVE.L   #4,D1
00002176  7001                    1930         MOVE.L   #1,D0
00002178  4E4F                    1931         TRAP     #15   
0000217A  261F                    1932         MOVE.L   (SP)+,D3  
0000217C  4EB9 000024DC           1933         JSR      HEXTOASCII
00002182  224A                    1934         MOVE.L   A2,A1
00002184  95CB                    1935         SUB.L    A3,A2
00002186  240A                    1936         MOVE.L   A2,D2
00002188  B4BC FFFFFFF8           1937         CMP.L    #-8,D2
0000218E  6700 0006               1938         BEQ      D3DONTWORRY
00002192                          1939  D3ACCOUNTFORZEROS:
00002192  5082                    1940          ADDI.L  #8,D2
00002194  93C2                    1941          SUB.L   D2,A1
00002196                          1942  D3DONTWORRY:
00002196  7000                    1943         MOVE.L   #0,D0
00002198  7208                    1944         MOVE.L   #8,D1
0000219A  4E4F                    1945         TRAP     #15
0000219C                          1946         
0000219C                          1947              *----------D4-----------*
0000219C  43F8 3762               1948         LEA      RD4,A1
000021A0  7204                    1949         MOVE.L   #4,D1
000021A2  7001                    1950         MOVE.L   #1,D0
000021A4  4E4F                    1951         TRAP     #15
000021A6  261F                    1952         MOVE.L   (SP)+,D3    
000021A8  4EB9 000024DC           1953         JSR      HEXTOASCII
000021AE  224A                    1954         MOVE.L   A2,A1
000021B0  95CB                    1955         SUB.L    A3,A2
000021B2  240A                    1956         MOVE.L   A2,D2
000021B4  B4BC FFFFFFF8           1957         CMP.L    #-8,D2
000021BA  6700 0006               1958         BEQ      D4DONTWORRY
000021BE                          1959  D4ACCOUNTFORZEROS:
000021BE  5082                    1960          ADDI.L  #8,D2
000021C0  93C2                    1961          SUB.L   D2,A1
000021C2                          1962  D4DONTWORRY:
000021C2  7000                    1963         MOVE.L   #0,D0
000021C4  7208                    1964         MOVE.L   #8,D1
000021C6  4E4F                    1965         TRAP     #15
000021C8                          1966         
000021C8                          1967         *----------D5-----------*
000021C8  43F8 3766               1968         LEA      RD5,A1
000021CC  7204                    1969         MOVE.L   #4,D1
000021CE  7001                    1970         MOVE.L   #1,D0
000021D0  4E4F                    1971         TRAP     #15
000021D2  261F                    1972         MOVE.L   (SP)+,D3    
000021D4  4EB9 000024DC           1973         JSR      HEXTOASCII
000021DA  224A                    1974         MOVE.L   A2,A1
000021DC  95CB                    1975         SUB.L    A3,A2
000021DE  240A                    1976         MOVE.L   A2,D2
000021E0  B4BC FFFFFFF8           1977         CMP.L    #-8,D2
000021E6  6700 0006               1978         BEQ      D5DONTWORRY
000021EA                          1979  D5ACCOUNTFORZEROS:
000021EA  5082                    1980          ADDI.L  #8,D2
000021EC  93C2                    1981          SUB.L   D2,A1
000021EE                          1982  D5DONTWORRY:
000021EE  7000                    1983         MOVE.L   #0,D0
000021F0  7208                    1984         MOVE.L   #8,D1
000021F2  4E4F                    1985         TRAP     #15
000021F4                          1986  
000021F4                          1987          *----------D6-----------*
000021F4  43F8 376A               1988         LEA      RD6,A1
000021F8  7204                    1989         MOVE.L   #4,D1
000021FA  7001                    1990         MOVE.L   #1,D0
000021FC  4E4F                    1991         TRAP     #15
000021FE  261F                    1992         MOVE.L   (SP)+,D3    
00002200  4EB9 000024DC           1993         JSR      HEXTOASCII
00002206  224A                    1994         MOVE.L   A2,A1
00002208  95CB                    1995         SUB.L    A3,A2
0000220A  240A                    1996         MOVE.L   A2,D2
0000220C  B4BC FFFFFFF8           1997         CMP.L    #-8,D2
00002212  6700 0006               1998         BEQ      D6DONTWORRY
00002216                          1999  D6ACCOUNTFORZEROS:
00002216  5082                    2000          ADDI.L  #8,D2
00002218  93C2                    2001          SUB.L   D2,A1
0000221A                          2002  D6DONTWORRY:
0000221A  7000                    2003         MOVE.L   #0,D0
0000221C  7208                    2004         MOVE.L   #8,D1
0000221E  4E4F                    2005         TRAP     #15
00002220                          2006         
00002220                          2007           *----------D7-----------*
00002220  43F8 376E               2008         LEA      RD7,A1
00002224  7204                    2009         MOVE.L   #4,D1
00002226  7001                    2010         MOVE.L   #1,D0
00002228  4E4F                    2011         TRAP     #15
0000222A  261F                    2012         MOVE.L   (SP)+,D3    
0000222C  4EB9 000024DC           2013         JSR      HEXTOASCII
00002232  224A                    2014         MOVE.L   A2,A1
00002234  95CB                    2015         SUB.L    A3,A2
00002236  240A                    2016         MOVE.L   A2,D2
00002238  B4BC FFFFFFF8           2017         CMP.L    #-8,D2
0000223E  6700 0006               2018         BEQ      D7DONTWORRY
00002242                          2019  D7ACCOUNTFORZEROS:
00002242  5082                    2020          ADDI.L  #8,D2
00002244  93C2                    2021          SUB.L   D2,A1
00002246                          2022  D7DONTWORRY:
00002246  7000                    2023         MOVE.L   #0,D0
00002248  7208                    2024         MOVE.L   #8,D1
0000224A  4E4F                    2025         TRAP     #15
0000224C                          2026  
0000224C                          2027     *----------A0-----------*
0000224C  43F8 3772               2028         LEA      RA0,A1
00002250  7204                    2029         MOVE.L   #4,D1
00002252  7001                    2030         MOVE.L   #1,D0
00002254  4E4F                    2031         TRAP     #15
00002256  261F                    2032         MOVE.L   (SP)+,D3    
00002258  4EB9 000024DC           2033         JSR      HEXTOASCII
0000225E  224A                    2034         MOVE.L   A2,A1
00002260  95CB                    2035         SUB.L    A3,A2
00002262  240A                    2036         MOVE.L   A2,D2
00002264  B4BC FFFFFFF8           2037         CMP.L    #-8,D2
0000226A  6700 0006               2038         BEQ      A0DONTWORRY
0000226E                          2039  A0ACCOUNTFORZEROS:
0000226E  5082                    2040          ADDI.L  #8,D2
00002270  93C2                    2041          SUB.L   D2,A1
00002272                          2042  A0DONTWORRY:
00002272  7000                    2043         MOVE.L   #0,D0
00002274  7208                    2044         MOVE.L   #8,D1
00002276  4E4F                    2045         TRAP     #15
00002278                          2046         
00002278                          2047            *----------A1-----------*
00002278  43F8 3776               2048         LEA      RA1,A1
0000227C  7204                    2049         MOVE.L   #4,D1
0000227E  7001                    2050         MOVE.L   #1,D0
00002280  4E4F                    2051         TRAP     #15
00002282  261F                    2052         MOVE.L   (SP)+,D3    
00002284  4EB9 000024DC           2053         JSR      HEXTOASCII
0000228A  224A                    2054         MOVE.L   A2,A1
0000228C  95CB                    2055         SUB.L    A3,A2
0000228E  240A                    2056         MOVE.L   A2,D2
00002290  B4BC FFFFFFF8           2057         CMP.L    #-8,D2
00002296  6700 0006               2058         BEQ      A1DONTWORRY
0000229A                          2059  A1ACCOUNTFORZEROS:
0000229A  5082                    2060          ADDI.L  #8,D2
0000229C  93C2                    2061          SUB.L   D2,A1
0000229E                          2062  A1DONTWORRY:
0000229E  7000                    2063         MOVE.L   #0,D0
000022A0  7208                    2064         MOVE.L   #8,D1
000022A2  4E4F                    2065         TRAP     #15
000022A4                          2066         
000022A4                          2067          *----------A2-----------*
000022A4  43F8 377A               2068         LEA      RA2,A1
000022A8  7204                    2069         MOVE.L   #4,D1
000022AA  7001                    2070         MOVE.L   #1,D0
000022AC  4E4F                    2071         TRAP     #15
000022AE  261F                    2072         MOVE.L   (SP)+,D3    
000022B0  4EB9 000024DC           2073         JSR      HEXTOASCII
000022B6  224A                    2074         MOVE.L   A2,A1
000022B8  95CB                    2075         SUB.L    A3,A2
000022BA  240A                    2076         MOVE.L   A2,D2
000022BC  B4BC FFFFFFF8           2077         CMP.L    #-8,D2
000022C2  6700 0006               2078         BEQ      A2DONTWORRY
000022C6                          2079  A2ACCOUNTFORZEROS:
000022C6  5082                    2080          ADDI.L  #8,D2
000022C8  93C2                    2081          SUB.L   D2,A1
000022CA                          2082  A2DONTWORRY:
000022CA  7000                    2083         MOVE.L   #0,D0
000022CC  7208                    2084         MOVE.L   #8,D1
000022CE  4E4F                    2085         TRAP     #15
000022D0                          2086         
000022D0                          2087           *----------A3-----------*
000022D0  43F8 377E               2088         LEA      RA3,A1
000022D4  7204                    2089         MOVE.L   #4,D1
000022D6  7001                    2090         MOVE.L   #1,D0
000022D8  4E4F                    2091         TRAP     #15
000022DA  261F                    2092         MOVE.L   (SP)+,D3    
000022DC  4EB9 000024DC           2093         JSR      HEXTOASCII
000022E2  224A                    2094         MOVE.L   A2,A1
000022E4  95CB                    2095         SUB.L    A3,A2
000022E6  240A                    2096         MOVE.L   A2,D2
000022E8  B4BC FFFFFFF8           2097         CMP.L    #-8,D2
000022EE  6700 0006               2098         BEQ      A3DONTWORRY
000022F2                          2099  A3ACCOUNTFORZEROS:
000022F2  5082                    2100          ADDI.L  #8,D2
000022F4  93C2                    2101          SUB.L   D2,A1
000022F6                          2102  A3DONTWORRY:
000022F6  7000                    2103         MOVE.L   #0,D0
000022F8  7208                    2104         MOVE.L   #8,D1
000022FA  4E4F                    2105         TRAP     #15
000022FC                          2106         
000022FC                          2107          *----------A4-----------*
000022FC  43F8 377E               2108         LEA      RA3,A1
00002300  7204                    2109         MOVE.L   #4,D1
00002302  7001                    2110         MOVE.L   #1,D0
00002304  4E4F                    2111         TRAP     #15
00002306  261F                    2112         MOVE.L   (SP)+,D3    
00002308  4EB9 000024DC           2113         JSR      HEXTOASCII
0000230E  224A                    2114         MOVE.L   A2,A1
00002310  95CB                    2115         SUB.L    A3,A2
00002312  240A                    2116         MOVE.L   A2,D2
00002314  B4BC FFFFFFF8           2117         CMP.L    #-8,D2
0000231A  6700 0006               2118         BEQ      A4DONTWORRY
0000231E                          2119  A4ACCOUNTFORZEROS:
0000231E  5082                    2120          ADDI.L  #8,D2
00002320  93C2                    2121          SUB.L   D2,A1
00002322                          2122  A4DONTWORRY:
00002322  7000                    2123         MOVE.L   #0,D0
00002324  7208                    2124         MOVE.L   #8,D1
00002326  4E4F                    2125         TRAP     #15
00002328                          2126         
00002328                          2127         *----------A5-----------*
00002328  43F8 377E               2128         LEA      RA3,A1
0000232C  7204                    2129         MOVE.L   #4,D1
0000232E  7001                    2130         MOVE.L   #1,D0
00002330  4E4F                    2131         TRAP     #15
00002332  261F                    2132         MOVE.L   (SP)+,D3    
00002334  4EB9 000024DC           2133         JSR      HEXTOASCII
0000233A  224A                    2134         MOVE.L   A2,A1
0000233C  95CB                    2135         SUB.L    A3,A2
0000233E  240A                    2136         MOVE.L   A2,D2
00002340  B4BC FFFFFFF8           2137         CMP.L    #-8,D2
00002346  6700 0006               2138         BEQ      A5DONTWORRY
0000234A                          2139  A5ACCOUNTFORZEROS:
0000234A  5082                    2140          ADDI.L  #8,D2
0000234C  93C2                    2141          SUB.L   D2,A1
0000234E                          2142  A5DONTWORRY:
0000234E  7000                    2143         MOVE.L   #0,D0
00002350  7208                    2144         MOVE.L   #8,D1
00002352  4E4F                    2145         TRAP     #15
00002354                          2146         
00002354                          2147         *----------A6-----------*
00002354  43F8 377E               2148         LEA      RA3,A1
00002358  7204                    2149         MOVE.L   #4,D1
0000235A  7001                    2150         MOVE.L   #1,D0
0000235C  4E4F                    2151         TRAP     #15
0000235E  261F                    2152         MOVE.L   (SP)+,D3    
00002360  4EB9 000024DC           2153         JSR      HEXTOASCII
00002366  224A                    2154         MOVE.L   A2,A1
00002368  95CB                    2155         SUB.L    A3,A2
0000236A  240A                    2156         MOVE.L   A2,D2
0000236C  B4BC FFFFFFF8           2157         CMP.L    #-8,D2
00002372  6700 0006               2158         BEQ      A6DONTWORRY
00002376                          2159  A6ACCOUNTFORZEROS:
00002376  5082                    2160          ADDI.L  #8,D2
00002378  93C2                    2161          SUB.L   D2,A1
0000237A                          2162  A6DONTWORRY:
0000237A  7000                    2163         MOVE.L   #0,D0
0000237C  7208                    2164         MOVE.L   #8,D1
0000237E  4E4F                    2165         TRAP     #15
00002380                          2166       *-----HACK---*
00002380  DFFC 0000003C           2167       ADD.L  #60,SP  ;should put stack in correct place
00002386                          2168       
00002386                          2169                *----------USP-----------*
00002386  43F8 3795               2170         LEA      RUS,A1
0000238A  7204                    2171         MOVE.L   #4,D1
0000238C  7001                    2172         MOVE.L   #1,D0
0000238E  4E4F                    2173         TRAP     #15
00002390  261F                    2174         MOVE.L   (SP)+,D3    
00002392  4EB9 000024DC           2175         JSR      HEXTOASCII
00002398  224A                    2176         MOVE.L   A2,A1
0000239A  95CB                    2177         SUB.L    A3,A2
0000239C  240A                    2178         MOVE.L   A2,D2
0000239E  B4BC FFFFFFF8           2179         CMP.L    #-8,D2
000023A4  6700 0006               2180         BEQ      USPDONTWORRY
000023A8                          2181  USPACCOUNTFORZEROS:
000023A8  5082                    2182          ADDI.L  #8,D2
000023AA  93C2                    2183          SUB.L   D2,A1
000023AC                          2184  USPDONTWORRY:
000023AC  7000                    2185         MOVE.L   #0,D0
000023AE  7208                    2186         MOVE.L   #8,D1
000023B0  4E4F                    2187         TRAP     #15
000023B2                          2188  
000023B2                          2189                *----------SR-----------*
000023B2  43F8 379D               2190         LEA      RSR,A1
000023B6  7204                    2191         MOVE.L   #4,D1
000023B8  7001                    2192         MOVE.L   #1,D0
000023BA  4E4F                    2193         TRAP     #15
000023BC  361F                    2194         MOVE.W   (SP)+,D3
000023BE  3E03                    2195         MOVE.W   D3,D7   ;temp storage to restore before return    
000023C0  4EB9 000024DC           2196         JSR      HEXTOASCII
000023C6  224A                    2197         MOVE.L   A2,A1
000023C8  95CB                    2198         SUB.L    A3,A2
000023CA  240A                    2199         MOVE.L   A2,D2
000023CC  B4BC FFFFFFFC           2200         CMP.L    #-4,D2
000023D2  6700 0006               2201         BEQ      SRDONTWORRY
000023D6                          2202  SRACCOUNTFORZEROS:
000023D6  5882                    2203          ADDI.L  #4,D2
000023D8  93C2                    2204          SUB.L   D2,A1
000023DA                          2205  SRDONTWORRY:
000023DA  7000                    2206         MOVE.L   #0,D0
000023DC  7204                    2207         MOVE.L   #4,D1
000023DE  4E4F                    2208         TRAP     #15
000023E0                          2209         
000023E0                          2210      *----------SS/A7-----------*
000023E0  43F8 378E               2211         LEA      RSS,A1
000023E4  7207                    2212         MOVE.L   #7,D1
000023E6  7001                    2213         MOVE.L   #1,D0
000023E8  4E4F                    2214         TRAP     #15
000023EA  261F                    2215         MOVE.L   (SP)+,D3    
000023EC  4EB9 000024DC           2216         JSR      HEXTOASCII
000023F2  224A                    2217         MOVE.L   A2,A1
000023F4  95CB                    2218         SUB.L    A3,A2
000023F6  240A                    2219         MOVE.L   A2,D2
000023F8  B4BC FFFFFFF8           2220         CMP.L    #-8,D2
000023FE  6700 0006               2221         BEQ      SSDONTWORRY
00002402                          2222  SSACCOUNTFORZEROS:
00002402  5082                    2223          ADDI.L  #8,D2
00002404  93C2                    2224          SUB.L   D2,A1
00002406                          2225  SSDONTWORRY:
00002406  7000                    2226         MOVE.L   #0,D0
00002408  7208                    2227         MOVE.L   #8,D1
0000240A  4E4F                    2228         TRAP     #15
0000240C                          2229         
0000240C                          2230      *----------PC-----------*
0000240C  43F8 3799               2231         LEA      RPC,A1
00002410  7204                    2232         MOVE.L   #4,D1
00002412  7001                    2233         MOVE.L   #1,D0
00002414  4E4F                    2234         TRAP     #15
00002416  261F                    2235         MOVE.L   (SP)+,D3    
00002418  4EB9 000024DC           2236         JSR      HEXTOASCII
0000241E  224A                    2237         MOVE.L   A2,A1
00002420  95CB                    2238         SUB.L    A3,A2
00002422  240A                    2239         MOVE.L   A2,D2
00002424  B4BC FFFFFFF8           2240         CMP.L    #-8,D2
0000242A  6700 0006               2241         BEQ      PCDONTWORRY
0000242E                          2242  PCACCOUNTFORZEROS:
0000242E  5082                    2243          ADDI.L  #8,D2
00002430  93C2                    2244          SUB.L   D2,A1
00002432                          2245  PCDONTWORRY:
00002432  7000                    2246         MOVE.L   #0,D0
00002434  7208                    2247         MOVE.L   #8,D1
00002436  4E4F                    2248         TRAP     #15       
00002438                          2249         
00002438                          2250     *---DF HACK RESTORE---*
00002438  3F07                    2251     MOVE.W   D7,-(SP)
0000243A  DFFC FFFFFFB8           2252     ADD.L    #-72,SP
00002440  4CDF 7FFF               2253     MOVEM.L  (SP)+,D0-D7/A0-A6
00002444  DFFC 0000000C           2254     ADD.L    #12,SP  ;go back to original value
0000244A  46DF                    2255     MOVE.W   (SP)+,SR
0000244C                          2256          
0000244C  6000 EBCA               2257         BRA SHELL
00002450                          2258  
00002450                          2259  *--------------------------------------------------------------------------------------*
00002450                          2260  
00002450                          2261  
00002450                          2262  
00002450                          2263  ****************************COMMON SUBROUTINES NEEDED**********************************
00002450                          2264  
00002450                          2265  
00002450                          2266  *--------------------------------------------------------------------------------------*
00002450  43F8 369C               2267  ERRORSR:        LEA   ERROR,A1    ;load message
00002454  323C 002C               2268                  MOVE.W  #44,D1
00002458  7000                    2269                  MOVE.L  #0,D0
0000245A  4E4F                    2270                  TRAP    #15
0000245C  6000 EC40               2271                  BRA     RESTORE
00002460                          2272  *--------------------------------------------------------------------------------------*
00002460                          2273  ASCII_TO_BCD:   *Number passed via D3 byte size only(to be expected)*
00002460  B67C 0046               2274                  CMP #$46,D3
00002464  6EEA                    2275                  BGT ERRORSR
00002466  B67C 0040               2276                  CMP #$40,D3
0000246A  6E00 000A               2277                  BGT UPPER
0000246E  0483 00000030           2278                  SUBI.L  #$30,D3
00002474  4E75                    2279                  RTS
00002476  0483 00000031           2280  UPPER:          SUBI.L  #$31,D3 ;If ASCII number is A-F
0000247C  4E75                    2281                  RTS
0000247E                          2282  *--------------------------------------------------------------------------------------*
0000247E                          2283  
0000247E                          2284  BCD_TO_HEX:     *Number passed via D3 accepts BYTE ONLY*
0000247E  2803                    2285                  MOVE.L  D3,D4   
00002480  2A03                    2286                  MOVE.L  D3,D5
00002482  0284 000000F0           2287                  ANDI.L  #240,D4 ;upper byte
00002488  0285 0000000F           2288                  ANDI.L  #15,D5  ;lower byte
0000248E  E89C                    2289                  ROR.L   #4,D4   ;get bits into correct place
00002490  C8FC 000A               2290                  MULU    #10,D4  ;multiply by its tens place
00002494  4283                    2291                  CLR.L   D3
00002496  D684                    2292                  ADD.L   D4,D3
00002498  D685                    2293                  ADD.L   D5,D3
0000249A  4E75                    2294                  RTS
0000249C                          2295  *--------------------------------------------------------------------------------------*                
0000249C                          2296  ASCII_ADDRESS:   *Address to be converted from ascii to hex passed through A2 and A3*
0000249C                          2297                   *Returned in D5                                                    *
0000249C  4283                    2298                  CLR.L   D3
0000249E  4285                    2299                  CLR.L   D5
000024A0  220A                    2300                  MOVE.L   A2,D1
000024A2  200B                    2301                  MOVE.L   A3,D0
000024A4  9081                    2302                  SUB.L   D1,D0   ;store the difference in D0
000024A6  7800                    2303                  MOVE.L  #0,D4   ;set up 10's place counter
000024A8  5380                    2304                  SUBI.L  #1,D0
000024AA  B07C 0000               2305  PLACECOUNTER:   CMP     #0,D0
000024AE  6700 0008               2306                  BEQ     CONVERTADDRESS
000024B2  5884                    2307                  ADDI.L  #4,D4
000024B4  5380                    2308                  SUBI.L  #1,D0
000024B6  60F2                    2309                  BRA     PLACECOUNTER
000024B8  B6CA                    2310  CONVERTADDRESS  CMP     A2,A3
000024BA  6700 001E               2311                  BEQ     ADDRESSDONE
000024BE  4283                    2312                  CLR.L   D3
000024C0  161A                    2313                  MOVE.B  (A2)+,D3
000024C2  48E7 EC30               2314                  MOVEM.L A2-A3/D0-D2/D4-D5,-(SP)   ;so regs dont get destroyed
000024C6  4EB8 2460               2315                  JSR     ASCII_TO_BCD
000024CA  4EB8 247E               2316                  JSR     BCD_TO_HEX
000024CE  4CDF 0C37               2317                  MOVEM.L (SP)+,A2-A3/D0-D2/D4-D5
000024D2  E9BB                    2318                  ROL.L     D4,D3
000024D4  5984                    2319                  SUBI.L  #4,D4
000024D6  DA83                    2320                  ADD.L     D3,D5   ;get total
000024D8  60DE                    2321                  BRA     CONVERTADDRESS
000024DA  4E75                    2322  ADDRESSDONE     RTS
000024DC                          2323  
000024DC                          2324  *--------------------------------------------------------------------------------------*
000024DC                          2325  HEXTOASCII: *Result returned in address buffer from A2 to A3, HEX number passed*
000024DC                          2326              *through D3*
000024DC  4284                    2327              CLR.L   D4
000024DE  4285                    2328              CLR.L   D5
000024E0  247C 00003900           2329              MOVE.L  #$3900,A2
000024E6  267C 00003932           2330              MOVE.L  #$3932,A3
000024EC                          2331  KEEP_CONVERTING:
000024EC  1803                    2332              MOVE.B  D3,D4  
000024EE  1A03                    2333              MOVE.B  D3,D5 
000024F0  E08B                    2334              LSR.L   #8,D3   ;prepare for next byte
000024F2  0284 0000000F           2335              ANDI.L  #15,D4   ;get lower byte
000024F8  0285 000000F0           2336              ANDI.L  #240,D5 ;get upper byte'
000024FE  E85D                    2337              ROR     #4,D5   ;move D5 into position
00002500  B83C 0009               2338              CMP.B     #$9,D4
00002504  6E00 000C               2339              BGT     A_TO_F
00002508  0684 00000030           2340              ADDI.L  #$30,D4
0000250E  6000 0008               2341              BRA     NEXTHEX
00002512  0684 00000037           2342  A_TO_F:     ADDI.L  #$37,D4
00002518  BA3C 0009               2343  NEXTHEX:    CMP.B     #$9,D5
0000251C  6E00 000C               2344              BGT     A_TO_F2
00002520  0685 00000030           2345              ADDI.L  #$30,D5
00002526  6000 0008               2346              BRA     PUTBUFFER
0000252A  0685 00000037           2347  A_TO_F2:    ADDI.L  #$37,D5
00002530  1704                    2348  PUTBUFFER:  MOVE.B  D4,-(A3)
00002532  1705                    2349              MOVE.B  D5,-(A3)
00002534  B6CA                    2350              CMP      A2,A3
00002536  66B4                    2351              BNE      KEEP_CONVERTING
00002538  0C12 0030               2352  RID_ZEROS:  CMP.B   #$30,(A2)
0000253C  6700 0006               2353              BEQ     ADD
00002540  6000 0006               2354              BRA     HEXASCIIDONE
00002544  528A                    2355  ADD:        ADD.L   #1,A2   ;increment to find start of string
00002546  60F0                    2356              BRA     RID_ZEROS
00002548                          2357  HEXASCIIDONE:   
00002548  267C 00003932           2358              MOVE.L  #$3932,A3    ;end of original number
0000254E  B7CA                    2359              CMP.L   A2,A3
00002550  6700 0006               2360              BEQ     ZEROS
00002554  6000 0004               2361              BRA     NOTZEROS
00002558  518A                    2362  ZEROS       SUB.L   #8,A2               
0000255A  4E75                    2363  NOTZEROS    RTS
0000255C                          2364  *--------------------------------------------------------------------------------------*
0000255C                          2365  
0000255C                          2366  
0000255C                          2367  NEXT:   ;for debugging single commands
0000255C                          2368              
0000255C                          2369              
0000255C                          2370              
0000255C                          2371              
0000255C                          2372  
0000255C                          2373  
0000255C                          2374         END    START        

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A0ACCOUNTFORZEROS   226E
A0DONTWORRY         2272
A1ACCOUNTFORZEROS   229A
A1DONTWORRY         229E
A2ACCOUNTFORZEROS   22C6
A2DONTWORRY         22CA
A3ACCOUNTFORZEROS   22F2
A3DONTWORRY         22F6
A4ACCOUNTFORZEROS   231E
A4DONTWORRY         2322
A5ACCOUNTFORZEROS   234A
A5DONTWORRY         234E
A6ACCOUNTFORZEROS   2376
A6DONTWORRY         237A
ACMP                1B1A
ADD                 2544
ADDRESSDONE         24DA
AFADDCONV           1AF4
AGETFIRSTADDRESS    1AE2
AGETSECADDRESS      1B02
ARESETLOOP          1B18
ASADDCONV           1B0C
ASCEND              1AD2
ASCII_ADDRESS       249C
ASCII_TO_BCD        2460
ASWAP               1B28
A_TO_F              2512
A_TO_F2             252A
BCD_TO_HEX          247E
BF                  1E0E
BFGETENDADDRONE     1E2C
BFGETENDDATA        1E12
BFGETLASTEND        1E52
BFNEXTADDR          1E1C
BFNEXTADDRTWO       1E36
BFTEST              1168
BLCKTEST            10DC
BMOV                1E84
BMOVDONE            1F0E
BMOVTEST            1146
BSCH                1FE8
BSCH1               3729
BSCH2               372F
BSCH3               3741
BSCHENDDATA         1FEC
BSCHFADDEND         200C
BSCHFIRSTADD        1FF6
BSCHSECONDADD       2016
BSCHSECONDFIND      2024
BSCHTEST            1102
BTST                1F12
BTST1               36CC
BTST2               36E0
BTST3               36F1
BTST4               3703
BTST5               370E
BTSTDATALOOP        1F60
BTSTGETENDADDRONE   1F30
BTSTGETENDDATA      1F16
BTSTGETLASTEND      1F4A
BTSTNEXTADDR        1F20
BTSTNEXTADDRTWO     1F3A
BTSTTEST            1124
BUFFER              3000
BYTEBSCH            2056
COMPLETE            1FDA
COMPUTATION         1A66
COMPUTEFIRSTADD     1E94
COMPUTEFOURTHADDRESS  1EDC
COMPUTESECONDADDRESS  1EAC
COMPUTETHIRDADDRESS  1EC4
CONVERT             1A4A
CONVERTADDRESS      24B8
CONVERTMINUS1       1A48
D0ACCOUNTFORZEROS   210E
D0DONTWORRY         2112
D1ACCOUNTFORZEROS   213A
D1DONTWORRY         213E
D2ACCOUNTFORZEROS   2166
D2DONTWORRY         216A
D3ACCOUNTFORZEROS   2192
D3DONTWORRY         2196
D4ACCOUNTFORZEROS   21BE
D4DONTWORRY         21C2
D5ACCOUNTFORZEROS   21EA
D5DONTWORRY         21EE
D6ACCOUNTFORZEROS   2216
D6DONTWORRY         221A
D7ACCOUNTFORZEROS   2242
D7DONTWORRY         2246
DATALOOP            1E76
DATATRANSFER        1F04
DCMP                1B78
DEBUG               36C9
DEFAULT             1BC8
DESCEND             1B30
DF                  20EC
DFADDCONV           1B52
DFTST               1176
DGETFIRSTADDRESS    1B40
DGETSECADDRESS      1B60
DISPLOOP            19C4
DONEASCEND          1B8E
DONEDESCEND         1B8E
DRESETLOOP          1B76
DSADDCONV           1B6A
DSWAP               1B86
ECHO                12A8
ECHOTEST            10B6
EEND                12AA
EFOUND              12B4
ENDBF               1E80
ENDBSCH             20CA
ENDCONVERT          1A78
ENDLP               1E0A
ENDPARSE            1C5A
ENDPARSEL           1E02
ENDPARSEW           1D1C
ENDPTRMM            1B98
ENTER               1C5C
ENTERL              1E04
ENTERW              1D1E
ERROR               369C
ERRORSR             2450
EXECUTE             20DC
FAIL                1F78
FINDEND             1930
FINDEND1            1986
FINDEND2            1996
FINDLASTNUM         1A3E
FINDNEXT            1990
FIRSTADDRESS        1E8A
FONT                1090000
FOUNDB              2080
FOUNDL              2090
FOUNDW              2088
FOURTHADDRESS       1ED2
GGETEND             20D2
GO                  20CE
GOBACK              1710
GOTST               11C4
GREEN               FF00
HELP                1716
HELPORHXDC          11DC
HELPTST             11F2
HEXASCIIDONE        2548
HEXTOASCII          24DC
HIGHHEX             1A62
HIGHHEXMM           1C4A
HIGHHEXMML          1DF0
HIGHHEXMMW          1D0A
HTXT                3063
HTXT1               3074
HTXT10              35E5
HTXT11              3622
HTXT12              365A
HTXT1A              30BF
HTXT1B              30FC
HTXT2               3110
HTXT3               315B
HTXT3A              31A0
HTXT3B              31D9
HTXT3C              31ED
HTXT3D              3202
HTXT3E              321F
HTXT4               3252
HTXT4A              3299
HTXT4B              32DE
HTXT4C              32F9
HTXT4D              3317
HTXT4E              3336
HTXT5               335A
HTXT5A              33A0
HTXT6               33A9
HTXT6A              33EF
HTXT6B              3437
HTXT7               345D
HTXT7A              34A1
HTXT7B              34E9
HTXT8               3501
HTXT8A              3548
HTXT9               3570
HTXT9A              35B8
HXDC                1A1E
HXDCTEST            1270
KEEP_CONVERTING     24EC
LONG                1D24
LONGBSCH            2072
MDSPCTEST           1240
MEMCONT             193A
MEMDISP             197C
MEMNEXT             19A0
MEMSET              1928
MEMTEST             1214
MM                  1B92
MMSPCTEST           1262
MODIFYLOOP          1BDC
MODIFYLOOPL         1D38
MODIFYLOOPW         1C76
MODIFYREGS          12C2
MODIFYREGTEST       1292
MRA                 1308
MRA0                1546
MRA1                1586
MRA2                15C6
MRA3                1606
MRA4                1646
MRA5                1686
MRA6                16C6
MRD                 12C2
MRD0                1346
MRD1                1386
MRD2                13C6
MRD3                1406
MRD4                1446
MRD5                1486
MRD6                14C6
MRD7                1506
MRDFINDDATA         1706
MSSPCTEST           1232
NEXT                255C
NEXTHEX             2518
NEXTMMSTEP          1C4E
NEXTMMSTEPL         1DF4
NEXTMMSTEPW         1D0E
NOTZEROS            255A
OUTPUTBUFF          3050
OUTPUTNUM           1A96
PARSELOOP           1C32
PARSELOOPL          1DD8
PARSELOOPW          1CF2
PCACCOUNTFORZEROS   242E
PCDONTWORRY         2432
PLACECOUNTER        24AA
PROMPT              3058
PUTBUFFER           2530
RA0                 3772
RA1                 3776
RA2                 377A
RA3                 377E
RA4                 3782
RA5                 3786
RA6                 378A
RD0                 3752
RD1                 3756
RD2                 375A
RD3                 375E
RD4                 3762
RD5                 3766
RD6                 376A
RD7                 376E
READ                1F6A
RESTORE             109E
RID_ZEROS           2538
RPC                 3799
RSR                 379D
RSS                 378E
RUS                 3795
SECONDADDRESS       1EA2
SECONDLOOP          19FC
SHELL               1018
SIZECHECK           1B96
SORTTEST            118E
SORTW               1AAC
SPACE               36C8
SRACCOUNTFORZEROS   23D6
SRDONTWORRY         23DA
SSACCOUNTFORZEROS   2402
SSDONTWORRY         2406
START               1000
STOREDATA           1E5C
STOREDATABTST       1F54
SUCCESSTEXT         2094
TESTOP              202E
THIRDADDRESS        1EBA
UPPER               2476
USPACCOUNTFORZEROS  23A8
USPDONTWORRY        23AC
WORD                1C62
WORDBSCH            2064
X                   1B8E
ZEROS               2558

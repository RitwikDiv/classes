00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 4/25/2015 5:39:15 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Monitor Project
00000000                             3  * Written by :  Adam Sumner 
00000000                             4  * Date       :  4/28/2015
00000000                             5  * Description:  Monitor Final Project
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  
00000000                             9  *---------------DISCLAIMER!-------------------------*
00000000                            10  *Subroutines are not as optimized as they should be!*
00000000                            11  *Things such as checking for spaces, getting addresses, etc. *
00000000                            12  *can easily be their own subroutines to save code space!*
00000000                            13  *Luckily code size is not a huge concern*
00000000                            14  *This is why there are no plans to optimize in the future*
00000000                            15  
00000000                            16  
00000000                            17  
00003000                            18      ORG    $3000
00003000                            19      
00003000                            20  BUFFER        DS.B      80              ;space for command storage 
00003050                            21  OUTPUTBUFF    DS.B      8               ;to output numbers easily
00003058= 4D 4F 4E 49 54 4F ...     22  PROMPT        DC.B      'MONITOR441>'   ;prompt definition
00003063                            23  
00003063                            24  *Help text*
00003063= 4C 69 73 74 20 6F ...     25  HTXT          DC.B      'List of Commands:'
00003074= 4D 44 53 50 20 3C ...     26  HTXT1         DC.B      'MDSP <address1> <address2> - Memory Display: Outputs the address and memory' 
000030BF= 63 6F 6E 74 65 6E ...     27  HTXT1A        DC.B      'contents from <address1> to <address2> amd from <address1> to' 
000030FC= 3C 61 64 64 72 65 ...     28  HTXT1B        DC.B      '<address2 + 16bytes>'
00003110= 48 58 44 45 43 20 ...     29  HTXT2         DC.B      'HXDEC <num> - Conversion: Converts a hexadecimal number to a decimal number'
0000315B= 53 4F 52 54 57 20 ...     30  HTXT3         DC.B      'SORTW <option> <address1> <address2> - Sort: Sorts a block of memory.'
000031A0= 3C 6F 70 74 69 6F ...     31  HTXT3A        DC.B      '<option> specifies the order in which the list is sorted:'
000031D9= 3B 41 20 2D 20 41 ...     32  HTXT3B        DC.B      ';A - Ascending Order'
000031ED= 3B 44 20 2D 20 44 ...     33  HTXT3C        DC.B      ';D - Descending Order'
00003202= 2D 28 64 65 66 61 ...     34  HTXT3D        DC.B      '-(default) - Descending Order'
0000321F= 53 6F 72 74 73 20 ...     35  HTXT3E        DC.B      'Sorts block of memory from <address1> to <address2>'
00003252= 4D 4D 20 3C 6F 70 ...     36  HTXT4         DC.B      'MM <option> <address> - Memory Modify: Display memory and, as required,'
00003299= 6D 6F 64 69 66 79 ...     37  HTXT4A        DC.B      'modify data or enter new data. <option> specifies the number of bytes'
000032DE= 64 69 73 70 6C 61 ...     38  HTXT4B        DC.B      'displayed for each address:'
000032F9= 2D 28 64 65 66 61 ...     39  HTXT4C        DC.B      '-(default) - Displays one byte'
00003317= 3B 57 20 2D 20 44 ...     40  HTXT4D        DC.B      ';W - Displays one word(2 bytes)'
00003336= 3B 4C 20 2D 20 44 ...     41  HTXT4E        DC.B      ';L - Displays one long word(4 bytes)'
0000335A= 4D 53 20 3C 64 61 ...     42  HTXT5         DC.B      'MS <data> <address> - Memory Set: Alters memory by setting <data> into' 
000033A0= 3C 61 64 64 72 65 ...     43  HTXT5A        DC.B      '<address>'
000033A9= 42 46 20 3C 64 61 ...     44  HTXT6         DC.B      'BF <data> <address1> <address2> - Block Fill: Fills memory starting at' 
000033EF= 3C 61 64 64 72 65 ...     45  HTXT6A        DC.B      '<address1> to <address2>. Both must be even addresses. This command only'
00003437= 77 6F 72 6B 73 20 ...     46  HTXT6B        DC.B      'works with a word-sized <data> pattern'
0000345D= 42 4D 4F 56 20 3C ...     47  HTXT7         DC.B      'BMOV <address1> <address2> <address3> <address4> - Block Move: Moves' 
000034A1= 61 20 64 75 70 6C ...     48  HTXT7A        DC.B      'a duplicate block of memory from <address1> to <address2> into the block'
000034E9= 3C 61 64 64 72 65 ...     49  HTXT7B        DC.B      '<address3> to <address4>'
00003501= 42 54 53 54 20 3C ...     50  HTXT8         DC.B      'BTST <data> <address1> <address2> - Block Test: Tests a block of memory'
00003548= 66 72 6F 6D 20 3C ...     51  HTXT8A        DC.B      'from <address1> to <address2> for <data>'
00003570= 42 53 43 48 20 3C ...     52  HTXT9         DC.B      'BSCH <data> <address1> <address2> - Block Search: Searches for <data> in'
000035B8= 69 6E 20 6D 65 6D ...     53  HTXT9A        DC.B      'in memory block from <address1> to <address2>'
000035E5= 47 4F 20 3C 61 64 ...     54  HTXT10        DC.B      'GO <address> - Execute Program: Executes program at <address>'
00003622= 44 46 20 2D 20 44 ...     55  HTXT11        DC.B      'DF - Display Formatted Registers: Displays all registers'
0000365A= 48 45 4C 50 20 2D ...     56  HTXT12        DC.B      'HELP - Help: Displays all available commands and their description'
0000369C                            57  
0000369C                            58  *Error Message*
0000369C= 45 52 52 4F 52 3A ...     59  ERROR         DC.B      'ERROR: TRY COMMAND AGAIN WITH CORRECT SYNTAX'
000036C8                            60  
000036C8                            61  *Space*
000036C8= 20                        62  SPACE         DC.B      ' '
000036C9                            63  
000036C9                            64  *Debugger Print Statement*
000036C9= 57 49 4E                  65  DEBUG         DC.B      'WIN'      
000036CC                            66  
000036CC                            67  *BTST Text*
000036CC= 4E 75 6D 62 65 72 ...     68  BTST1         DC.B      'Number written was: '
000036E0= 4E 75 6D 62 65 72 ...     69  BTST2         DC.B      'Number read was: '
000036F1= 42 6C 6F 63 6B 20 ...     70  BTST3         DC.B      'Block Test PASSES!'
00003703= 46 41 49 4C 55 52 ...     71  BTST4         DC.B      'FAILURE!!!!'  
0000370E= 45 72 72 6F 72 20 ...     72  BTST5         DC.B      'Error Occurred at address: '      
00003729                            73  
00003729                            74  *BSCH Text*
00003729= 44 61 74 61 3A 20         75  BSCH1         DC.B      'Data: '
0000372F= 46 6F 75 6E 64 20 ...     76  BSCH2         DC.B      'Found at address: '
00003741= 50 61 74 74 65 72 ...     77  BSCH3         DC.B      'Pattern not found'
00003752                            78  
00003752                            79  *DF Text*
00003752= 44 30 3A 20               80  RD0            DC.B      'D0: '
00003756= 44 31 3A 20               81  RD1            DC.B      'D1: '
0000375A= 44 32 3A 20               82  RD2            DC.B      'D2: '
0000375E= 44 33 3A 20               83  RD3            DC.B      'D3: '
00003762= 44 34 3A 20               84  RD4            DC.B      'D4: '
00003766= 44 35 3A 20               85  RD5            DC.B      'D5: '
0000376A= 44 36 3A 20               86  RD6            DC.B      'D6: '
0000376E= 44 37 3A 20               87  RD7            DC.B      'D7: '
00003772                            88  
00003772= 41 30 3A 20               89  RA0            DC.B      'A0: '
00003776= 41 31 3A 20               90  RA1            DC.B      'A1: '
0000377A= 41 32 3A 20               91  RA2            DC.B      'A2: '
0000377E= 41 33 3A 20               92  RA3            DC.B      'A3: '
00003782= 41 34 3A 20               93  RA4            DC.B      'A4: '
00003786= 41 35 3A 20               94  RA5            DC.B      'A5: '
0000378A= 41 36 3A 20               95  RA6            DC.B      'A6: '
0000378E                            96  
0000378E= 53 53 2F 41 37 3A 20      97  RSS            DC.B      'SS/A7: '
00003795= 55 53 3A 20               98  RUS            DC.B      'US: '
00003799= 50 43 3A 20               99  RPC            DC.B      'PC: '
0000379D= 53 52 3A 20              100  RSR            DC.B      'SR: '
000037A1                           101  
000037A1                           102  *Exception Messages*
000037A1= 41 20 42 75 73 20 ...    103  BERR_TEXT      DC.B 'A Bus Error Occured! :(',0
000037B9= 41 6E 20 41 64 64 ...    104  AERR_TEXT      DC.B 'An Address Error Occured! :(',0
000037D6= 41 6E 20 49 6C 6C ...    105  IERR_TEXT      DC.B 'An Illegal Instruction Error Occured! :(',0
000037FF= 41 20 50 72 69 76 ...    106  PERR_TEXT      DC.B 'A Privilege Error Occured! :(',0
0000381D= 41 20 44 69 76 69 ...    107  ZERR_TEXT      DC.B 'A Divide by Zero Error Occured! :(',0
00003840= 41 6E 20 41 20 4C ...    108  ALERR_TEXT      DC.B 'An A Line Error Occured! :(',0
0000385C= 41 6E 20 46 20 4C ...    109  FLERR_TEXT      DC.B 'An F Line Error Occured! :(',0
00003878= 41 20 43 68 65 63 ...    110  CHKERR_TEXT      DC.B 'A Check Error Occured! :(',0
00003892                           111  
00003892= 53 53 57 3A 20 00        112  SSW            DC.B 'SSW: ',0
00003898= 42 41 3A 20 00           113  BA             DC.B 'BA: ',0
0000389D= 49 52 3A 20 00           114  IR             DC.B 'IR: ',0
000038A2                           115  
000038A2                           116  *Color definition for Font*
000038A2  =01090000                117  FONT        EQU     $01090000  
000038A2  =0000FF00                118  GREEN       EQU     $0000FF00
000038A2                           119  
00001000                           120      ORG     $1000
00001000                           121  START:  
00001000  48E7 E040                122          MOVEM.L D0-D2/A1,-(SP)
00001004                           123          *Makes it look like a REAL terminal*
00001004  223C 0000FF00            124          MOVE.L  #GREEN,D1
0000100A  243C 01090000            125          MOVE.L  #FONT,D2
00001010  103C 0015                126          MOVE.B  #21,D0
00001014  4E4F                     127          TRAP    #15
00001016  4281                     128          CLR.L   D1
00001018  4282                     129          CLR.L   D2
0000101A  4200                     130          CLR.B   D0
0000101C                           131          *Load custom exceptions*
0000101C  43F9 000024A8            132          LEA BERR,A1 ;init exception handlers
00001022  21C9 0008                133          MOVE.L A1,$8
00001026  43F9 00002516            134          LEA AERR,A1
0000102C  21C9 000C                135          MOVE.L A1,$C
00001030  43F9 00002584            136          LEA IERR,A1
00001036  21C9 0010                137          MOVE.L A1,$10
0000103A  43F9 000025B8            138          LEA ZERR,A1
00001040  21C9 0014                139          MOVE.L A1,$14
00001044  43F9 00002606            140          LEA CHKERR,A1
0000104A  21C9 0018                141          MOVE.L  A1,$18
0000104E  43F9 0000259E            142          LEA PERR,A1
00001054  21C9 0020                143          MOVE.L A1,$20
00001058  43F9 000025D2            144          LEA ALERR,A1
0000105E  21C9 0028                145          MOVE.L A1,$28
00001062  43F9 000025EC            146          LEA FLERR,A1
00001068  21C9 002C                147          MOVE.L A1,$2C
0000106C  4CDF 0207                148          MOVEM.L (SP)+,D0-D2/A1  ;restore any preset values
00001070                           149  
00001070                           150  *--------------------------------------------------------------------------------------*
00001070                           151  SHELL:       
00001070  4878 1070                152              PEA     *           ;save PC on Stack for DF
00001074  588F                     153              ADD.L   #4,SP       ;get original value of stack pointer
00001076  2F4F FFF8                154              MOVE.L  SP,-8(SP)   ;save it
0000107A  DFFC FFFFFFF8            155              ADD.L   #-8,SP      ;update Stack position
00001080  40E7                     156              MOVE    SR,-(SP)    ;save Status register for use with DF
00001082  2F0E                     157              MOVE.L  A6,-(SP)    ;temp save
00001084  4E6E                     158              MOVE    USP,A6      ;for use with DF command
00001086  2F0E                     159              MOVE.L  A6,-(SP)    ;store USP to STACK
00001088  588F                     160              ADD.L   #4,SP       
0000108A  2C57                     161              MOVE.L  (SP),A6    ;restore original value
0000108C  2F67 0004                162              MOVE.L  -(SP),4(SP)  ;move correct value to correct stack position
00001090  588F                     163              ADD.L   #4,SP       ;point stack to CORRECT PLACE
00001092                           164              
00001092                           165  
00001092  48E7 FFFE                166              MOVEM.L D0-D7/A0-A6,-(SP)  ;save initial values of registers
00001096  48E7 FFFE                167              MOVEM.L D0-D7/A0-A6,-(SP)  ;unorthodox implementation to save registers when using DF command
0000109A                           168               
0000109A                           169                
0000109A  43F8 3058                170              LEA  PROMPT,A1      ;Load message            
0000109E  323C 000B                171              MOVE.W  #11,D1      ;load n bytes
000010A2  103C 0001                172              MOVE.B  #1,D0       ;set up trap call
000010A6  4E4F                     173              TRAP    #15
000010A8  43F8 3000                174              LEA     BUFFER,A1   ;set up storage for command
000010AC  103C 0002                175              MOVE.B  #2,D0       ;load input trap call
000010B0  4E4F                     176              TRAP    #15
000010B2  0C11 0048                177              CMP.B   #$48,(A1)   ;check for help/hxdc
000010B6  6700 017C                178              BEQ     HELPORHXDC
000010BA  0C11 004D                179              CMP.B   #$4D,(A1)   ;check for memory command
000010BE  6700 01AC                180              BEQ     MEMTEST
000010C2  0C11 0047                181              CMP.B   #$47,(A1)   ;check for go
000010C6  6700 0154                182              BEQ     GOTST
000010CA  0C11 0044                183              CMP.B   #$44,(A1)   ;check for df
000010CE  6700 00FE                184              BEQ     DFTST
000010D2  0C11 0042                185              CMP.B   #$42,(A1)   ;check for blck command
000010D6  6700 005C                186              BEQ     BLCKTEST
000010DA  0C11 0053                187              CMP.B   #$53,(A1)   ;check for sort command
000010DE  6700 0106                188              BEQ     SORTTEST
000010E2  0C11 0045                189              CMP.B   #$45,(A1)   ;check for echo command
000010E6  6700 0026                190              BEQ     ECHOTEST
000010EA  0C11 002E                191              CMP.B   #$2E,(A1)   ;check for modify register command
000010EE  6700 01FA                192              BEQ     MODIFYREGTEST
000010F2  6000 152C                193              BRA     ERRORSR
000010F6  4CDF 7FFF                194  RESTORE:    MOVEM.L (SP)+,D0-D7/A0-A6
000010FA  4CDF 7FFF                195              MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
000010FE  588F                     196              ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001100                           197                                  ;EASY68k simulator starts in supervisor mode
00001100  46DF                     198              MOVE    (SP)+,SR
00001102  201F                     199              MOVE.L  (SP)+,D0    ;save stack cuz it'll get destroyed
00001104  588F                     200              ADD.L   #4,SP       ;get rid of PC, itll fix itself
00001106  2E40                     201              MOVE.L  D0,SP
00001108  4280                     202              CLR.L   D0          ;no longer needed
0000110A                           203  
0000110A  6000 FF64                204              BRA     SHELL
0000110E                           205  *--------------------------------------------------------------------------------------*
0000110E                           206  
0000110E  5289                     207  ECHOTEST:   ADD.L   #1,A1
00001110  0C19 0043                208              CMP.B   #$43,(A1)+   ;C?
00001114  6600 150A                209              BNE     ERRORSR
00001118  0C19 0048                210              CMP.B   #$48,(A1)+   ;H?
0000111C  6600 1502                211              BNE     ERRORSR
00001120  0C19 004F                212              CMP.B   #$4F,(A1)+   ;O?
00001124  6600 14FA                213              BNE     ERRORSR
00001128  0C19 0020                214              CMP.B   #$20,(A1)+   ;SPACE?
0000112C  6700 01D2                215              BEQ     ECHO
00001130  6000 14EE                216              BRA     ERRORSR
00001134                           217  *--------------------------------------------------------------------------------------*
00001134                           218  
00001134                           219  
00001134                           220  *--------------------------------------------------------------------------------------*
00001134                           221  
00001134  5289                     222  BLCKTEST:   ADD.L   #1,A1
00001136  0C11 0046                223              CMP.B   #$46,(A1)   ;BF?
0000113A  6700 0084                224              BEQ     BFTEST
0000113E  0C11 004D                225              CMP.B   #$4D,(A1)   ;BMOV?
00001142  6700 005A                226              BEQ     BMOVTEST
00001146  0C11 0054                227              CMP.B   #$54,(A1)   ;BTST?
0000114A  6700 0030                228              BEQ     BTSTTEST
0000114E  0C11 0053                229              CMP.B   #$53,(A1)   ;BSCH?
00001152  6700 0006                230              BEQ     BSCHTEST
00001156  6000 14C8                231              BRA     ERRORSR
0000115A                           232  *--------------------------------------------------------------------------------------*
0000115A                           233  
0000115A  5289                     234  BSCHTEST:   ADD.L   #1,A1
0000115C  0C11 0043                235              CMP.B   #$43,(A1)
00001160  6600 14BE                236              BNE     ERRORSR
00001164  5289                     237              ADD.L   #1,A1
00001166  0C11 0048                238              CMP.B   #$48,(A1)
0000116A  6600 14B4                239              BNE     ERRORSR
0000116E  5289                     240              ADD.L   #1,A1
00001170  0C11 0020                241              CMP.B   #$20,(A1)
00001174  6600 14AA                242              BNE     ERRORSR
00001178  6000 0EC6                243              BRA     BSCH
0000117C                           244                        
0000117C                           245  *--------------------------------------------------------------------------------------*
0000117C                           246  
0000117C                           247  BTSTTEST:   
0000117C  5289                     248              ADD.L   #1,A1
0000117E  0C11 0053                249              CMP.B   #$53,(A1)
00001182  6600 149C                250              BNE     ERRORSR
00001186  5289                     251              ADD.L   #1,A1
00001188  0C11 0054                252              CMP.B   #$54,(A1)
0000118C  6600 1492                253              BNE     ERRORSR
00001190  5289                     254              ADD.L   #1,A1
00001192  0C11 0020                255              CMP.B   #$20,(A1)
00001196  6600 1488                256              BNE     ERRORSR
0000119A  6000 0DCE                257              BRA     BTST
0000119E                           258  
0000119E                           259  *--------------------------------------------------------------------------------------*
0000119E                           260  
0000119E  5289                     261  BMOVTEST:   ADD.L   #1,A1
000011A0  0C11 004F                262              CMP.B   #$4F,(A1)
000011A4  6600 147A                263              BNE     ERRORSR
000011A8  5289                     264              ADD.L   #1,A1
000011AA  0C11 0056                265              CMP.B   #$56,(A1)
000011AE  6600 1470                266              BNE     ERRORSR
000011B2  5289                     267              ADD.L   #1,A1
000011B4  0C11 0020                268              CMP.B   #$20,(A1)
000011B8  6600 1466                269              BNE     ERRORSR
000011BC  6000 0D1E                270              BRA     BMOV
000011C0                           271  *--------------------------------------------------------------------------------------*
000011C0  5289                     272  BFTEST:     ADD.L   #1,A1
000011C2  0C11 0020                273              CMP.B   #$20,(A1)
000011C6  6600 1458                274              BNE     ERRORSR
000011CA  6000 0C9A                275              BRA     BF
000011CE                           276  *--------------------------------------------------------------------------------------*
000011CE                           277  
000011CE  5289                     278  DFTST:      ADD.L   #1,A1
000011D0  0C11 0046                279              CMP.B   #$46,(A1)
000011D4  6600 144A                280              BNE     ERRORSR
000011D8  5289                     281              ADD.L   #1,A1
000011DA  0C11 0000                282              CMP.B   #$00,(A1)
000011DE  6600 1440                283              BNE     ERRORSR
000011E2  6000 0F60                284              BRA     DF
000011E6                           285  *--------------------------------------------------------------------------------------*
000011E6                           286  
000011E6  5289                     287  SORTTEST:    ADD.L   #1,A1
000011E8  0C11 004F                288              CMP.B   #$4F,(A1)   ;O?
000011EC  6600 1432                289              BNE     ERRORSR
000011F0  5289                     290               ADD.L   #1,A1
000011F2  0C11 0052                291              CMP.B   #$52,(A1)   ;R?
000011F6  6600 1428                292              BNE     ERRORSR
000011FA  5289                     293              ADD.L   #1,A1
000011FC  0C11 0054                294              CMP.B   #$54,(A1)   ;T?
00001200  6600 141E                295              BNE     ERRORSR
00001204  5289                     296              ADD.L   #1,A1
00001206  0C11 0057                297              CMP.B   #$57,(A1)   ;W?
0000120A  6600 1414                298              BNE     ERRORSR
0000120E  5289                     299              ADD.L   #1,A1
00001210  0C11 0020                300              CMP.B   #$20,(A1)
00001214  6600 140A                301              BNE     ERRORSR
00001218                           302  
00001218  6000 08EA                303              BRA     SORTW
0000121C                           304  *--------------------------------------------------------------------------------------*
0000121C                           305  
0000121C  5289                     306  GOTST:      ADD.L   #1,A1
0000121E  0C11 004F                307              CMP.B   #$4F,(A1)
00001222  6600 13FC                308              BNE     ERRORSR
00001226  5289                     309              ADD.L   #1,A1
00001228  0C19 0020                310              CMP.B   #$20,(A1)+
0000122C  6600 13F2                311              BNE     ERRORSR
00001230  6000 0EF4                312              BRA     GO
00001234                           313  *--------------------------------------------------------------------------------------*
00001234                           314  
00001234  5289                     315  HELPORHXDC: ADD.L   #1,A1
00001236  0C11 0045                316              CMP.B   #$45,(A1)   ;is it help?
0000123A  6700 000E                317              BEQ     HELPTST
0000123E  0C11 0058                318              CMP.B   #$58,(A1)   ;or is it hxdc
00001242  6700 0084                319              BEQ     HXDCTEST
00001246  6000 13D8                320              BRA     ERRORSR     
0000124A                           321  *--------------------------------------------------------------------------------------*
0000124A                           322  
0000124A                           323  HELPTST:   
0000124A  5289                     324             ADD.L   #1,A1   ; check next char
0000124C  0C11 004C                325             CMP.B    #$4C,(A1) ;check for L
00001250  6600 13CE                326             BNE      ERRORSR
00001254  5289                     327             ADD.L   #1,A1
00001256  0C11 0050                328             CMP.B    #$50,(A1)   ;check for P
0000125A  6600 13C4                329             BNE      ERRORSR
0000125E  5289                     330             ADD.L   #1,A1   ;check for anything else
00001260  0C11 0000                331             CMP.B    #$00,(A1)
00001264  6600 13BA                332             BNE      ERRORSR
00001268  6000 0504                333             BRA      HELP
0000126C                           334              
0000126C                           335  
0000126C                           336   
0000126C                           337  *--------------------------------------------------------------------------------------*
0000126C                           338              
0000126C  5289                     339  MEMTEST:    ADD.L   #1,A1
0000126E  0C11 0053                340              CMP.B   #$53,(A1)
00001272  6700 0016                341              BEQ     MSSPCTEST
00001276  0C11 0044                342              CMP.B   #$44,(A1)
0000127A  6700 001C                343              BEQ     MDSPCTEST
0000127E  0C11 004D                344              CMP.B   #$4D,(A1)
00001282  6700 0036                345              BEQ     MMSPCTEST
00001286  6000 1398                346              BRA     ERRORSR
0000128A                           347              
0000128A  5289                     348  MSSPCTEST   ADD.L   #1,A1
0000128C  0C11 0020                349              CMP.B   #$20,(A1)
00001290  6700 06EE                350              BEQ     MEMSET
00001294  6000 138A                351              BRA     ERRORSR
00001298                           352              
00001298                           353  MDSPCTEST:  
00001298  5289                     354              ADD.L   #1,A1
0000129A  0C11 0053                355              CMP.B   #$53,(A1)
0000129E  6600 1380                356              BNE     ERRORSR
000012A2  5289                     357              ADD.L   #1,A1
000012A4  0C11 0050                358              CMP.B   #$50,(A1)
000012A8  6600 1376                359              BNE     ERRORSR
000012AC  5289                     360              ADD.L   #1,A1
000012AE  0C11 0020                361              CMP.B   #$20,(A1)
000012B2  6700 0720                362              BEQ     MEMDISP          
000012B6  6000 1368                363              BRA     ERRORSR
000012BA                           364             
000012BA  5289                     365  MMSPCTEST:  ADD.L   #1,A1
000012BC  0C11 0020                366              CMP.B   #$20,(A1)
000012C0  6700 0928                367              BEQ     MM          
000012C4  6000 135A                368              BRA     ERRORSR
000012C8                           369  *--------------------------------------------------------------------------------------*
000012C8                           370  HXDCTEST:   
000012C8  5289                     371              ADD.L   #1,A1
000012CA  0C11 0044                372              CMP.B   #$44,(A1)
000012CE  6600 1350                373              BNE     ERRORSR
000012D2  5289                     374              ADD.L   #1,A1
000012D4  0C11 0043                375              CMP.B   #$43,(A1)
000012D8  6600 1346                376              BNE     ERRORSR
000012DC  5289                     377              ADD.L   #1,A1
000012DE  0C11 0020                378              CMP.B   #$20,(A1)
000012E2  6600 133C                379              BNE     ERRORSR
000012E6  6000 078E                380              BRA     HXDC
000012EA                           381  *--------------------------------------------------------------------------------------*
000012EA                           382  MODIFYREGTEST:
000012EA  5289                     383              ADD.L   #1,A1
000012EC  0C11 0044                384              CMP.B   #$44,(A1)
000012F0  6700 0028                385              BEQ     MRD
000012F4  0C11 0041                386              CMP.B   #$41,(A1)
000012F8  6700 0066                387              BEQ     MRA
000012FC  6000 1322                388              BRA     ERRORSR
00001300                           389              
00001300                           390  *----------------------------USER DEFINED COMMANDS---------------------------------*
00001300                           391  *--------------------------------------------------------------------------------------*
00001300                           392  ECHO: *This command was made for fun. What terminal DOESN'T have echo?*
00001300                           393  
00001300  2449                     394          MOVE.L  A1,A2   ;setup to find end of string
00001302  0C1A 0000                395  EEND:   CMP.B   #$00,(A2)+
00001306  6700 0004                396          BEQ     EFOUND
0000130A  60F6                     397          BRA     EEND
0000130C                           398  EFOUND:
0000130C  538A                     399          SUB.L   #1,A2   ;off by one
0000130E  95C9                     400          SUB.L   A1,A2   ;find out how many bytes
00001310  220A                     401          MOVE.L  A2,D1   ;place it for trap function
00001312  7000                     402          MOVE.L  #0,D0
00001314  4E4F                     403          TRAP    #15
00001316                           404          
00001316  6000 FDDE                405          BRA RESTORE
0000131A                           406  *--------------------------------------------------------------------------------------*
0000131A                           407  MODIFYREGS:
0000131A                           408  
0000131A                           409  MRD:
0000131A  5289                     410          ADD.L   #1,A1   ;inc
0000131C  0C11 0030                411          CMP.B   #$30,(A1)
00001320  6700 007C                412          BEQ     MRD0
00001324  0C11 0031                413          CMP.B   #$31,(A1)
00001328  6700 00B4                414          BEQ     MRD1
0000132C  0C11 0032                415          CMP.B   #$32,(A1)
00001330  6700 00EC                416          BEQ     MRD2
00001334  0C11 0033                417          CMP.B   #$33,(A1)
00001338  6700 0124                418          BEQ     MRD3
0000133C  0C11 0034                419          CMP.B   #$34,(A1)
00001340  6700 015C                420          BEQ     MRD4
00001344  0C11 0035                421          CMP.B   #$35,(A1)
00001348  6700 0194                422          BEQ     MRD5
0000134C  0C11 0036                423          CMP.B   #$36,(A1)
00001350  6700 01CC                424          BEQ     MRD6
00001354  0C11 0037                425          CMP.B   #$37,(A1)
00001358  6700 0204                426          BEQ     MRD7
0000135C  6000 12C2                427          BRA     ERRORSR
00001360                           428  
00001360                           429  MRA:
00001360  5289                     430          ADD.L   #1,A1   ;inc
00001362  0C11 0030                431          CMP.B   #$30,(A1)
00001366  6700 0236                432          BEQ     MRA0
0000136A  0C11 0031                433          CMP.B   #$31,(A1)
0000136E  6700 026E                434          BEQ     MRA1
00001372  0C11 0032                435          CMP.B   #$32,(A1)
00001376  6700 02A6                436          BEQ     MRA2
0000137A  0C11 0033                437          CMP.B   #$33,(A1)
0000137E  6700 02DE                438          BEQ     MRA3
00001382  0C11 0034                439          CMP.B   #$34,(A1)
00001386  6700 0316                440          BEQ     MRA4
0000138A  0C11 0035                441          CMP.B   #$35,(A1)
0000138E  6700 034E                442          BEQ     MRA5
00001392  0C11 0036                443          CMP.B   #$36,(A1)
00001396  6700 0386                444          BEQ     MRA6
0000139A  6000 1284                445          BRA     ERRORSR
0000139E                           446               
0000139E                           447  
0000139E                           448  
0000139E                           449          
0000139E                           450          
0000139E                           451  MRD0: 
0000139E  5289                     452          ADD.L   #1,A1
000013A0  0C19 0020                453          CMP.B   #$20,(A1)+
000013A4  6600 127A                454          BNE     ERRORSR
000013A8  2449                     455          MOVE.L  A1,A2
000013AA  264A                     456          MOVE.L  A2,A3
000013AC  4EB9 0000175E            457          JSR     MRDFINDDATA
000013B2  538B                     458          SUB.L   #1,A3
000013B4  4EB9 0000266C            459          JSR     ASCII_ADDRESS   ;convert data to hex
000013BA  2F05                     460          MOVE.L  D5,-(SP)        ;store it temporarily
000013BC  588F                     461          ADD.L   #4,SP       ;dont lose data
000013BE  4CDF 7FFF                462          MOVEM.L (SP)+,D0-D7/A0-A6
000013C2  4CDF 7FFF                463          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
000013C6  588F                     464          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
000013C8                           465                                  ;EASY68k simulator starts in supervisor mode
000013C8  46DF                     466          MOVE    (SP)+,SR
000013CA  588F                     467          ADD.L   #4,SP       ;skip saved stack
000013CC  9FFC 00000086            468          SUB.L   #134,SP     ;find data again
000013D2  2017                     469          MOVE.L  (SP),D0
000013D4  DFFC 0000008A            470          ADD.L   #138,SP     ;go back to original spot
000013DA  6000 FC94                471          BRA     SHELL
000013DE                           472               
000013DE                           473  MRD1:
000013DE  5289                     474          ADD.L   #1,A1
000013E0  0C19 0020                475          CMP.B   #$20,(A1)+
000013E4  6600 123A                476          BNE     ERRORSR
000013E8  2449                     477          MOVE.L  A1,A2
000013EA  264A                     478          MOVE.L  A2,A3
000013EC  4EB9 0000175E            479          JSR     MRDFINDDATA
000013F2  538B                     480          SUB.L   #1,A3
000013F4  4EB9 0000266C            481          JSR     ASCII_ADDRESS   ;convert data to hex
000013FA  2F05                     482          MOVE.L  D5,-(SP)        ;store it temporarily
000013FC  588F                     483          ADD.L   #4,SP       ;dont lose data
000013FE  4CDF 7FFF                484          MOVEM.L (SP)+,D0-D7/A0-A6
00001402  4CDF 7FFF                485          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001406  588F                     486          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001408                           487                                  ;EASY68k simulator starts in supervisor mode
00001408  46DF                     488          MOVE    (SP)+,SR
0000140A  588F                     489          ADD.L   #4,SP       ;skip saved stack
0000140C  9FFC 00000086            490          SUB.L   #134,SP     ;find data again
00001412  2217                     491          MOVE.L  (SP),D1
00001414  DFFC 0000008A            492          ADD.L   #138,SP     ;go back to original spot
0000141A  6000 FC54                493          BRA     SHELL
0000141E                           494  
0000141E                           495  MRD2:
0000141E  5289                     496          ADD.L   #1,A1
00001420  0C19 0020                497          CMP.B   #$20,(A1)+
00001424  6600 11FA                498          BNE     ERRORSR
00001428  2449                     499          MOVE.L  A1,A2
0000142A  264A                     500          MOVE.L  A2,A3
0000142C  4EB9 0000175E            501          JSR     MRDFINDDATA
00001432  538B                     502          SUB.L   #1,A3
00001434  4EB9 0000266C            503          JSR     ASCII_ADDRESS   ;convert data to hex
0000143A  2F05                     504          MOVE.L  D5,-(SP)        ;store it temporarily
0000143C  588F                     505          ADD.L   #4,SP       ;dont lose data
0000143E  4CDF 7FFF                506          MOVEM.L (SP)+,D0-D7/A0-A6
00001442  4CDF 7FFF                507          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001446  588F                     508          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001448                           509                                  ;EASY68k simulator starts in supervisor mode
00001448  46DF                     510          MOVE    (SP)+,SR
0000144A  588F                     511          ADD.L   #4,SP       ;skip saved stack
0000144C  9FFC 00000086            512          SUB.L   #134,SP     ;find data again
00001452  2417                     513          MOVE.L  (SP),D2
00001454  DFFC 0000008A            514          ADD.L   #138,SP     ;go back to original spot
0000145A  6000 FC14                515          BRA     SHELL
0000145E                           516  
0000145E                           517  MRD3:
0000145E  5289                     518          ADD.L   #1,A1
00001460  0C19 0020                519          CMP.B   #$20,(A1)+
00001464  6600 11BA                520          BNE     ERRORSR
00001468  2449                     521          MOVE.L  A1,A2
0000146A  264A                     522          MOVE.L  A2,A3
0000146C  4EB9 0000175E            523          JSR     MRDFINDDATA
00001472  538B                     524          SUB.L   #1,A3
00001474  4EB9 0000266C            525          JSR     ASCII_ADDRESS   ;convert data to hex
0000147A  2F05                     526          MOVE.L  D5,-(SP)        ;store it temporarily
0000147C  588F                     527          ADD.L   #4,SP       ;dont lose data
0000147E  4CDF 7FFF                528          MOVEM.L (SP)+,D0-D7/A0-A6
00001482  4CDF 7FFF                529          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001486  588F                     530          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001488                           531                                  ;EASY68k simulator starts in supervisor mode
00001488  46DF                     532          MOVE    (SP)+,SR
0000148A  588F                     533          ADD.L   #4,SP       ;skip saved stack
0000148C  9FFC 00000086            534          SUB.L   #134,SP     ;find data again
00001492  2617                     535          MOVE.L  (SP),D3
00001494  DFFC 0000008A            536          ADD.L   #138,SP     ;go back to original spot
0000149A  6000 FBD4                537          BRA     SHELL
0000149E                           538  
0000149E                           539  MRD4:
0000149E  5289                     540          ADD.L   #1,A1
000014A0  0C19 0020                541          CMP.B   #$20,(A1)+
000014A4  6600 117A                542          BNE     ERRORSR
000014A8  2449                     543          MOVE.L  A1,A2
000014AA  264A                     544          MOVE.L  A2,A3
000014AC  4EB9 0000175E            545          JSR     MRDFINDDATA
000014B2  538B                     546          SUB.L   #1,A3
000014B4  4EB9 0000266C            547          JSR     ASCII_ADDRESS   ;convert data to hex
000014BA  2F05                     548          MOVE.L  D5,-(SP)        ;store it temporarily
000014BC  588F                     549          ADD.L   #4,SP       ;dont lose data
000014BE  4CDF 7FFF                550          MOVEM.L (SP)+,D0-D7/A0-A6
000014C2  4CDF 7FFF                551          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
000014C6  588F                     552          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
000014C8                           553                                  ;EASY68k simulator starts in supervisor mode
000014C8  46DF                     554          MOVE    (SP)+,SR
000014CA  588F                     555          ADD.L   #4,SP       ;skip saved stack
000014CC  9FFC 00000086            556          SUB.L   #134,SP     ;find data again
000014D2  2817                     557          MOVE.L  (SP),D4
000014D4  DFFC 0000008A            558          ADD.L   #138,SP     ;go back to original spot
000014DA  6000 FB94                559          BRA     SHELL
000014DE                           560  
000014DE                           561  MRD5:
000014DE  5289                     562          ADD.L   #1,A1
000014E0  0C19 0020                563          CMP.B   #$20,(A1)+
000014E4  6600 113A                564          BNE     ERRORSR
000014E8  2449                     565          MOVE.L  A1,A2
000014EA  264A                     566          MOVE.L  A2,A3
000014EC  4EB9 0000175E            567          JSR     MRDFINDDATA
000014F2  538B                     568          SUB.L   #1,A3
000014F4  4EB9 0000266C            569          JSR     ASCII_ADDRESS   ;convert data to hex
000014FA  2F05                     570          MOVE.L  D5,-(SP)        ;store it temporarily
000014FC  588F                     571          ADD.L   #4,SP       ;dont lose data
000014FE  4CDF 7FFF                572          MOVEM.L (SP)+,D0-D7/A0-A6
00001502  4CDF 7FFF                573          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001506  588F                     574          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001508                           575                                  ;EASY68k simulator starts in supervisor mode
00001508  46DF                     576          MOVE    (SP)+,SR
0000150A  588F                     577          ADD.L   #4,SP       ;skip saved stack
0000150C  9FFC 00000086            578          SUB.L   #134,SP     ;find data again
00001512  2A17                     579          MOVE.L  (SP),D5
00001514  DFFC 0000008A            580          ADD.L   #138,SP     ;go back to original spot
0000151A  6000 FB54                581          BRA     SHELL
0000151E                           582  
0000151E                           583  MRD6:
0000151E  5289                     584          ADD.L   #1,A1
00001520  0C19 0020                585          CMP.B   #$20,(A1)+
00001524  6600 10FA                586          BNE     ERRORSR
00001528  2449                     587          MOVE.L  A1,A2
0000152A  264A                     588          MOVE.L  A2,A3
0000152C  4EB9 0000175E            589          JSR     MRDFINDDATA
00001532  538B                     590          SUB.L   #1,A3
00001534  4EB9 0000266C            591          JSR     ASCII_ADDRESS   ;convert data to hex
0000153A  2F05                     592          MOVE.L  D5,-(SP)        ;store it temporarily
0000153C  588F                     593          ADD.L   #4,SP       ;dont lose data
0000153E  4CDF 7FFF                594          MOVEM.L (SP)+,D0-D7/A0-A6
00001542  4CDF 7FFF                595          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001546  588F                     596          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001548                           597                                  ;EASY68k simulator starts in supervisor mode
00001548  46DF                     598          MOVE    (SP)+,SR
0000154A  588F                     599          ADD.L   #4,SP       ;skip saved stack
0000154C  9FFC 00000086            600          SUB.L   #134,SP     ;find data again
00001552  2C17                     601          MOVE.L  (SP),D6
00001554  DFFC 0000008A            602          ADD.L   #138,SP     ;go back to original spot
0000155A  6000 FB14                603          BRA     SHELL
0000155E                           604  
0000155E                           605  MRD7:
0000155E  5289                     606          ADD.L   #1,A1
00001560  0C19 0020                607          CMP.B   #$20,(A1)+
00001564  6600 10BA                608          BNE     ERRORSR
00001568  2449                     609          MOVE.L  A1,A2
0000156A  264A                     610          MOVE.L  A2,A3
0000156C  4EB9 0000175E            611          JSR     MRDFINDDATA
00001572  538B                     612          SUB.L   #1,A3
00001574  4EB9 0000266C            613          JSR     ASCII_ADDRESS   ;convert data to hex
0000157A  2F05                     614          MOVE.L  D5,-(SP)        ;store it temporarily
0000157C  588F                     615          ADD.L   #4,SP       ;dont lose data
0000157E  4CDF 7FFF                616          MOVEM.L (SP)+,D0-D7/A0-A6
00001582  4CDF 7FFF                617          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001586  588F                     618          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001588                           619                                  ;EASY68k simulator starts in supervisor mode
00001588  46DF                     620          MOVE    (SP)+,SR
0000158A  588F                     621         ADD.L   #4,SP       ;skip saved stack
0000158C  9FFC 00000086            622          SUB.L   #134,SP     ;find data again
00001592  2E17                     623          MOVE.L  (SP),D7
00001594  DFFC 0000008A            624          ADD.L   #138,SP     ;go back to original spot
0000159A  6000 FAD4                625          BRA     SHELL
0000159E                           626  
0000159E                           627  MRA0:
0000159E  5289                     628          ADD.L   #1,A1
000015A0  0C19 0020                629          CMP.B   #$20,(A1)+
000015A4  6600 107A                630          BNE     ERRORSR
000015A8  2449                     631          MOVE.L  A1,A2
000015AA  264A                     632          MOVE.L  A2,A3
000015AC  4EB9 0000175E            633          JSR     MRDFINDDATA
000015B2  538B                     634          SUB.L   #1,A3
000015B4  4EB9 0000266C            635          JSR     ASCII_ADDRESS   ;convert data to hex
000015BA  2F05                     636          MOVE.L  D5,-(SP)        ;store it temporarily
000015BC  588F                     637          ADD.L   #4,SP       ;dont lose data
000015BE  4CDF 7FFF                638          MOVEM.L (SP)+,D0-D7/A0-A6
000015C2  4CDF 7FFF                639          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
000015C6  588F                     640          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
000015C8                           641                                  ;EASY68k simulator starts in supervisor mode
000015C8  46DF                     642          MOVE    (SP)+,SR
000015CA  588F                     643          ADD.L   #4,SP       ;skip saved stack
000015CC  9FFC 00000086            644          SUB.L   #134,SP     ;find data again
000015D2  2057                     645          MOVE.L  (SP),A0
000015D4  DFFC 0000008A            646          ADD.L   #138,SP     ;go back to original spot
000015DA  6000 FA94                647          BRA     SHELL
000015DE                           648  MRA1:
000015DE  5289                     649          ADD.L   #1,A1
000015E0  0C19 0020                650          CMP.B   #$20,(A1)+
000015E4  6600 103A                651          BNE     ERRORSR
000015E8  2449                     652          MOVE.L  A1,A2
000015EA  264A                     653          MOVE.L  A2,A3
000015EC  4EB9 0000175E            654          JSR     MRDFINDDATA
000015F2  538B                     655          SUB.L   #1,A3
000015F4  4EB9 0000266C            656          JSR     ASCII_ADDRESS   ;convert data to hex
000015FA  2F05                     657          MOVE.L  D5,-(SP)        ;store it temporarily
000015FC  588F                     658          ADD.L   #4,SP       ;dont lose data
000015FE  4CDF 7FFF                659          MOVEM.L (SP)+,D0-D7/A0-A6
00001602  4CDF 7FFF                660          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001606  588F                     661          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001608                           662                                  ;EASY68k simulator starts in supervisor mode
00001608  46DF                     663          MOVE    (SP)+,SR
0000160A  588F                     664         ADD.L   #4,SP       ;skip saved stack
0000160C  9FFC 00000086            665          SUB.L   #134,SP     ;find data again
00001612  2257                     666          MOVE.L  (SP),A1
00001614  DFFC 0000008A            667          ADD.L   #138,SP     ;go back to original spot
0000161A  6000 FA54                668          BRA     SHELL
0000161E                           669  
0000161E                           670  MRA2:
0000161E  5289                     671          ADD.L   #1,A1
00001620  0C19 0020                672          CMP.B   #$20,(A1)+
00001624  6600 0FFA                673          BNE     ERRORSR
00001628  2449                     674          MOVE.L  A1,A2
0000162A  264A                     675          MOVE.L  A2,A3
0000162C  4EB9 0000175E            676          JSR     MRDFINDDATA
00001632  538B                     677          SUB.L   #1,A3
00001634  4EB9 0000266C            678          JSR     ASCII_ADDRESS   ;convert data to hex
0000163A  2F05                     679          MOVE.L  D5,-(SP)        ;store it temporarily
0000163C  588F                     680          ADD.L   #4,SP       ;dont lose data
0000163E  4CDF 7FFF                681          MOVEM.L (SP)+,D0-D7/A0-A6
00001642  4CDF 7FFF                682          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001646  588F                     683          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001648                           684                                  ;EASY68k simulator starts in supervisor mode
00001648  46DF                     685          MOVE    (SP)+,SR
0000164A  588F                     686          ADD.L   #4,SP       ;skip saved stack
0000164C  9FFC 00000086            687          SUB.L   #134,SP     ;find data again
00001652  2457                     688          MOVE.L  (SP),A2
00001654  DFFC 0000008A            689          ADD.L   #138,SP     ;go back to original spot
0000165A  6000 FA14                690          BRA     SHELL
0000165E                           691          
0000165E                           692  MRA3:
0000165E  5289                     693          ADD.L   #1,A1
00001660  0C19 0020                694          CMP.B   #$20,(A1)+
00001664  6600 0FBA                695          BNE     ERRORSR
00001668  2449                     696          MOVE.L  A1,A2
0000166A  264A                     697          MOVE.L  A2,A3
0000166C  4EB9 0000175E            698          JSR     MRDFINDDATA
00001672  538B                     699          SUB.L   #1,A3
00001674  4EB9 0000266C            700          JSR     ASCII_ADDRESS   ;convert data to hex
0000167A  2F05                     701          MOVE.L  D5,-(SP)        ;store it temporarily
0000167C  588F                     702          ADD.L   #4,SP       ;dont lose data
0000167E  4CDF 7FFF                703          MOVEM.L (SP)+,D0-D7/A0-A6
00001682  4CDF 7FFF                704          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001686  588F                     705          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001688                           706                                  ;EASY68k simulator starts in supervisor mode
00001688  46DF                     707          MOVE    (SP)+,SR
0000168A  588F                     708          ADD.L   #4,SP       ;skip saved stack
0000168C  9FFC 00000086            709          SUB.L   #134,SP     ;find data again
00001692  2657                     710          MOVE.L  (SP),A3
00001694  DFFC 0000008A            711          ADD.L   #138,SP     ;go back to original spot
0000169A  6000 F9D4                712          BRA     SHELL
0000169E                           713  
0000169E                           714  MRA4:
0000169E  5289                     715          ADD.L   #1,A1
000016A0  0C19 0020                716          CMP.B   #$20,(A1)+
000016A4  6600 0F7A                717          BNE     ERRORSR
000016A8  2449                     718          MOVE.L  A1,A2
000016AA  264A                     719          MOVE.L  A2,A3
000016AC  4EB9 0000175E            720          JSR     MRDFINDDATA
000016B2  538B                     721          SUB.L   #1,A3
000016B4  4EB9 0000266C            722          JSR     ASCII_ADDRESS   ;convert data to hex
000016BA  2F05                     723          MOVE.L  D5,-(SP)        ;store it temporarily
000016BC  588F                     724          ADD.L   #4,SP       ;dont lose data
000016BE  4CDF 7FFF                725          MOVEM.L (SP)+,D0-D7/A0-A6
000016C2  4CDF 7FFF                726          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
000016C6  588F                     727          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
000016C8                           728                                  ;EASY68k simulator starts in supervisor mode
000016C8  46DF                     729          MOVE    (SP)+,SR
000016CA  588F                     730          ADD.L   #4,SP       ;skip saved stack
000016CC  9FFC 00000086            731          SUB.L   #134,SP     ;find data again
000016D2  2857                     732          MOVE.L  (SP),A4
000016D4  DFFC 0000008A            733          ADD.L   #138,SP     ;go back to original spot
000016DA  6000 F994                734          BRA     SHELL
000016DE                           735  
000016DE                           736  MRA5:
000016DE  5289                     737          ADD.L   #1,A1
000016E0  0C19 0020                738          CMP.B   #$20,(A1)+
000016E4  6600 0F3A                739          BNE     ERRORSR
000016E8  2449                     740          MOVE.L  A1,A2
000016EA  264A                     741          MOVE.L  A2,A3
000016EC  4EB9 0000175E            742          JSR     MRDFINDDATA
000016F2  538B                     743          SUB.L   #1,A3
000016F4  4EB9 0000266C            744          JSR     ASCII_ADDRESS   ;convert data to hex
000016FA  2F05                     745          MOVE.L  D5,-(SP)        ;store it temporarily
000016FC  588F                     746          ADD.L   #4,SP       ;dont lose data
000016FE  4CDF 7FFF                747          MOVEM.L (SP)+,D0-D7/A0-A6
00001702  4CDF 7FFF                748          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001706  588F                     749          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001708                           750                                  ;EASY68k simulator starts in supervisor mode
00001708  46DF                     751          MOVE    (SP)+,SR
0000170A  588F                     752         ADD.L   #4,SP       ;skip saved stack
0000170C  9FFC 00000086            753          SUB.L   #134,SP     ;find data again
00001712  2A57                     754          MOVE.L  (SP),A5
00001714  DFFC 0000008A            755          ADD.L   #138,SP     ;go back to original spot
0000171A  6000 F954                756          BRA     SHELL
0000171E                           757  
0000171E                           758  MRA6:
0000171E  5289                     759          ADD.L   #1,A1
00001720  0C19 0020                760          CMP.B   #$20,(A1)+
00001724  6600 0EFA                761          BNE     ERRORSR
00001728  2449                     762          MOVE.L  A1,A2
0000172A  264A                     763          MOVE.L  A2,A3
0000172C  4EB9 0000175E            764          JSR     MRDFINDDATA
00001732  538B                     765          SUB.L   #1,A3
00001734  4EB9 0000266C            766          JSR     ASCII_ADDRESS   ;convert data to hex
0000173A  2F05                     767          MOVE.L  D5,-(SP)        ;store it temporarily
0000173C  588F                     768          ADD.L   #4,SP       ;dont lose data
0000173E  4CDF 7FFF                769          MOVEM.L (SP)+,D0-D7/A0-A6
00001742  4CDF 7FFF                770          MOVEM.L (SP)+,D0-D7/A0-A6 ;double restore because of DF hack workaround
00001746  588F                     771          ADD.L   #4,SP       ;account for USP, it'll fix itself (it shouldn't be used)
00001748                           772                                  ;EASY68k simulator starts in supervisor mode
00001748  46DF                     773          MOVE    (SP)+,SR
0000174A  588F                     774          ADD.L   #4,SP       ;skip saved stack
0000174C  9FFC 00000086            775          SUB.L   #134,SP     ;find data again
00001752  2C57                     776          MOVE.L  (SP),A6
00001754  DFFC 0000008A            777          ADD.L   #138,SP     ;go back to original spot
0000175A  6000 F914                778          BRA     SHELL
0000175E                           779  
0000175E                           780  MRDFINDDATA:
0000175E  0C1B 0000                781          CMP.B   #$00,(A3)+
00001762  6700 0004                782          BEQ     GOBACK
00001766  60F6                     783          BRA     MRDFINDDATA
00001768  4E75                     784  GOBACK: RTS
0000176A                           785          
0000176A                           786  
0000176A  6000 F98A                787          BRA RESTORE
0000176E                           788  *--------------------REQUIRED COMMAND DEFINITION START---------------------------------*
0000176E                           789  *--------------------------------------------------------------------------------------*
0000176E  43F8 3063                790  HELP:       LEA     HTXT,A1     ;list of commands test
00001772  323C 0011                791              MOVE.W  #17,D1
00001776  103C 0000                792              MOVE.B  #0,D0
0000177A  4E4F                     793              TRAP    #15
0000177C  323C 0000                794              MOVE.W  #0,D1       ;newline
00001780  4E4F                     795              TRAP    #15
00001782                           796              
00001782  43F8 3074                797              LEA     HTXT1,A1    ;mem display command
00001786  323C 004B                798              MOVE.W  #75,D1
0000178A  103C 0000                799              MOVE.B  #0,D0
0000178E  4E4F                     800              TRAP    #15
00001790  43F8 30BF                801              LEA     HTXT1A,A1   ;mem display
00001794  323C 003D                802              MOVE.W  #61,D1
00001798  103C 0000                803              MOVE.B  #0,D0
0000179C  4E4F                     804              TRAP    #15
0000179E  43F8 30FC                805              LEA     HTXT1B,A1   ;mem display
000017A2  323C 0014                806              MOVE.W  #20,D1
000017A6  103C 0000                807              MOVE.B  #0,D0
000017AA  4E4F                     808              TRAP    #15
000017AC  323C 0000                809              MOVE.W  #0,D1       ;newline
000017B0  4E4F                     810              TRAP    #15
000017B2                           811              
000017B2  43F8 3110                812              LEA     HTXT2,A1    ;hxdec command text
000017B6  323C 004B                813              MOVE.W  #75,D1
000017BA  103C 0000                814              MOVE.B  #0,D0
000017BE  4E4F                     815              TRAP    #15
000017C0  123C 0000                816              MOVE.B  #0,D1       ;newline
000017C4  4E4F                     817              TRAP    #15
000017C6                           818              
000017C6  43F8 315B                819              LEA     HTXT3,A1    ;sort command text
000017CA  323C 0045                820              MOVE.W  #69,D1
000017CE  103C 0000                821              MOVE.B  #0,D0
000017D2  4E4F                     822              TRAP    #15
000017D4  43F8 31A0                823              LEA     HTXT3A,A1    ;sort command text continued
000017D8  323C 0039                824              MOVE.W  #57,D1
000017DC  103C 0000                825              MOVE.B  #0,D0
000017E0  4E4F                     826              TRAP    #15
000017E2  43F8 31D9                827              LEA     HTXT3B,A1    ;sort command text continued
000017E6  323C 0014                828              MOVE.W  #20,D1
000017EA  103C 0000                829              MOVE.B  #0,D0
000017EE  4E4F                     830              TRAP    #15
000017F0  43F8 31ED                831              LEA     HTXT3C,A1    ;sort command text continued
000017F4  323C 0015                832              MOVE.W  #21,D1
000017F8  103C 0000                833              MOVE.B  #0,D0
000017FC  4E4F                     834              TRAP    #15
000017FE  43F8 3202                835              LEA     HTXT3D,A1    ;sort command text continued
00001802  323C 001D                836              MOVE.W  #29,D1
00001806  103C 0000                837              MOVE.B  #0,D0
0000180A  4E4F                     838              TRAP    #15
0000180C  43F8 321F                839              LEA     HTXT3E,A1    ;sort command text continued
00001810  323C 0033                840              MOVE.W  #51,D1
00001814  103C 0000                841              MOVE.B  #0,D0
00001818  4E4F                     842              TRAP    #15
0000181A  123C 0000                843              MOVE.B  #0,D1       ;newline
0000181E  4E4F                     844              TRAP    #15
00001820                           845              
00001820  43F8 3252                846              LEA     HTXT4,A1    ;memory modify command text 
00001824  323C 0047                847              MOVE.W  #71,D1
00001828  103C 0000                848              MOVE.B  #0,D0
0000182C  4E4F                     849              TRAP    #15
0000182E  43F8 3299                850              LEA     HTXT4A,A1    ;mem modify command text continued
00001832  323C 0045                851              MOVE.W  #69,D1
00001836  103C 0000                852              MOVE.B  #0,D0
0000183A  4E4F                     853              TRAP    #15
0000183C  43F8 32DE                854              LEA     HTXT4B,A1    ;mem modify command text continued
00001840  323C 001B                855              MOVE.W  #27,D1
00001844  103C 0000                856              MOVE.B  #0,D0
00001848  4E4F                     857              TRAP    #15
0000184A  43F8 32F9                858              LEA     HTXT4C,A1    ;mem modify command text continued
0000184E  323C 001E                859              MOVE.W  #30,D1
00001852  103C 0000                860              MOVE.B  #0,D0
00001856  4E4F                     861              TRAP    #15
00001858  43F8 3317                862              LEA     HTXT4D,A1    ;mem modify command text continued
0000185C  323C 001F                863              MOVE.W  #31,D1
00001860  103C 0000                864              MOVE.B  #0,D0
00001864  4E4F                     865              TRAP    #15
00001866  43F8 3336                866              LEA     HTXT4E,A1    ;mem modify command text continued
0000186A  323C 0024                867              MOVE.W  #36,D1
0000186E  103C 0000                868              MOVE.B  #0,D0
00001872  4E4F                     869              TRAP    #15
00001874  123C 0000                870              MOVE.B  #0,D1
00001878  4E4F                     871              TRAP    #15         ;newline
0000187A                           872              
0000187A  43F8 335A                873              LEA     HTXT5,A1    ;memory set command text 
0000187E  323C 0046                874              MOVE.W  #70,D1
00001882  103C 0000                875              MOVE.B  #0,D0
00001886  4E4F                     876              TRAP    #15
00001888  43F8 33A0                877              LEA     HTXT5A,A1    ;memory set command text continued
0000188C  323C 0009                878              MOVE.W  #9,D1
00001890  103C 0000                879              MOVE.B  #0,D0
00001894  4E4F                     880              TRAP    #15
00001896  123C 0000                881              MOVE.B  #0,D1       ;newline
0000189A  4E4F                     882              TRAP    #15
0000189C                           883              
0000189C  43F8 33A9                884              LEA     HTXT6,A1    ;block fill command text
000018A0  323C 0045                885              MOVE.W  #69,D1
000018A4  103C 0000                886              MOVE.B  #0,D0
000018A8  4E4F                     887              TRAP    #15
000018AA  43F8 33EF                888              LEA     HTXT6A,A1    ;block fill command text
000018AE  323C 0048                889              MOVE.W  #72,D1
000018B2  103C 0000                890              MOVE.B  #0,D0
000018B6  4E4F                     891              TRAP    #15
000018B8  43F8 3437                892              LEA     HTXT6B,A1    ;block fill command text
000018BC  323C 0026                893              MOVE.W  #38,D1
000018C0  103C 0000                894              MOVE.B  #0,D0
000018C4  4E4F                     895              TRAP    #15
000018C6  123C 0000                896              MOVE.B  #0,D1
000018CA  4E4F                     897              TRAP    #15         ;newline
000018CC                           898              
000018CC                           899              
000018CC  43F8 345D                900              LEA     HTXT7,A1    ;block move command text
000018D0  323C 0044                901              MOVE.W  #68,D1
000018D4  103C 0000                902              MOVE.B  #0,D0
000018D8  4E4F                     903              TRAP    #15
000018DA  43F8 34A1                904              LEA     HTXT7A,A1    ;block move command text
000018DE  323C 0048                905              MOVE.W  #72,D1
000018E2  103C 0000                906              MOVE.B  #0,D0
000018E6  4E4F                     907              TRAP    #15
000018E8  43F8 34E9                908              LEA     HTXT7B,A1    ;block move command text
000018EC  323C 0018                909              MOVE.W  #24,D1
000018F0  103C 0000                910              MOVE.B  #0,D0
000018F4  4E4F                     911              TRAP    #15
000018F6  123C 0000                912              MOVE.B  #0,D1       ;newline
000018FA  4E4F                     913              TRAP    #15
000018FC                           914              
000018FC  43F8 3501                915              LEA     HTXT8,A1    ;block test command text
00001900  323C 0047                916              MOVE.W  #71,D1
00001904  103C 0000                917              MOVE.B  #0,D0
00001908  4E4F                     918              TRAP    #15
0000190A  43F8 3548                919              LEA     HTXT8A,A1    ;block test command text
0000190E  323C 0028                920              MOVE.W  #40,D1
00001912  103C 0000                921              MOVE.B  #0,D0
00001916  4E4F                     922              TRAP    #15
00001918  123C 0000                923              MOVE.B  #0,D1       ;newline
0000191C  4E4F                     924              TRAP    #15
0000191E                           925              
0000191E  43F8 3570                926              LEA     HTXT9,A1    ;block search command text
00001922  323C 0046                927              MOVE.W  #70,D1
00001926  103C 0000                928              MOVE.B  #0,D0
0000192A  4E4F                     929              TRAP    #15
0000192C  43F8 35B8                930              LEA     HTXT9A,A1    ;block search command text
00001930  323C 002D                931              MOVE.W  #45,D1
00001934  103C 0000                932              MOVE.B  #0,D0
00001938  4E4F                     933              TRAP    #15
0000193A  123C 0000                934              MOVE.B  #0,D1       ;newline
0000193E  4E4F                     935              TRAP    #15
00001940                           936              
00001940  43F8 35E5                937              LEA     HTXT10,A1    ;go command text
00001944  323C 003D                938              MOVE.W  #61,D1
00001948  103C 0000                939              MOVE.B  #0,D0
0000194C  4E4F                     940              TRAP    #15
0000194E  123C 0000                941              MOVE.B  #0,D1      ;newline
00001952  4E4F                     942              TRAP    #15
00001954                           943  
00001954  43F8 3622                944              LEA     HTXT11,A1   ;df command text   
00001958  323C 0038                945              MOVE.W  #56,D1
0000195C  103C 0000                946              MOVE.B  #0,D0
00001960  4E4F                     947              TRAP    #15
00001962  123C 0000                948              MOVE.B  #0,D1
00001966  4E4F                     949              TRAP    #15
00001968                           950              
00001968  43F8 365A                951              LEA     HTXT12,A1   ;help command text
0000196C  323C 0042                952              MOVE.W  #66,D1
00001970  103C 0000                953              MOVE.B  #0,D0
00001974  4E4F                     954              TRAP    #15
00001976  123C 0000                955              MOVE.B  #0,D1       ;newline
0000197A  4E4F                     956              TRAP    #15   
0000197C  6000 F778                957              BRA     RESTORE  
00001980                           958  *--------------------------------------------------------------------------------------*
00001980                           959  *Fix ASCII String input? ask in lab*
00001980  45F8 3000                960  MEMSET:     LEA     BUFFER,A2
00001984  568A                     961              ADD.L   #3,A2
00001986  264A                     962              MOVE.L  A2,A3   ;set up to find end
00001988  0C1B 0000                963  FINDEND:    CMP.B   #$00,(A3)+
0000198C  6700 0004                964              BEQ     MEMCONT
00001990  60F6                     965              BRA     FINDEND
00001992  538B                     966  MEMCONT:    SUB.L  #1,A3   ;get rid of off by one erro
00001994  121A                     967              MOVE.B  (A2)+,D1
00001996  1412                     968              MOVE.B  (A2),D2
00001998  1601                     969              MOVE.B  D1,D3       ;pass value to subroutine
0000199A  4EB9 00002630            970              JSR     ASCII_TO_BCD           
000019A0  1203                     971              MOVE.B  D3,D1       ;get converted value
000019A2  1602                     972              MOVE.B  D2,D3       ;pass value
000019A4  4EB9 00002630            973              JSR     ASCII_TO_BCD
000019AA  1403                     974              MOVE.B  D3,D2       ;get returned value
000019AC  1601                     975              MOVE.B  D1,D3
000019AE  4EB9 0000264E            976              JSR     BCD_TO_HEX
000019B4  1203                     977              MOVE.B  D3,D1
000019B6  1602                     978              MOVE.B  D2,D3
000019B8  4EB9 0000264E            979              JSR     BCD_TO_HEX
000019BE  1403                     980              MOVE.B  D3,D2
000019C0  E999                     981              ROL.L   #4,D1       ;put data in correct place
000019C2  D441                     982              ADD     D1,D2       ;get combined data input
000019C4  548A                     983              ADD.L   #2,A2       ;go to start of address
000019C6  4EB9 0000266C            984              JSR     ASCII_ADDRESS  ;get address in workable form
000019CC  2845                     985              MOVE.L  D5,A4       ;load target address
000019CE  1882                     986              MOVE.B  D2,(A4)       ;put data in target address
000019D0  6000 F724                987              BRA     RESTORE                 ;return to shell
000019D4                           988  *--------------------------------------------------------------------------------------*
000019D4  45F8 3000                989  MEMDISP:    LEA     BUFFER,A2
000019D8  7C01                     990              MOVE.L  #1,D6       ;counter for how many times to loop
000019DA  5A8A                     991              ADD.L   #5,A2       ;get first address
000019DC  264A                     992              MOVE.L  A2,A3       
000019DE  0C1B 0020                993  FINDEND1:   CMP.B   #$20,(A3)+
000019E2  6700 0004                994              BEQ     FINDNEXT
000019E6  60F6                     995              BRA     FINDEND1  
000019E8  284B                     996  FINDNEXT:   MOVE.L  A3,A4
000019EA  2A4B                     997              MOVE.L  A3,A5
000019EC  538B                     998              SUB.L   #1,A3   ;get rid of off by one error
000019EE  0C1D 0000                999  FINDEND2:   CMP.B   #$00,(A5)+
000019F2  6700 0004               1000              BEQ     MEMNEXT
000019F6  60F6                    1001              BRA     FINDEND2
000019F8  538D                    1002  MEMNEXT:    SUB.L   #1,A5   ;off by one error
000019FA  4EB9 0000266C           1003              JSR     ASCII_ADDRESS
00001A00  2C45                    1004              MOVE.L  D5,A6   ;put 1st address in A6
00001A02  244C                    1005              MOVE.L  A4,A2
00001A04  264D                    1006              MOVE.L  A5,A3
00001A06  4EB9 0000266C           1007              JSR ASCII_ADDRESS
00001A0C  2A45                    1008              MOVE.L  D5,A5   ;second address in A5
00001A0E  204E                    1009              MOVE.L  A6,A0   ;for second run through
00001A10  224D                    1010              MOVE.L  A5,A1   ;see above comment
00001A12  D3FC 00000010           1011              ADD.L   #16,A1 ;16 byte offset
00001A18  48E7 0040               1012              MOVEM.L A1,-(SP)
00001A1C  BBCE                    1013  DISPLOOP:   CMP.L   A6,A5
00001A1E  6D00 0034               1014              BLT     SECONDLOOP
00001A22  260E                    1015              MOVE.L  A6,D3
00001A24  4EB9 000026AC           1016              JSR     HEXTOASCII
00001A2A  97CA                    1017              SUB.L   A2,A3
00001A2C  220B                    1018              MOVE.L  A3,D1   ;number of ascii values to display
00001A2E  224A                    1019              MOVE.L  A2,A1
00001A30  7001                    1020              MOVE.L  #1,D0
00001A32  4E4F                    1021              TRAP    #15
00001A34  43F8 36C8               1022              LEA     SPACE,A1
00001A38  7201                    1023              MOVE.L #1,D1
00001A3A  4E4F                    1024              TRAP    #15
00001A3C  4283                    1025              CLR.L   D3
00001A3E  1616                    1026              MOVE.B  (A6),D3
00001A40  4EB9 000026AC           1027              JSR     HEXTOASCII
00001A46  97CA                    1028              SUB.L   A2,A3
00001A48  220B                    1029              MOVE.L  A3,D1
00001A4A  224A                    1030              MOVE.L  A2,A1
00001A4C  7000                    1031              MOVE.L  #0,D0
00001A4E  4E4F                    1032              TRAP    #15
00001A50  528E                    1033              ADD.L   #1,A6
00001A52  60C8                    1034              BRA     DISPLOOP
00001A54                          1035              
00001A54                          1036  SECONDLOOP: 
00001A54  103C 0000               1037              MOVE.B  #0,D0
00001A58  123C 0000               1038              MOVE.B  #0,D1
00001A5C  4E4F                    1039              TRAP    #15
00001A5E  4CDF 0200               1040              MOVEM.L (SP)+,A1
00001A62  2C48                    1041              MOVE.L  A0,A6   ;reinit
00001A64  2A49                    1042              MOVE.L  A1,A5
00001A66  5386                    1043              SUBI.L  #1,D6
00001A68  BCBC 00000000           1044              CMP.L   #$0,D6
00001A6E  67AC                    1045              BEQ     DISPLOOP
00001A70  598F                    1046              SUB.L   #4,SP   ;off by long error on stack
00001A72  6000 F682               1047              BRA     RESTORE
00001A76                          1048              
00001A76                          1049  *--------------------------------------------------------------------------------------*
00001A76                          1050  
00001A76  45F8 3000               1051  HXDC:   LEA BUFFER,A2   ;load buffer
00001A7A  5A8A                    1052          ADD.L   #5,A2   ; start of number
00001A7C  264A                    1053          MOVE.L  A2,A3   ;set up end pointer
00001A7E  7201                    1054          MOVE.L  #1,D1   ;set up 16's place
00001A80  4282                    1055          CLR.L   D2      ;clear total
00001A82  4283                    1056          CLR.L   D3      ;temp holder for number
00001A84  4286                    1057          CLR.L   D6      ;Final Value in BCD
00001A86  283C 00002710           1058          MOVE.L  #10000,D4    ;maximum 10's place of converted number
00001A8C  7A10                    1059          MOVE.L  #16,D5      ;Max number of rotates needed
00001A8E  4BF8 3050               1060          LEA OUTPUTBUFF,A5
00001A92  49F8 3050               1061          LEA OUTPUTBUFF,A4   ;set up start pointer
00001A96                          1062  FINDLASTNUM:    
00001A96  0C1B 0000               1063          CMP.B #$00,(A3)+
00001A9A  6700 0004               1064          BEQ     CONVERTMINUS1
00001A9E  60F6                    1065          BRA     FINDLASTNUM
00001AA0                          1066  CONVERTMINUS1:   
00001AA0  538B                    1067               SUB.L   #1,A3 ; cure off by 1 error
00001AA2                          1068  CONVERT:
00001AA2  538B                    1069              SUB.L   #1,A3
00001AA4  B4CB                    1070              CMP   A3,A2
00001AA6  6E00 0028               1071              BGT   ENDCONVERT
00001AAA  0C13 0040               1072              CMP.B   #$40,(A3)
00001AAE  6E00 000A               1073              BGT     HIGHHEX
00001AB2  0413 0030               1074              SUBI.B  #$30,(A3)   ;get hex value
00001AB6  6000 0006               1075              BRA     COMPUTATION
00001ABA  0413 0037               1076  HIGHHEX:     SUBI.B  #$37,(A3)  ;get hex value
00001ABE                          1077  COMPUTATION:
00001ABE  1613                    1078              MOVE.B  (A3),D3 
00001AC0  C6C1                    1079              MULU    D1,D3   ;get 16's place
00001AC2                          1080             ; DIVU    #16,D3  ;get rid of off by 1 exponent error
00001AC2  C2FC 0010               1081              MULU    #16,D1  ;inc 16's place counter
00001AC6  1883                    1082              MOVE.B  D3,(A4)
00001AC8  538C                    1083              SUB.L   #1,A4
00001ACA  D483                    1084              ADD.L   D3,D2   ;store it in total for debugging 
00001ACC  4283                    1085              CLR.L   D3      ;get rid of any numbers in there   
00001ACE  60D2                    1086              BRA     CONVERT     
00001AD0                          1087  ENDCONVERT:                  ;must convert back to ascii for display
00001AD0  4283                    1088              CLR.L   D3      ;Cleared for workability
00001AD2  84C4                    1089              DIVU    D4,D2   ;get 10's place digit
00001AD4  3602                    1090              MOVE.W  D2,D3   ;extract 10's place digit to D3
00001AD6  EBBB                    1091              ROL.L   D5,D3   ;put it in its place
00001AD8  4242                    1092              CLR.W   D2      ;get rid of whole number
00001ADA  4842                    1093              SWAP    D2      ;keep remainder
00001ADC  5985                    1094              SUBI.L  #4,D5   ;dec rotate counter
00001ADE  DC83                    1095              ADD.L   D3,D6   ;put it into it's place
00001AE0  88FC 000A               1096              DIVU    #10,D4  ;go down a 10's place
00001AE4  B87C 0000               1097              CMP.W   #0,D4   ;are we done
00001AE8  6700 0004               1098              BEQ     OUTPUTNUM
00001AEC  60E2                    1099              BRA     ENDCONVERT
00001AEE                          1100              
00001AEE                          1101  OUTPUTNUM:
00001AEE  2606                    1102             MOVE.L   D6,D3   ;put into register for conversion to ASCII
00001AF0  4EB9 000026AC           1103             JSR      HEXTOASCII
00001AF6  224A                    1104             MOVEA.L  A2,A1   ;get start of number
00001AF8  96CA                    1105             SUBA     A2,A3   ;get how many bytes to output
00001AFA  220B                    1106             MOVE.L   A3,D1   ;for Trap call
00001AFC  7000                    1107             MOVE.L   #0,D0   
00001AFE  4E4F                    1108             TRAP     #15
00001B00                          1109             
00001B00  6000 F5F4               1110             BRA RESTORE
00001B04                          1111  
00001B04                          1112  *--------------------------------------------------------------------------------------*
00001B04                          1113  
00001B04  5289                    1114  SORTW:  ADD.L   #1,A1       ;increment to check for semicolon/dash
00001B06  0C11 002D               1115          CMP.B   #$2D,(A1)   ;check for default
00001B0A  6700 007C               1116          BEQ     DESCEND
00001B0E  0C19 003B               1117          CMP.B   #$3B,(A1)+
00001B12  6600 0B0C               1118          BNE     ERRORSR
00001B16  0C11 0041               1119          CMP.B   #$41,(A1)   ;is it ascending?
00001B1A  6700 000E               1120          BEQ     ASCEND
00001B1E  0C11 0044               1121          CMP.B   #$44,(A1)   ;or descending?
00001B22  6600 0AFC               1122          BNE     ERRORSR
00001B26  6000 0060               1123          BRA     DESCEND
00001B2A                          1124          
00001B2A                          1125  ASCEND:
00001B2A  5289                    1126         ADD.L    #1,A1   ;inc
00001B2C  0C11 0020               1127         CMP.B    #$20,(A1)   ;check space
00001B30  6600 0AEE               1128         BNE      ERRORSR
00001B34  5289                    1129         ADD.L    #1,A1   ;start of 1st address
00001B36  2449                    1130         MOVE.L   A1,A2
00001B38  264A                    1131         MOVE.L   A2,A3
00001B3A                          1132  AGETFIRSTADDRESS:
00001B3A  0C13 0000               1133         CMP.B    #$00,(A3)
00001B3E  6700 0AE0               1134         BEQ      ERRORSR     ;incorrect syntax
00001B42  0C1B 0020               1135         CMP.B    #$20,(A3)+  ;trying to find the end
00001B46  6700 0004               1136         BEQ      AFADDCONV
00001B4A  60EE                    1137         BRA      AGETFIRSTADDRESS
00001B4C                          1138  AFADDCONV:
00001B4C  538B                    1139         SUB.L    #1,A3   ;off by one error
00001B4E  4EB9 0000266C           1140         JSR ASCII_ADDRESS    ;D5 now has that address 
00001B54  2845                    1141         MOVE.L D5,A4
00001B56  528B                    1142         ADD.L    #1,A3   ;start of second address
00001B58  244B                    1143         MOVE.L   A3,A2   ;setup for second address
00001B5A                          1144  AGETSECADDRESS:
00001B5A  0C1B 0000               1145         CMP.B    #$00,(A3)+  ;trying to find the end
00001B5E  6700 0004               1146         BEQ      ASADDCONV
00001B62  60F6                    1147         BRA      AGETSECADDRESS
00001B64                          1148  ASADDCONV:
00001B64  538B                    1149          SUB.L   #1,A3   ;off by one
00001B66  4EB9 0000266C           1150          JSR     ASCII_ADDRESS
00001B6C  2A45                    1151          MOVE.L  D5,A5
00001B6E  2C4C                    1152          MOVEA.L  A4,A6  ;CLR A6
00001B70                          1153          
00001B70  284E                    1154  ARESETLOOP: MOVE.L  A6,A4    ;reset to top of loop
00001B72  B94C                    1155  ACMP:       CMP.W   (A4)+,(A4)+  ;check adjacent mem
00001B74  630A                    1156              BLS.S   ASWAP    
00001B76  558C                    1157              SUBQ.L  #2,A4
00001B78  BBCC                    1158              CMP.L   A4,A5   ;done?
00001B7A  66F6                    1159              BNE     ACMP     ;nope
00001B7C  6000 0068               1160              BRA     DONEASCEND  ;yep
00001B80  2024                    1161  ASWAP:       MOVE.L  -(A4),D0    ;start bubbling 
00001B82  4840                    1162              SWAP.W  D0
00001B84  2880                    1163              MOVE.L  D0,(A4)
00001B86  60E8                    1164              BRA     ARESETLOOP
00001B88                          1165  
00001B88                          1166  
00001B88                          1167  DESCEND:
00001B88  5289                    1168         ADD.L    #1,A1   ;inc
00001B8A  0C11 0020               1169         CMP.B    #$20,(A1)   ;check space
00001B8E  6600 0A90               1170         BNE      ERRORSR
00001B92  5289                    1171         ADD.L    #1,A1   ;start of 1st address
00001B94  2449                    1172         MOVE.L   A1,A2
00001B96  264A                    1173         MOVE.L   A2,A3
00001B98                          1174  DGETFIRSTADDRESS:
00001B98  0C13 0000               1175         CMP.B    #$00,(A3)
00001B9C  6700 0A82               1176         BEQ      ERRORSR     ;incorrect syntax
00001BA0  0C1B 0020               1177         CMP.B    #$20,(A3)+  ;trying to find the end
00001BA4  6700 0004               1178         BEQ      DFADDCONV
00001BA8  60EE                    1179         BRA      DGETFIRSTADDRESS
00001BAA                          1180  DFADDCONV:
00001BAA  538B                    1181         SUB.L    #1,A3   ;off by one error
00001BAC  4EB9 0000266C           1182         JSR ASCII_ADDRESS    ;D5 now has that address 
00001BB2  2845                    1183         MOVE.L D5,A4
00001BB4  528B                    1184         ADD.L    #1,A3   ;start of second address
00001BB6  244B                    1185         MOVE.L   A3,A2   ;setup for second address
00001BB8                          1186  DGETSECADDRESS:
00001BB8  0C1B 0000               1187         CMP.B    #$00,(A3)+  ;trying to find the end
00001BBC  6700 0004               1188         BEQ      DSADDCONV
00001BC0  60F6                    1189         BRA      DGETSECADDRESS
00001BC2                          1190  DSADDCONV:
00001BC2  538B                    1191          SUB.L   #1,A3   ;off by one
00001BC4  4EB9 0000266C           1192          JSR     ASCII_ADDRESS
00001BCA  2A45                    1193          MOVE.L  D5,A5
00001BCC  2C4C                    1194          MOVEA.L  A4,A6  ;CLR A6
00001BCE                          1195          
00001BCE  284E                    1196  DRESETLOOP: MOVE.L  A6,A4    ;reset to top of loop
00001BD0  B94C                    1197  DCMP:       CMP.W   (A4)+,(A4)+  ;check adjacent mem
00001BD2  620A                    1198              BHI.S   DSWAP    
00001BD4  558C                    1199              SUBQ.L  #2,A4
00001BD6  BBCC                    1200              CMP.L   A4,A5   ;done?
00001BD8  66F6                    1201              BNE     DCMP     ;nope
00001BDA  6000 000A               1202              BRA     DONEDESCEND  ;yep
00001BDE  2024                    1203  DSWAP:       MOVE.L  -(A4),D0    ;start bubbling 
00001BE0  4840                    1204              SWAP.W  D0
00001BE2  2880                    1205              MOVE.L  D0,(A4)
00001BE4  60E8                    1206              BRA     DRESETLOOP
00001BE6                          1207  x
00001BE6                          1208  DONEASCEND:
00001BE6                          1209  DONEDESCEND:
00001BE6  6000 F50E               1210              BRA RESTORE
00001BEA                          1211  
00001BEA                          1212  *--------------------------------------------------------------------------------------*
00001BEA                          1213  
00001BEA  4282                    1214  MM:    CLR.L    D2      ;used for storing values
00001BEC  4286                    1215         CLR.L    D6      
00001BEE                          1216  SIZECHECK:  
00001BEE  2649                    1217          MOVE.L  A1,A3   ;set up to find end ptr
00001BF0                          1218  ENDPTRMM:
00001BF0  0C1B 0000               1219          CMP.B   #$00,(A3)+
00001BF4  66FA                    1220          BNE     ENDPTRMM
00001BF6  538B                    1221          SUB.L   #1,A3   ;off by one error
00001BF8  5289                    1222          ADD.L   #1,A1   ;inc pointer to start of specifier
00001BFA  0C11 002D               1223          CMP.B   #$2D,(A1)   ;check for default
00001BFE  6700 0020               1224          BEQ     DEFAULT        
00001C02  0C11 003B               1225          CMP.B   #$3B,(A1)
00001C06  6600 0A18               1226          BNE     ERRORSR
00001C0A  5289                    1227          ADD.L   #1,A1   ;find out which size
00001C0C  0C11 0057               1228          CMP.B   #$57,(A1) ; word
00001C10  6700 00A8               1229          BEQ     WORD
00001C14  0C11 004C               1230          CMP.B   #$4C,(A1)   ;long
00001C18  6700 0162               1231          BEQ     LONG
00001C1C  6000 0A02               1232          BRA     ERRORSR
00001C20                          1233  
00001C20                          1234  ***************************************************
00001C20                          1235  
00001C20                          1236  DEFAULT:
00001C20                          1237          
00001C20  5489                    1238          ADD.L   #2,A1       ;set up for subroutine
00001C22  3449                    1239          MOVE    A1,A2       ;set up for subroutine
00001C24  48E7 4270               1240          MOVEM.L D1/D6/A1-A3,-(SP)
00001C28  4EB9 0000266C           1241          JSR     ASCII_ADDRESS
00001C2E  4CDF 0E42               1242          MOVEM.L (SP)+,D1/D6/A1-A3
00001C32  2845                    1243          MOVE.L  D5,A4       ;set up address to modify
00001C34                          1244         
00001C34                          1245  MODIFYLOOP:
00001C34                          1246          *-------Display Memory First-----*
00001C34  260C                    1247          MOVE.L  A4,D3       ;set up for subroutine
00001C36  4EB9 000026AC           1248          JSR     HEXTOASCII  ;convert new address to ascii for output
00001C3C  96CA                    1249          SUBA    A2,A3       ;get num of bytes to produce
00001C3E  7001                    1250          MOVE.L  #1,D0
00001C40  220B                    1251          MOVE.L  A3,D1
00001C42  224A                    1252          MOVE.L  A2,A1
00001C44  4E4F                    1253          TRAP    #15
00001C46                          1254          
00001C46                          1255          *add colon to denote containing data*
00001C46  12BC 003A               1256          MOVE.B  #$3A,(A1)
00001C4A  7201                    1257          MOVE.L  #1,D1   ;display only the colon
00001C4C  7001                    1258          MOVE.L  #1,D0
00001C4E  4E4F                    1259          TRAP    #15
00001C50                          1260          
00001C50  1614                    1261          MOVE.B  (A4),D3
00001C52  4EB9 000026AC           1262          JSR     HEXTOASCII
00001C58  7202                    1263          MOVE.L  #2,D1
00001C5A  224A                    1264          MOVE.L  A2,A1
00001C5C  103C 0001               1265          MOVE.B  #1,D0
00001C60  4E4F                    1266          TRAP    #15
00001C62                          1267          
00001C62  12BC 0020               1268          MOVE.B  #$20,(A1)
00001C66  7201                    1269          MOVE.L  #1,D1   ;space between held data and input
00001C68  7001                    1270          MOVE.L  #1,D0
00001C6A  4E4F                    1271          TRAP    #15
00001C6C                          1272  
00001C6C                          1273          
00001C6C                          1274          *-----Enter Input-------*
00001C6C  4283                    1275          CLR.L   D3
00001C6E  7C04                    1276          MOVE.L  #4,D6
00001C70  43F8 3000               1277          LEA     BUFFER,A1   ;set up storage for command
00001C74  103C 0002               1278          MOVE.B  #2,D0       ;load input trap call
00001C78  4E4F                    1279          TRAP    #15
00001C7A  0C11 002E               1280          CMP.B   #$2E,(A1)
00001C7E  6700 01E2               1281          BEQ     ENDLP
00001C82  0C11 0000               1282          CMP.B   #$00,(A1)
00001C86  6700 002C               1283          BEQ     ENTER
00001C8A                          1284          
00001C8A                          1285  PARSELOOP:
00001C8A  0C11 0000               1286          CMP.B   #$00,(A1)
00001C8E  6700 0022               1287          BEQ     ENDPARSE        
00001C92  0C11 0040               1288          CMP.B   #$40,(A1)
00001C96  6E00 000A               1289          BGT     HIGHHEXMM
00001C9A  0411 0030               1290          SUBI.B  #$30,(A1)   ;get hex value
00001C9E  6000 0006               1291          BRA     NEXTMMSTEP
00001CA2  0411 0037               1292  HIGHHEXMM: SUBI.B  #$37,(A1)  ;get hex value
00001CA6                          1293  NEXTMMSTEP:
00001CA6  1411                    1294          MOVE.B  (A1),D2
00001CA8  EDBA                    1295          ROL.L   D6,D2
00001CAA  5986                    1296          SUBI.L  #4,D6
00001CAC  5289                    1297          ADD.L   #1,A1
00001CAE  D602                    1298          ADD.B   D2,D3   ;total byte stored in D3
00001CB0  60D8                    1299          BRA     PARSELOOP
00001CB2                          1300  ENDPARSE:
00001CB2  1883                    1301          MOVE.B  D3,(A4)   ;commit memory change 
00001CB4  528C                    1302  ENTER:  ADD.L   #1,A4   ;increment address
00001CB6  6000 FF7C               1303          BRA     MODIFYLOOP
00001CBA                          1304          
00001CBA                          1305  ***************************************************
00001CBA                          1306  
00001CBA                          1307  WORD:
00001CBA                          1308              
00001CBA  5489                    1309          ADD.L   #2,A1       ;set up for subroutine
00001CBC  3449                    1310          MOVE    A1,A2       ;set up for subroutine
00001CBE  48E7 4270               1311          MOVEM.L D1/D6/A1-A3,-(SP)
00001CC2  4EB9 0000266C           1312          JSR     ASCII_ADDRESS
00001CC8  4CDF 0E42               1313          MOVEM.L (SP)+,D1/D6/A1-A3
00001CCC  2845                    1314          MOVE.L  D5,A4       ;set up address to modify
00001CCE                          1315         
00001CCE                          1316  MODIFYLOOPW:
00001CCE                          1317          *-------Display Memory First-----*
00001CCE  200C                    1318          MOVE.L  A4,D0
00001CD0  80FC 0002               1319          DIVU    #2,D0
00001CD4  4840                    1320          SWAP    D0      ;check if it's an odd address
00001CD6  B07C 0000               1321          CMP.W   #$00,D0
00001CDA  6600 0944               1322          BNE     ERRORSR
00001CDE  260C                    1323          MOVE.L  A4,D3       ;set up for subroutine
00001CE0  2A4C                    1324          MOVE.L  A4,A5       ;next byte of memory may not be needed
00001CE2  528D                    1325          ADD.L   #1,A5
00001CE4  4EB9 000026AC           1326          JSR     HEXTOASCII  ;convert new address to ascii for output
00001CEA  96CA                    1327          SUBA    A2,A3       ;get num of bytes to produce
00001CEC  7001                    1328          MOVE.L  #1,D0
00001CEE  220B                    1329          MOVE.L  A3,D1
00001CF0  224A                    1330          MOVE.L  A2,A1
00001CF2  4E4F                    1331          TRAP    #15
00001CF4                          1332          
00001CF4                          1333          *add colon to denote containing data*
00001CF4  12BC 003A               1334          MOVE.B  #$3A,(A1)
00001CF8  7201                    1335          MOVE.L  #1,D1   ;display only the colon
00001CFA  7001                    1336          MOVE.L  #1,D0
00001CFC  4E4F                    1337          TRAP    #15
00001CFE                          1338          
00001CFE  1614                    1339          MOVE.B  (A4),D3
00001D00  4EB9 000026AC           1340          JSR     HEXTOASCII
00001D06  7202                    1341          MOVE.L  #2,D1
00001D08  224A                    1342          MOVE.L  A2,A1
00001D0A  103C 0001               1343          MOVE.B  #1,D0
00001D0E  4E4F                    1344          TRAP    #15
00001D10                          1345          
00001D10  1615                    1346          MOVE.B  (A5),D3
00001D12  4EB9 000026AC           1347          JSR     HEXTOASCII
00001D18  7202                    1348          MOVE.L  #2,D1
00001D1A  224A                    1349          MOVE.L  A2,A1
00001D1C  103C 0001               1350          MOVE.B  #1,D0
00001D20  4E4F                    1351          TRAP    #15
00001D22                          1352  
00001D22                          1353          
00001D22  12BC 0020               1354          MOVE.B  #$20,(A1)
00001D26  7201                    1355          MOVE.L  #1,D1   ;space between held data and input
00001D28  7001                    1356          MOVE.L  #1,D0
00001D2A  4E4F                    1357          TRAP    #15
00001D2C                          1358  
00001D2C                          1359          
00001D2C                          1360          *-----Enter Input-------*
00001D2C  4283                    1361          CLR.L   D3
00001D2E  7C0C                    1362          MOVE.L  #12,D6
00001D30  43F8 3000               1363          LEA     BUFFER,A1   ;set up storage for command
00001D34  103C 0002               1364          MOVE.B  #2,D0       ;load input trap call
00001D38  4E4F                    1365          TRAP    #15
00001D3A  0C11 002E               1366          CMP.B   #$2E,(A1)
00001D3E  6700 0122               1367          BEQ     ENDLP
00001D42  0C11 0000               1368          CMP.B   #$00,(A1)
00001D46  6700 002E               1369          BEQ     ENTERW
00001D4A                          1370          
00001D4A                          1371  PARSELOOPW:
00001D4A  0C11 0000               1372          CMP.B   #$00,(A1)
00001D4E  6700 0024               1373          BEQ     ENDPARSEW        
00001D52  0C11 0040               1374          CMP.B   #$40,(A1)
00001D56  6E00 000A               1375          BGT     HIGHHEXMMW
00001D5A  0411 0030               1376          SUBI.B  #$30,(A1)   ;get hex value
00001D5E  6000 0006               1377          BRA     NEXTMMSTEPW
00001D62  0411 0037               1378  HIGHHEXMMW: SUBI.B  #$37,(A1)  ;get hex value
00001D66                          1379  NEXTMMSTEPW:
00001D66  1411                    1380          MOVE.B  (A1),D2
00001D68  EDBA                    1381          ROL.L   D6,D2
00001D6A  5986                    1382          SUBI.L  #4,D6
00001D6C  5289                    1383          ADD.L   #1,A1
00001D6E  D682                    1384          ADD.L   D2,D3   ;total byte stored in D3
00001D70  4282                    1385          CLR.L   D2      ;clear for next rotate
00001D72  60D6                    1386          BRA     PARSELOOPW
00001D74                          1387  ENDPARSEW:
00001D74                          1388          
00001D74  3883                    1389          MOVE.W  D3,(A4)   ;commit memory change 
00001D76  548C                    1390  ENTERW:  ADD.L   #2,A4   ;increment address
00001D78  6000 FF54               1391          BRA     MODIFYLOOPW
00001D7C                          1392  
00001D7C                          1393  ***************************************************
00001D7C                          1394  
00001D7C                          1395  LONG:  
00001D7C  5489                    1396          ADD.L   #2,A1       ;set up for subroutine
00001D7E  3449                    1397          MOVE    A1,A2       ;set up for subroutine
00001D80  48E7 4270               1398          MOVEM.L D1/D6/A1-A3,-(SP)
00001D84  4EB9 0000266C           1399          JSR     ASCII_ADDRESS
00001D8A  4CDF 0E42               1400          MOVEM.L (SP)+,D1/D6/A1-A3
00001D8E  2845                    1401          MOVE.L  D5,A4       ;set up address to modify
00001D90                          1402         
00001D90                          1403  MODIFYLOOPL:
00001D90                          1404          *-------Display Memory First-----*
00001D90  200C                    1405          MOVE.L  A4,D0
00001D92  80FC 0002               1406          DIVU    #2,D0
00001D96  4840                    1407          SWAP    D0      ;check if it's an odd address
00001D98  B07C 0000               1408          CMP.W   #$00,D0
00001D9C  6600 0882               1409          BNE     ERRORSR
00001DA0  260C                    1410          MOVE.L  A4,D3       ;set up for subroutine
00001DA2  2A4C                    1411          MOVE.L  A4,A5       ;next byte of memory may not be needed
00001DA4  528D                    1412          ADD.L   #1,A5
00001DA6  4EB9 000026AC           1413          JSR     HEXTOASCII  ;convert new address to ascii for output
00001DAC  96CA                    1414          SUBA    A2,A3       ;get num of bytes to produce
00001DAE  7001                    1415          MOVE.L  #1,D0
00001DB0  220B                    1416          MOVE.L  A3,D1
00001DB2  224A                    1417          MOVE.L  A2,A1
00001DB4  4E4F                    1418          TRAP    #15
00001DB6                          1419          
00001DB6                          1420          *add colon to denote containing data*
00001DB6  12BC 003A               1421          MOVE.B  #$3A,(A1)
00001DBA  7201                    1422          MOVE.L  #1,D1   ;display only the colon
00001DBC  7001                    1423          MOVE.L  #1,D0
00001DBE  4E4F                    1424          TRAP    #15
00001DC0                          1425          
00001DC0  1614                    1426          MOVE.B  (A4),D3
00001DC2  4EB9 000026AC           1427          JSR     HEXTOASCII
00001DC8  7202                    1428          MOVE.L  #2,D1
00001DCA  224A                    1429          MOVE.L  A2,A1
00001DCC  103C 0001               1430          MOVE.B  #1,D0
00001DD0  4E4F                    1431          TRAP    #15
00001DD2                          1432          
00001DD2  161D                    1433          MOVE.B  (A5)+,D3
00001DD4  4EB9 000026AC           1434          JSR     HEXTOASCII
00001DDA  7202                    1435          MOVE.L  #2,D1
00001DDC  224A                    1436          MOVE.L  A2,A1
00001DDE  103C 0001               1437          MOVE.B  #1,D0
00001DE2  4E4F                    1438          TRAP    #15
00001DE4                          1439          
00001DE4  161D                    1440          MOVE.B  (A5)+,D3
00001DE6  4EB9 000026AC           1441          JSR     HEXTOASCII
00001DEC  7202                    1442          MOVE.L  #2,D1
00001DEE  224A                    1443          MOVE.L  A2,A1
00001DF0  103C 0001               1444          MOVE.B  #1,D0
00001DF4  4E4F                    1445          TRAP    #15
00001DF6  161D                    1446          MOVE.B  (A5)+,D3
00001DF8  4EB9 000026AC           1447          JSR     HEXTOASCII
00001DFE  7202                    1448          MOVE.L  #2,D1
00001E00  224A                    1449          MOVE.L  A2,A1
00001E02  103C 0001               1450          MOVE.B  #1,D0
00001E06  4E4F                    1451          TRAP    #15
00001E08                          1452     
00001E08  12BC 0020               1453          MOVE.B  #$20,(A1)
00001E0C  7201                    1454          MOVE.L  #1,D1   ;space between held data and input
00001E0E  7001                    1455          MOVE.L  #1,D0
00001E10  4E4F                    1456          TRAP    #15
00001E12                          1457  
00001E12                          1458          
00001E12                          1459          *-----Enter Input-------*
00001E12  4283                    1460          CLR.L   D3
00001E14  7C1C                    1461          MOVE.L  #28,D6
00001E16  43F8 3000               1462          LEA     BUFFER,A1   ;set up storage for command
00001E1A  103C 0002               1463          MOVE.B  #2,D0       ;load input trap call
00001E1E  4E4F                    1464          TRAP    #15
00001E20  0C11 002E               1465          CMP.B   #$2E,(A1)
00001E24  6700 003C               1466          BEQ     ENDLP
00001E28  0C11 0000               1467          CMP.B   #$00,(A1)
00001E2C  6700 002E               1468          BEQ     ENTERL
00001E30                          1469          
00001E30                          1470  PARSELOOPL:
00001E30  0C11 0000               1471          CMP.B   #$00,(A1)
00001E34  6700 0024               1472          BEQ     ENDPARSEL        
00001E38  0C11 0040               1473          CMP.B   #$40,(A1)
00001E3C  6E00 000A               1474          BGT     HIGHHEXMML
00001E40  0411 0030               1475          SUBI.B  #$30,(A1)   ;get hex value
00001E44  6000 0006               1476          BRA     NEXTMMSTEPL
00001E48  0411 0037               1477  HIGHHEXMML: SUBI.B  #$37,(A1)  ;get hex value
00001E4C                          1478  NEXTMMSTEPL:
00001E4C  1411                    1479          MOVE.B  (A1),D2
00001E4E  EDBA                    1480          ROL.L   D6,D2
00001E50  5986                    1481          SUBI.L  #4,D6
00001E52  5289                    1482          ADD.L   #1,A1
00001E54  D682                    1483          ADD.L   D2,D3   ;total byte stored in D3
00001E56  4282                    1484          CLR.L   D2      ;clear for next rotate
00001E58  60D6                    1485          BRA     PARSELOOPL
00001E5A                          1486  ENDPARSEL:
00001E5A  2883                    1487          MOVE.L  D3,(A4)   ;commit memory change 
00001E5C  588C                    1488  ENTERL:  ADD.L   #4,A4   ;increment address
00001E5E  6000 FF30               1489          BRA     MODIFYLOOPL
00001E62                          1490  
00001E62                          1491  
00001E62  6000 F292               1492  ENDLP:  BRA RESTORE
00001E66                          1493          
00001E66                          1494          
00001E66                          1495  *--------------------------------------------------------------------------------------*
00001E66                          1496  
00001E66                          1497  BF:    
00001E66  5289                    1498         ADD.L    #1,A1   ;first byte of data
00001E68  2649                    1499         MOVE.L   A1,A3   ;for end ptr
00001E6A                          1500  BFGETENDDATA:
00001E6A  0C1B 0020               1501          CMP.B   #$20,(A3)+
00001E6E  6700 0004               1502          BEQ     BFNEXTADDR
00001E72  60F6                    1503          BRA     BFGETENDDATA
00001E74                          1504  BFNEXTADDR:
00001E74  2449                    1505          MOVE.L  A1,A2   ;for subroutine
00001E76  538B                    1506          SUB.L   #1,A3   ;off by one error
00001E78  4EB9 0000266C           1507          JSR     ASCII_ADDRESS
00001E7E  2F05                    1508          MOVE.L  D5,-(SP)    ;save data on the stack
00001E80                          1509          
00001E80  528B                    1510          ADD.L   #1,A3   ;inc end ptr to first byte of address
00001E82  244B                    1511          MOVE.L  A3,A2   ;set start ptr
00001E84                          1512  BFGETENDADDRONE:
00001E84  0C1B 0020               1513          CMP.B   #$20,(A3)+
00001E88  6700 0004               1514          BEQ     BFNEXTADDRTWO
00001E8C  60F6                    1515          BRA     BFGETENDADDRONE
00001E8E                          1516          
00001E8E                          1517  BFNEXTADDRTWO:
00001E8E  538B                    1518          SUB.L   #1,A3   ;off by one error
00001E90  4EB9 0000266C           1519          JSR     ASCII_ADDRESS   ;convert address to hex
00001E96  2A45                    1520          MOVE.L  D5,A5       ;store address 1 in A5
00001E98  8AFC 0002               1521          DIVU    #2,D5
00001E9C  4845                    1522          SWAP    D5
00001E9E  BA7C 0000               1523          CMP.W   #$00,D5
00001EA2  6600 077C               1524          BNE     ERRORSR
00001EA6                          1525          
00001EA6  528B                    1526          ADD.L   #1,A3   ;inc end ptr to first byte of address
00001EA8  244B                    1527          MOVE.L  A3,A2   ;set start ptr
00001EAA                          1528  BFGETLASTEND:
00001EAA  0C1B 0000               1529          CMP.B   #$00,(A3)+
00001EAE  6700 0004               1530          BEQ     STOREDATA
00001EB2  60F6                    1531          BRA     BFGETLASTEND
00001EB4                          1532          
00001EB4                          1533  STOREDATA:
00001EB4  538B                    1534          SUB.L   #1,A3   ;off by one error
00001EB6  4EB9 0000266C           1535          JSR     ASCII_ADDRESS
00001EBC  2C45                    1536          MOVE.L  D5,A6   ;end address in A6
00001EBE  8AFC 0002               1537          DIVU    #2,D5
00001EC2  4845                    1538          SWAP    D5
00001EC4  BA7C 0000               1539          CMP.W   #$00,D5
00001EC8  6600 0756               1540          BNE     ERRORSR
00001ECC  2A1F                    1541          MOVE.L  (SP)+,D5
00001ECE                          1542          
00001ECE                          1543  DATALOOP:
00001ECE  BDCD                    1544          CMP.L   A5,A6
00001ED0  6D00 0006               1545          BLT     ENDBF
00001ED4  3AC5                    1546          MOVE.W  D5,(A5)+
00001ED6  60F6                    1547          BRA     DATALOOP
00001ED8                          1548  
00001ED8  6000 F21C               1549  ENDBF:  BRA RESTORE
00001EDC                          1550  *--------------------------------------------------------------------------------------*
00001EDC                          1551  
00001EDC  5289                    1552  BMOV:   ADD.L   #1,A1   ;get to start of first address
00001EDE  2449                    1553          MOVE.L  A1,A2   ;set up start ptr
00001EE0  264A                    1554          MOVE.L  A2,A3   ;set up end ptr
00001EE2                          1555          
00001EE2                          1556  FIRSTADDRESS:
00001EE2  0C1B 0020               1557          CMP.B #$20,(A3)+
00001EE6  6700 0004               1558          BEQ     COMPUTEFIRSTADD
00001EEA  60F6                    1559          BRA     FIRSTADDRESS
00001EEC                          1560          
00001EEC                          1561  COMPUTEFIRSTADD:
00001EEC  538B                    1562          SUB.L   #1,A3   ;off by one error
00001EEE  4EB9 0000266C           1563          JSR     ASCII_ADDRESS
00001EF4  2045                    1564          MOVE.L  D5,A0   ; save 1st address
00001EF6                          1565          
00001EF6  528B                    1566          ADD.L   #1,A3
00001EF8  244B                    1567          MOVE.L  A3,A2
00001EFA                          1568  SECONDADDRESS:
00001EFA  0C1B 0020               1569          CMP.B   #$20,(A3)+
00001EFE  6700 0004               1570          BEQ     COMPUTESECONDADDRESS
00001F02  60F6                    1571          BRA     SECONDADDRESS
00001F04                          1572          
00001F04                          1573  COMPUTESECONDADDRESS:
00001F04  538B                    1574          SUB.L   #1,A3   ;off by one error
00001F06  4EB9 0000266C           1575          JSR     ASCII_ADDRESS
00001F0C  2845                    1576          MOVE.L  D5,A4   ;save 2nd address
00001F0E                          1577  
00001F0E  528B                    1578          ADD.L   #1,A3
00001F10  244B                    1579          MOVE.L  A3,A2
00001F12                          1580  THIRDADDRESS:
00001F12  0C1B 0020               1581          CMP.B   #$20,(A3)+
00001F16  6700 0004               1582          BEQ     COMPUTETHIRDADDRESS
00001F1A  60F6                    1583          BRA     THIRDADDRESS
00001F1C                          1584          
00001F1C                          1585  COMPUTETHIRDADDRESS:
00001F1C  538B                    1586          SUB.L   #1,A3
00001F1E  4EB9 0000266C           1587          JSR     ASCII_ADDRESS
00001F24  2A45                    1588          MOVE.L  D5,A5   ;save 3rd address
00001F26                          1589          
00001F26  528B                    1590          ADD.L   #1,A3
00001F28  244B                    1591          MOVE.L  A3,A2
00001F2A                          1592  FOURTHADDRESS:
00001F2A  0C1B 0000               1593          CMP.B   #$00,(A3)+
00001F2E  6700 0004               1594          BEQ     COMPUTEFOURTHADDRESS
00001F32  60F6                    1595          BRA     FOURTHADDRESS
00001F34                          1596          
00001F34                          1597  COMPUTEFOURTHADDRESS:
00001F34  538B                    1598          SUB.L   #1,A3
00001F36  4EB9 0000266C           1599          JSR     ASCII_ADDRESS
00001F3C  2C45                    1600          MOVE.L  D5,A6   ;save 3rd address
00001F3E                          1601          
00001F3E                          1602          
00001F3E                          1603  
00001F3E                          1604          *Check for matching dimensions*
00001F3E  2008                    1605          MOVE.L  A0,D0
00001F40  220C                    1606          MOVE.L  A4,D1
00001F42  2A0D                    1607          MOVE.L  A5,D5
00001F44  2C0E                    1608          MOVE.L  A6,D6
00001F46  9280                    1609          SUB.L   D0,D1
00001F48  9C85                    1610          SUB.L   D5,D6
00001F4A  BC81                    1611          CMP.L   D1,D6
00001F4C  6600 06D2               1612          BNE     ERRORSR
00001F50  B9C8                    1613          CMP.L   A0,A4
00001F52  6D00 06CC               1614          BLT     ERRORSR
00001F56  BDCD                    1615          CMP.L   A5,A6
00001F58  6D00 06C6               1616          BLT     ERRORSR
00001F5C                          1617  
00001F5C                          1618  DATATRANSFER:
00001F5C  B9C8                    1619          CMP.L   A0,A4
00001F5E  6D00 0006               1620          BLT     BMOVDONE
00001F62  1AD8                    1621          MOVE.B  (A0)+,(A5)+
00001F64  60F6                    1622          BRA     DATATRANSFER
00001F66                          1623          
00001F66                          1624  
00001F66                          1625  
00001F66                          1626  BMOVDONE:
00001F66  6000 F18E               1627          BRA RESTORE
00001F6A                          1628  
00001F6A                          1629  *--------------------------------------------------------------------------------------*
00001F6A                          1630  
00001F6A                          1631  BTST:   
00001F6A  5289                    1632         ADD.L    #1,A1   ;first byte of data
00001F6C  2649                    1633         MOVE.L   A1,A3   ;for end ptr
00001F6E                          1634  BTSTGETENDDATA:
00001F6E  0C1B 0020               1635          CMP.B   #$20,(A3)+
00001F72  6700 0004               1636          BEQ     BTSTNEXTADDR
00001F76  60F6                    1637          BRA     BTSTGETENDDATA
00001F78                          1638  BTSTNEXTADDR:
00001F78  2449                    1639          MOVE.L  A1,A2   ;for subroutine
00001F7A  538B                    1640          SUB.L   #1,A3   ;off by one error
00001F7C  4EB9 0000266C           1641          JSR     ASCII_ADDRESS
00001F82  2F05                    1642          MOVE.L  D5,-(SP)    ;save data on the stack
00001F84                          1643          
00001F84  528B                    1644          ADD.L   #1,A3   ;inc end ptr to first byte of address
00001F86  244B                    1645          MOVE.L  A3,A2   ;set start ptr
00001F88                          1646  BTSTGETENDADDRONE:
00001F88  0C1B 0020               1647          CMP.B   #$20,(A3)+
00001F8C  6700 0004               1648          BEQ     BTSTNEXTADDRTWO
00001F90  60F6                    1649          BRA     BTSTGETENDADDRONE
00001F92                          1650          
00001F92                          1651  BTSTNEXTADDRTWO:
00001F92  538B                    1652          SUB.L   #1,A3   ;off by one error
00001F94  4EB9 0000266C           1653          JSR     ASCII_ADDRESS   ;convert address to hex
00001F9A  2A45                    1654          MOVE.L  D5,A5       ;store address 1 in A5
00001F9C  2845                    1655          MOVE.L  D5,A4       ;for second run through
00001F9E                          1656                
00001F9E  528B                    1657          ADD.L   #1,A3   ;inc end ptr to first byte of address
00001FA0  244B                    1658          MOVE.L  A3,A2   ;set start ptr
00001FA2                          1659  BTSTGETLASTEND:
00001FA2  0C1B 0000               1660          CMP.B   #$00,(A3)+
00001FA6  6700 0004               1661          BEQ     STOREDATABTST
00001FAA  60F6                    1662          BRA     BTSTGETLASTEND
00001FAC                          1663  
00001FAC                          1664  
00001FAC                          1665  STOREDATABTST:
00001FAC  538B                    1666          SUB.L   #1,A3   ;off by one error
00001FAE  4EB9 0000266C           1667          JSR     ASCII_ADDRESS
00001FB4  2C45                    1668          MOVE.L  D5,A6   ;end address in A6
00001FB6  2A1F                    1669          MOVE.L  (SP)+,D5
00001FB8                          1670          
00001FB8                          1671  BTSTDATALOOP:
00001FB8  BDCD                    1672          CMP.L   A5,A6
00001FBA  6D00 0006               1673          BLT     READ
00001FBE  1AC5                    1674          MOVE.B  D5,(A5)+
00001FC0  60F6                    1675          BRA     BTSTDATALOOP
00001FC2                          1676  
00001FC2                          1677  
00001FC2                          1678  READ:
00001FC2  BDCC                    1679          CMP.L   A4,A6
00001FC4  6D00 006C               1680          BLT     COMPLETE
00001FC8  BA1C                    1681          CMP.B   (A4)+,D5
00001FCA  6600 0004               1682          BNE     FAIL
00001FCE  60F2                    1683          BRA     READ
00001FD0                          1684          
00001FD0                          1685  FAIL:
00001FD0  43F8 3703               1686          LEA     BTST4,A1
00001FD4  720B                    1687          MOVE.L  #11,D1
00001FD6  7000                    1688          MOVE.L  #0,D0
00001FD8  4E4F                    1689          TRAP    #15
00001FDA                          1690          
00001FDA  43F8 36CC               1691          LEA     BTST1,A1
00001FDE  7001                    1692          MOVE.L  #1,D0
00001FE0  7214                    1693          MOVE.L  #20,D1
00001FE2  4E4F                    1694          TRAP    #15
00001FE4                          1695          
00001FE4  1605                    1696          MOVE.B  D5,D3   ;for subroutine
00001FE6  4EB9 000026AC           1697          JSR     HEXTOASCII
00001FEC  224A                    1698          MOVE.L     A2,A1
00001FEE  7000                    1699          MOVE.L  #0,D0
00001FF0  97CA                    1700          SUBA.L  A2,A3   ;number of bytes
00001FF2  220B                    1701          MOVE.L  A3,D1
00001FF4  4E4F                    1702          TRAP    #15
00001FF6                          1703          
00001FF6                          1704          
00001FF6  43F8 36E0               1705          LEA     BTST2,A1
00001FFA  7001                    1706          MOVE.L  #1,D0
00001FFC  7211                    1707          MOVE.L  #17,D1
00001FFE  4E4F                    1708          TRAP    #15
00002000                          1709          
00002000                          1710          
00002000  538C                    1711          SUB.L   #1,A4   ;go back to address that failed
00002002  1614                    1712          MOVE.B  (A4),D3
00002004  4EB9 000026AC           1713          JSR     HEXTOASCII  ;convert for output
0000200A  224A                    1714          MOVE.L     A2,A1
0000200C  7000                    1715          MOVE.L  #0,D0
0000200E  97CA                    1716          SUBA.L  A2,A3   ;number of bytes
00002010  220B                    1717          MOVE.L  A3,D1
00002012  4E4F                    1718          TRAP    #15
00002014                          1719          
00002014  43F8 370E               1720          LEA     BTST5,A1
00002018  721B                    1721          MOVE.L  #27,D1
0000201A  103C 0001               1722          MOVE.B  #1,D0
0000201E  4E4F                    1723          TRAP    #15
00002020  260C                    1724          MOVE.L  A4,D3
00002022  4EB9 000026AC           1725          JSR     HEXTOASCII
00002028  224A                    1726          MOVE.L     A2,A1
0000202A  7000                    1727          MOVE.L  #0,D0
0000202C  97CA                    1728          SUBA.L  A2,A3   ;number of bytes
0000202E  220B                    1729          MOVE.L  A3,D1
00002030  4E4F                    1730          TRAP    #15
00002032                          1731  
00002032                          1732  
00002032                          1733          
00002032                          1734  COMPLETE:
00002032                          1735  
00002032  43F8 36F1               1736          LEA     BTST3,A1
00002036  7212                    1737          MOVE.L  #18,D1
00002038  7000                    1738          MOVE.L  #0,D0
0000203A  4E4F                    1739          TRAP    #15
0000203C  6000 F0B8               1740          BRA RESTORE
00002040                          1741  
00002040                          1742  *--------------------------------------------------------------------------------------*
00002040                          1743  
00002040                          1744  BSCH:   
00002040  5289                    1745          ADD.L   #1,A1   ;start of data
00002042  2449                    1746          MOVE.L  A1,A2   ;set up bac ptr
00002044                          1747          
00002044                          1748  BSCHENDDATA:
00002044  0C1A 0020               1749          CMP.B   #$20,(A2)+
00002048  6700 0004               1750          BEQ     BSCHFIRSTADD
0000204C  60F6                    1751          BRA     BSCHENDDATA
0000204E                          1752  
0000204E                          1753  
0000204E                          1754  BSCHFIRSTADD:
0000204E  538A                    1755          SUB.L   #1,A2
00002050  264A                    1756          MOVE.L  A2,A3
00002052  2449                    1757          MOVE.L  A1,A2
00002054  4EB9 0000266C           1758          JSR     ASCII_ADDRESS
0000205A  97C9                    1759          SUB.L   A1,A3   ;see how many bytes
0000205C  2C0B                    1760          MOVE.L  A3,D6   ;store byte/word/long in D6   
0000205E  528A                    1761          ADD.L   #1,A2   ;set up for start of next address     
00002060  264A                    1762          MOVE.L  A2,A3   ;set up for end ptr
00002062  2F05                    1763          MOVE.L  D5,-(SP)    ;save data to stack
00002064                          1764          
00002064                          1765          
00002064                          1766  BSCHFADDEND:
00002064  0C1B 0020               1767          CMP.B   #$20,(A3)+
00002068  6700 0004               1768          BEQ     BSCHSECONDADD
0000206C  60F6                    1769          BRA     BSCHFADDEND
0000206E                          1770          
0000206E                          1771          
0000206E                          1772  BSCHSECONDADD:
0000206E  538B                    1773          SUB.L   #1,A3   ;off by one
00002070  4EB9 0000266C           1774          JSR     ASCII_ADDRESS
00002076  2A45                    1775          MOVE.L  D5,A5   ;first address destination
00002078  528B                    1776          ADD.L   #1,A3   ;start it at next address
0000207A  244B                    1777          MOVE.L  A3,A2   ; set up for next address
0000207C                          1778          
0000207C                          1779          
0000207C                          1780  BSCHSECONDFIND:
0000207C  0C1B 0000               1781          CMP.B   #$00,(A3)+
00002080  6700 0004               1782          BEQ     TESTOP
00002084  60F6                    1783          BRA     BSCHSECONDFIND
00002086                          1784          
00002086                          1785          
00002086                          1786  TESTOP: 
00002086  538B                    1787          SUB.L   #1,A3   ;off by one
00002088  4EB9 0000266C           1788          JSR     ASCII_ADDRESS
0000208E  2C45                    1789          MOVE.L  D5,A6   ;end address at A6
00002090  2A1F                    1790          MOVE.L  (SP)+,D5    ;restore data
00002092  BC3C 0002               1791          CMP.B   #2,D6
00002096  6700 0016               1792          BEQ     BYTEBSCH
0000209A  BC3C 0004               1793          CMP.B   #4,D6
0000209E  6700 001C               1794          BEQ     WORDBSCH
000020A2  BC3C 0008               1795          CMP.B   #8,D6
000020A6  6700 0022               1796          BEQ     LONGBSCH
000020AA  6000 0574               1797          BRA     ERRORSR
000020AE                          1798          
000020AE                          1799  BYTEBSCH:
000020AE  BDCD                    1800          CMP.L   A5,A6
000020B0  6D00 0070               1801          BLT     ENDBSCH
000020B4  BA1D                    1802          CMP.B   (A5)+,D5
000020B6  6700 0020               1803          BEQ     FOUNDB
000020BA  60F2                    1804          BRA     BYTEBSCH
000020BC                          1805  
000020BC                          1806  WORDBSCH:
000020BC  BDCD                    1807          CMP.L   A5,A6
000020BE  6D00 0062               1808          BLT     ENDBSCH
000020C2  BA5D                    1809          CMP.W   (A5)+,D5
000020C4  6700 001A               1810          BEQ     FOUNDW
000020C8  60F2                    1811          BRA     WORDBSCH
000020CA                          1812  
000020CA                          1813  LONGBSCH:
000020CA  BDCD                    1814          CMP.L   A5,A6
000020CC  6D00 0054               1815          BLT     ENDBSCH
000020D0  BA9D                    1816          CMP.L   (A5)+,D5
000020D2  6700 0014               1817          BEQ     FOUNDL
000020D6  60F2                    1818          BRA     LONGBSCH
000020D8                          1819  
000020D8                          1820  
000020D8                          1821  
000020D8                          1822  FOUNDB:
000020D8  538D                    1823          SUB.L   #1,A5
000020DA  1615                    1824          MOVE.B  (A5),D3
000020DC  6000 000E               1825          BRA     SUCCESSTEXT
000020E0                          1826  FOUNDW:
000020E0  558D                    1827          SUB.L   #2,A5
000020E2  3615                    1828          MOVE.W  (A5),D3
000020E4  6000 0006               1829          BRA     SUCCESSTEXT
000020E8                          1830  FOUNDL:
000020E8  598D                    1831          SUB.L   #4,A5
000020EA  2615                    1832          MOVE.L  (A5),D3
000020EC                          1833          
000020EC                          1834  SUCCESSTEXT:
000020EC  43F8 3729               1835          LEA BSCH1,A1
000020F0  7206                    1836          MOVE.L  #6,D1
000020F2  7001                    1837          MOVE.L  #1,D0
000020F4  4E4F                    1838          TRAP    #15
000020F6                          1839  
000020F6  4EB9 000026AC           1840          JSR     HEXTOASCII
000020FC  224A                    1841          MOVE.L  A2,A1
000020FE  97CA                    1842          SUB.L   A2,A3
00002100  220B                    1843          MOVE.L  A3,D1   ;how many bytes
00002102  7000                    1844          MOVE.L  #0,D0
00002104  4E4F                    1845          TRAP    #15
00002106                          1846          
00002106  43F8 372F               1847          LEA BSCH2,A1
0000210A  7212                    1848          MOVE.L  #18,D1
0000210C  7001                    1849          MOVE.L  #1,D0
0000210E  4E4F                    1850          TRAP    #15
00002110                          1851          
00002110  260D                    1852          MOVE.L  A5,D3
00002112  4EB9 000026AC           1853          JSR     HEXTOASCII
00002118  224A                    1854          MOVE.L  A2,A1
0000211A  97CA                    1855          SUB.L   A2,A3
0000211C  220B                    1856          MOVE.L  A3,D1   ;how many bytes
0000211E  7000                    1857          MOVE.L  #0,D0
00002120  4E4F                    1858          TRAP    #15
00002122                          1859  
00002122                          1860          
00002122                          1861  ENDBSCH:        
00002122  6000 EFD2               1862          BRA RESTORE
00002126                          1863  
00002126                          1864  *--------------------------------------------------------------------------------------*
00002126                          1865  
00002126                          1866  GO:    
00002126  2449                    1867          MOVE.L  A1,A2   ;setup for hex conversion
00002128  264A                    1868          MOVE.L  A2,A3   
0000212A                          1869  GGETEND:
0000212A  0C1B 0000               1870          CMP.B   #$00,(A3)+
0000212E  6700 0004               1871          BEQ     EXECUTE
00002132  60F6                    1872          BRA     GGETEND
00002134                          1873          
00002134                          1874  EXECUTE:
00002134  538B                    1875          SUB.L   #1,A3   ;off by one error
00002136  4EB9 0000266C           1876          JSR     ASCII_ADDRESS
0000213C  2045                    1877          MOVE.L  D5,A0   
0000213E  4E90                    1878          JSR     (A0)    ;go to program
00002140                          1879          **NOTE: THE PROGRAM MUST HAVE RTS OR CONTROL WILL NOT BE RETURNED BACK TO MONITOR441!!!**
00002140  6000 EFB4               1880          BRA RESTORE
00002144                          1881  
00002144                          1882  *--------------------------------------------------------------------------------------*
00002144                          1883  
00002144                          1884  DF:    *Registers have already been saved to STACK, just need to pop them off first*
00002144                          1885          *Stack looks like this*
00002144                          1886          
00002144                          1887          *-------------*
00002144                          1888          *|D0-D7/A0-A6|*
00002144                          1889          *|     USP   |*
00002144                          1890          *|     SR    |*
00002144                          1891          *|     SSP   |*
00002144                          1892          *|     PC    |*
00002144                          1893          *-------------*
00002144                          1894          *I should've used loops for efficiency but runtime is not a design constraint*
00002144                          1895          *Maybe fix this in the future?*
00002144                          1896          
00002144                          1897            *----------D0-----------*
00002144  43F8 3752               1898         LEA      RD0,A1
00002148  7204                    1899         MOVE.L   #4,D1
0000214A  7001                    1900         MOVE.L   #1,D0
0000214C  4E4F                    1901         TRAP     #15
0000214E  261F                    1902         MOVE.L   (SP)+,D3    
00002150  4EB9 000026AC           1903         JSR      HEXTOASCII
00002156  224A                    1904         MOVE.L   A2,A1
00002158  95CB                    1905         SUB.L    A3,A2
0000215A  240A                    1906         MOVE.L   A2,D2
0000215C  B4BC FFFFFFF8           1907         CMP.L    #-8,D2
00002162  6700 0006               1908         BEQ      D0DONTWORRY
00002166                          1909  D0ACCOUNTFORZEROS:
00002166  5082                    1910          ADDI.L  #8,D2
00002168  93C2                    1911          SUB.L   D2,A1
0000216A                          1912  D0DONTWORRY:
0000216A  7000                    1913         MOVE.L   #0,D0
0000216C  7208                    1914         MOVE.L   #8,D1
0000216E  4E4F                    1915         TRAP     #15
00002170                          1916         
00002170                          1917             *----------D1-----------*
00002170  43F8 3756               1918         LEA      RD1,A1
00002174  7204                    1919         MOVE.L   #4,D1
00002176  7001                    1920         MOVE.L   #1,D0
00002178  4E4F                    1921         TRAP     #15
0000217A  261F                    1922         MOVE.L   (SP)+,D3    
0000217C  4EB9 000026AC           1923         JSR      HEXTOASCII
00002182  224A                    1924         MOVE.L   A2,A1
00002184  95CB                    1925         SUB.L    A3,A2
00002186  240A                    1926         MOVE.L   A2,D2
00002188  B4BC FFFFFFF8           1927         CMP.L    #-8,D2
0000218E  6700 0006               1928         BEQ      D1DONTWORRY
00002192                          1929  D1ACCOUNTFORZEROS:
00002192  5082                    1930          ADDI.L  #8,D2
00002194  93C2                    1931          SUB.L   D2,A1
00002196                          1932  D1DONTWORRY:
00002196  7000                    1933         MOVE.L   #0,D0
00002198  7208                    1934         MOVE.L   #8,D1
0000219A  4E4F                    1935         TRAP     #15
0000219C                          1936         
0000219C                          1937             *----------D2-----------*
0000219C  43F8 375A               1938         LEA      RD2,A1
000021A0  7204                    1939         MOVE.L   #4,D1
000021A2  7001                    1940         MOVE.L   #1,D0
000021A4  4E4F                    1941         TRAP     #15
000021A6  261F                    1942         MOVE.L   (SP)+,D3   
000021A8  4EB9 000026AC           1943         JSR      HEXTOASCII
000021AE  224A                    1944         MOVE.L   A2,A1
000021B0  95CB                    1945         SUB.L    A3,A2
000021B2  240A                    1946         MOVE.L   A2,D2
000021B4  B4BC FFFFFFF8           1947         CMP.L    #-8,D2
000021BA  6700 0006               1948         BEQ      D2DONTWORRY
000021BE                          1949  D2ACCOUNTFORZEROS:
000021BE  5082                    1950          ADDI.L  #8,D2
000021C0  93C2                    1951          SUB.L   D2,A1
000021C2                          1952  D2DONTWORRY:
000021C2  7000                    1953         MOVE.L   #0,D0
000021C4  7208                    1954         MOVE.L   #8,D1
000021C6  4E4F                    1955         TRAP     #15
000021C8                          1956         
000021C8                          1957              *----------D3-----------*
000021C8  43F8 375E               1958         LEA      RD3,A1
000021CC  7204                    1959         MOVE.L   #4,D1
000021CE  7001                    1960         MOVE.L   #1,D0
000021D0  4E4F                    1961         TRAP     #15   
000021D2  261F                    1962         MOVE.L   (SP)+,D3  
000021D4  4EB9 000026AC           1963         JSR      HEXTOASCII
000021DA  224A                    1964         MOVE.L   A2,A1
000021DC  95CB                    1965         SUB.L    A3,A2
000021DE  240A                    1966         MOVE.L   A2,D2
000021E0  B4BC FFFFFFF8           1967         CMP.L    #-8,D2
000021E6  6700 0006               1968         BEQ      D3DONTWORRY
000021EA                          1969  D3ACCOUNTFORZEROS:
000021EA  5082                    1970          ADDI.L  #8,D2
000021EC  93C2                    1971          SUB.L   D2,A1
000021EE                          1972  D3DONTWORRY:
000021EE  7000                    1973         MOVE.L   #0,D0
000021F0  7208                    1974         MOVE.L   #8,D1
000021F2  4E4F                    1975         TRAP     #15
000021F4                          1976         
000021F4                          1977              *----------D4-----------*
000021F4  43F8 3762               1978         LEA      RD4,A1
000021F8  7204                    1979         MOVE.L   #4,D1
000021FA  7001                    1980         MOVE.L   #1,D0
000021FC  4E4F                    1981         TRAP     #15
000021FE  261F                    1982         MOVE.L   (SP)+,D3    
00002200  4EB9 000026AC           1983         JSR      HEXTOASCII
00002206  224A                    1984         MOVE.L   A2,A1
00002208  95CB                    1985         SUB.L    A3,A2
0000220A  240A                    1986         MOVE.L   A2,D2
0000220C  B4BC FFFFFFF8           1987         CMP.L    #-8,D2
00002212  6700 0006               1988         BEQ      D4DONTWORRY
00002216                          1989  D4ACCOUNTFORZEROS:
00002216  5082                    1990          ADDI.L  #8,D2
00002218  93C2                    1991          SUB.L   D2,A1
0000221A                          1992  D4DONTWORRY:
0000221A  7000                    1993         MOVE.L   #0,D0
0000221C  7208                    1994         MOVE.L   #8,D1
0000221E  4E4F                    1995         TRAP     #15
00002220                          1996         
00002220                          1997         *----------D5-----------*
00002220  43F8 3766               1998         LEA      RD5,A1
00002224  7204                    1999         MOVE.L   #4,D1
00002226  7001                    2000         MOVE.L   #1,D0
00002228  4E4F                    2001         TRAP     #15
0000222A  261F                    2002         MOVE.L   (SP)+,D3    
0000222C  4EB9 000026AC           2003         JSR      HEXTOASCII
00002232  224A                    2004         MOVE.L   A2,A1
00002234  95CB                    2005         SUB.L    A3,A2
00002236  240A                    2006         MOVE.L   A2,D2
00002238  B4BC FFFFFFF8           2007         CMP.L    #-8,D2
0000223E  6700 0006               2008         BEQ      D5DONTWORRY
00002242                          2009  D5ACCOUNTFORZEROS:
00002242  5082                    2010          ADDI.L  #8,D2
00002244  93C2                    2011          SUB.L   D2,A1
00002246                          2012  D5DONTWORRY:
00002246  7000                    2013         MOVE.L   #0,D0
00002248  7208                    2014         MOVE.L   #8,D1
0000224A  4E4F                    2015         TRAP     #15
0000224C                          2016  
0000224C                          2017          *----------D6-----------*
0000224C  43F8 376A               2018         LEA      RD6,A1
00002250  7204                    2019         MOVE.L   #4,D1
00002252  7001                    2020         MOVE.L   #1,D0
00002254  4E4F                    2021         TRAP     #15
00002256  261F                    2022         MOVE.L   (SP)+,D3    
00002258  4EB9 000026AC           2023         JSR      HEXTOASCII
0000225E  224A                    2024         MOVE.L   A2,A1
00002260  95CB                    2025         SUB.L    A3,A2
00002262  240A                    2026         MOVE.L   A2,D2
00002264  B4BC FFFFFFF8           2027         CMP.L    #-8,D2
0000226A  6700 0006               2028         BEQ      D6DONTWORRY
0000226E                          2029  D6ACCOUNTFORZEROS:
0000226E  5082                    2030          ADDI.L  #8,D2
00002270  93C2                    2031          SUB.L   D2,A1
00002272                          2032  D6DONTWORRY:
00002272  7000                    2033         MOVE.L   #0,D0
00002274  7208                    2034         MOVE.L   #8,D1
00002276  4E4F                    2035         TRAP     #15
00002278                          2036         
00002278                          2037           *----------D7-----------*
00002278  43F8 376E               2038         LEA      RD7,A1
0000227C  7204                    2039         MOVE.L   #4,D1
0000227E  7001                    2040         MOVE.L   #1,D0
00002280  4E4F                    2041         TRAP     #15
00002282  261F                    2042         MOVE.L   (SP)+,D3    
00002284  4EB9 000026AC           2043         JSR      HEXTOASCII
0000228A  224A                    2044         MOVE.L   A2,A1
0000228C  95CB                    2045         SUB.L    A3,A2
0000228E  240A                    2046         MOVE.L   A2,D2
00002290  B4BC FFFFFFF8           2047         CMP.L    #-8,D2
00002296  6700 0006               2048         BEQ      D7DONTWORRY
0000229A                          2049  D7ACCOUNTFORZEROS:
0000229A  5082                    2050          ADDI.L  #8,D2
0000229C  93C2                    2051          SUB.L   D2,A1
0000229E                          2052  D7DONTWORRY:
0000229E  7000                    2053         MOVE.L   #0,D0
000022A0  7208                    2054         MOVE.L   #8,D1
000022A2  4E4F                    2055         TRAP     #15
000022A4                          2056  
000022A4                          2057     *----------A0-----------*
000022A4  43F8 3772               2058         LEA      RA0,A1
000022A8  7204                    2059         MOVE.L   #4,D1
000022AA  7001                    2060         MOVE.L   #1,D0
000022AC  4E4F                    2061         TRAP     #15
000022AE  261F                    2062         MOVE.L   (SP)+,D3    
000022B0  4EB9 000026AC           2063         JSR      HEXTOASCII
000022B6  224A                    2064         MOVE.L   A2,A1
000022B8  95CB                    2065         SUB.L    A3,A2
000022BA  240A                    2066         MOVE.L   A2,D2
000022BC  B4BC FFFFFFF8           2067         CMP.L    #-8,D2
000022C2  6700 0006               2068         BEQ      A0DONTWORRY
000022C6                          2069  A0ACCOUNTFORZEROS:
000022C6  5082                    2070          ADDI.L  #8,D2
000022C8  93C2                    2071          SUB.L   D2,A1
000022CA                          2072  A0DONTWORRY:
000022CA  7000                    2073         MOVE.L   #0,D0
000022CC  7208                    2074         MOVE.L   #8,D1
000022CE  4E4F                    2075         TRAP     #15
000022D0                          2076         
000022D0                          2077            *----------A1-----------*
000022D0  43F8 3776               2078         LEA      RA1,A1
000022D4  7204                    2079         MOVE.L   #4,D1
000022D6  7001                    2080         MOVE.L   #1,D0
000022D8  4E4F                    2081         TRAP     #15
000022DA  261F                    2082         MOVE.L   (SP)+,D3    
000022DC  4EB9 000026AC           2083         JSR      HEXTOASCII
000022E2  224A                    2084         MOVE.L   A2,A1
000022E4  95CB                    2085         SUB.L    A3,A2
000022E6  240A                    2086         MOVE.L   A2,D2
000022E8  B4BC FFFFFFF8           2087         CMP.L    #-8,D2
000022EE  6700 0006               2088         BEQ      A1DONTWORRY
000022F2                          2089  A1ACCOUNTFORZEROS:
000022F2  5082                    2090          ADDI.L  #8,D2
000022F4  93C2                    2091          SUB.L   D2,A1
000022F6                          2092  A1DONTWORRY:
000022F6  7000                    2093         MOVE.L   #0,D0
000022F8  7208                    2094         MOVE.L   #8,D1
000022FA  4E4F                    2095         TRAP     #15
000022FC                          2096         
000022FC                          2097          *----------A2-----------*
000022FC  43F8 377A               2098         LEA      RA2,A1
00002300  7204                    2099         MOVE.L   #4,D1
00002302  7001                    2100         MOVE.L   #1,D0
00002304  4E4F                    2101         TRAP     #15
00002306  261F                    2102         MOVE.L   (SP)+,D3    
00002308  4EB9 000026AC           2103         JSR      HEXTOASCII
0000230E  224A                    2104         MOVE.L   A2,A1
00002310  95CB                    2105         SUB.L    A3,A2
00002312  240A                    2106         MOVE.L   A2,D2
00002314  B4BC FFFFFFF8           2107         CMP.L    #-8,D2
0000231A  6700 0006               2108         BEQ      A2DONTWORRY
0000231E                          2109  A2ACCOUNTFORZEROS:
0000231E  5082                    2110          ADDI.L  #8,D2
00002320  93C2                    2111          SUB.L   D2,A1
00002322                          2112  A2DONTWORRY:
00002322  7000                    2113         MOVE.L   #0,D0
00002324  7208                    2114         MOVE.L   #8,D1
00002326  4E4F                    2115         TRAP     #15
00002328                          2116         
00002328                          2117           *----------A3-----------*
00002328  43F8 377E               2118         LEA      RA3,A1
0000232C  7204                    2119         MOVE.L   #4,D1
0000232E  7001                    2120         MOVE.L   #1,D0
00002330  4E4F                    2121         TRAP     #15
00002332  261F                    2122         MOVE.L   (SP)+,D3    
00002334  4EB9 000026AC           2123         JSR      HEXTOASCII
0000233A  224A                    2124         MOVE.L   A2,A1
0000233C  95CB                    2125         SUB.L    A3,A2
0000233E  240A                    2126         MOVE.L   A2,D2
00002340  B4BC FFFFFFF8           2127         CMP.L    #-8,D2
00002346  6700 0006               2128         BEQ      A3DONTWORRY
0000234A                          2129  A3ACCOUNTFORZEROS:
0000234A  5082                    2130          ADDI.L  #8,D2
0000234C  93C2                    2131          SUB.L   D2,A1
0000234E                          2132  A3DONTWORRY:
0000234E  7000                    2133         MOVE.L   #0,D0
00002350  7208                    2134         MOVE.L   #8,D1
00002352  4E4F                    2135         TRAP     #15
00002354                          2136         
00002354                          2137          *----------A4-----------*
00002354  43F8 377E               2138         LEA      RA3,A1
00002358  7204                    2139         MOVE.L   #4,D1
0000235A  7001                    2140         MOVE.L   #1,D0
0000235C  4E4F                    2141         TRAP     #15
0000235E  261F                    2142         MOVE.L   (SP)+,D3    
00002360  4EB9 000026AC           2143         JSR      HEXTOASCII
00002366  224A                    2144         MOVE.L   A2,A1
00002368  95CB                    2145         SUB.L    A3,A2
0000236A  240A                    2146         MOVE.L   A2,D2
0000236C  B4BC FFFFFFF8           2147         CMP.L    #-8,D2
00002372  6700 0006               2148         BEQ      A4DONTWORRY
00002376                          2149  A4ACCOUNTFORZEROS:
00002376  5082                    2150          ADDI.L  #8,D2
00002378  93C2                    2151          SUB.L   D2,A1
0000237A                          2152  A4DONTWORRY:
0000237A  7000                    2153         MOVE.L   #0,D0
0000237C  7208                    2154         MOVE.L   #8,D1
0000237E  4E4F                    2155         TRAP     #15
00002380                          2156         
00002380                          2157         *----------A5-----------*
00002380  43F8 377E               2158         LEA      RA3,A1
00002384  7204                    2159         MOVE.L   #4,D1
00002386  7001                    2160         MOVE.L   #1,D0
00002388  4E4F                    2161         TRAP     #15
0000238A  261F                    2162         MOVE.L   (SP)+,D3    
0000238C  4EB9 000026AC           2163         JSR      HEXTOASCII
00002392  224A                    2164         MOVE.L   A2,A1
00002394  95CB                    2165         SUB.L    A3,A2
00002396  240A                    2166         MOVE.L   A2,D2
00002398  B4BC FFFFFFF8           2167         CMP.L    #-8,D2
0000239E  6700 0006               2168         BEQ      A5DONTWORRY
000023A2                          2169  A5ACCOUNTFORZEROS:
000023A2  5082                    2170          ADDI.L  #8,D2
000023A4  93C2                    2171          SUB.L   D2,A1
000023A6                          2172  A5DONTWORRY:
000023A6  7000                    2173         MOVE.L   #0,D0
000023A8  7208                    2174         MOVE.L   #8,D1
000023AA  4E4F                    2175         TRAP     #15
000023AC                          2176         
000023AC                          2177         *----------A6-----------*
000023AC  43F8 377E               2178         LEA      RA3,A1
000023B0  7204                    2179         MOVE.L   #4,D1
000023B2  7001                    2180         MOVE.L   #1,D0
000023B4  4E4F                    2181         TRAP     #15
000023B6  261F                    2182         MOVE.L   (SP)+,D3    
000023B8  4EB9 000026AC           2183         JSR      HEXTOASCII
000023BE  224A                    2184         MOVE.L   A2,A1
000023C0  95CB                    2185         SUB.L    A3,A2
000023C2  240A                    2186         MOVE.L   A2,D2
000023C4  B4BC FFFFFFF8           2187         CMP.L    #-8,D2
000023CA  6700 0006               2188         BEQ      A6DONTWORRY
000023CE                          2189  A6ACCOUNTFORZEROS:
000023CE  5082                    2190          ADDI.L  #8,D2
000023D0  93C2                    2191          SUB.L   D2,A1
000023D2                          2192  A6DONTWORRY:
000023D2  7000                    2193         MOVE.L   #0,D0
000023D4  7208                    2194         MOVE.L   #8,D1
000023D6  4E4F                    2195         TRAP     #15
000023D8                          2196       *-----HACK---*
000023D8  DFFC 0000003C           2197       ADD.L  #60,SP  ;should put stack in correct place
000023DE                          2198       
000023DE                          2199                *----------USP-----------*
000023DE  43F8 3795               2200         LEA      RUS,A1
000023E2  7204                    2201         MOVE.L   #4,D1
000023E4  7001                    2202         MOVE.L   #1,D0
000023E6  4E4F                    2203         TRAP     #15
000023E8  261F                    2204         MOVE.L   (SP)+,D3    
000023EA  4EB9 000026AC           2205         JSR      HEXTOASCII
000023F0  224A                    2206         MOVE.L   A2,A1
000023F2  95CB                    2207         SUB.L    A3,A2
000023F4  240A                    2208         MOVE.L   A2,D2
000023F6  B4BC FFFFFFF8           2209         CMP.L    #-8,D2
000023FC  6700 0006               2210         BEQ      USPDONTWORRY
00002400                          2211  USPACCOUNTFORZEROS:
00002400  5082                    2212          ADDI.L  #8,D2
00002402  93C2                    2213          SUB.L   D2,A1
00002404                          2214  USPDONTWORRY:
00002404  7000                    2215         MOVE.L   #0,D0
00002406  7208                    2216         MOVE.L   #8,D1
00002408  4E4F                    2217         TRAP     #15
0000240A                          2218  
0000240A                          2219                *----------SR-----------*
0000240A  43F8 379D               2220         LEA      RSR,A1
0000240E  7204                    2221         MOVE.L   #4,D1
00002410  7001                    2222         MOVE.L   #1,D0
00002412  4E4F                    2223         TRAP     #15
00002414  361F                    2224         MOVE.W   (SP)+,D3
00002416  3E03                    2225         MOVE.W   D3,D7   ;temp storage to restore before return    
00002418  4EB9 000026AC           2226         JSR      HEXTOASCII
0000241E  224A                    2227         MOVE.L   A2,A1
00002420  95CB                    2228         SUB.L    A3,A2
00002422  240A                    2229         MOVE.L   A2,D2
00002424  B4BC FFFFFFFC           2230         CMP.L    #-4,D2
0000242A  6700 0006               2231         BEQ      SRDONTWORRY
0000242E                          2232  SRACCOUNTFORZEROS:
0000242E  5882                    2233          ADDI.L  #4,D2
00002430  93C2                    2234          SUB.L   D2,A1
00002432                          2235  SRDONTWORRY:
00002432  7000                    2236         MOVE.L   #0,D0
00002434  7204                    2237         MOVE.L   #4,D1
00002436  4E4F                    2238         TRAP     #15
00002438                          2239         
00002438                          2240      *----------SS/A7-----------*
00002438  43F8 378E               2241         LEA      RSS,A1
0000243C  7207                    2242         MOVE.L   #7,D1
0000243E  7001                    2243         MOVE.L   #1,D0
00002440  4E4F                    2244         TRAP     #15
00002442  261F                    2245         MOVE.L   (SP)+,D3    
00002444  4EB9 000026AC           2246         JSR      HEXTOASCII
0000244A  224A                    2247         MOVE.L   A2,A1
0000244C  95CB                    2248         SUB.L    A3,A2
0000244E  240A                    2249         MOVE.L   A2,D2
00002450  B4BC FFFFFFF8           2250         CMP.L    #-8,D2
00002456  6700 0006               2251         BEQ      SSDONTWORRY
0000245A                          2252  SSACCOUNTFORZEROS:
0000245A  5082                    2253          ADDI.L  #8,D2
0000245C  93C2                    2254          SUB.L   D2,A1
0000245E                          2255  SSDONTWORRY:
0000245E  7000                    2256         MOVE.L   #0,D0
00002460  7208                    2257         MOVE.L   #8,D1
00002462  4E4F                    2258         TRAP     #15
00002464                          2259         
00002464                          2260      *----------PC-----------*
00002464  43F8 3799               2261         LEA      RPC,A1
00002468  7204                    2262         MOVE.L   #4,D1
0000246A  7001                    2263         MOVE.L   #1,D0
0000246C  4E4F                    2264         TRAP     #15
0000246E  261F                    2265         MOVE.L   (SP)+,D3    
00002470  4EB9 000026AC           2266         JSR      HEXTOASCII
00002476  224A                    2267         MOVE.L   A2,A1
00002478  95CB                    2268         SUB.L    A3,A2
0000247A  240A                    2269         MOVE.L   A2,D2
0000247C  B4BC FFFFFFF8           2270         CMP.L    #-8,D2
00002482  6700 0006               2271         BEQ      PCDONTWORRY
00002486                          2272  PCACCOUNTFORZEROS:
00002486  5082                    2273          ADDI.L  #8,D2
00002488  93C2                    2274          SUB.L   D2,A1
0000248A                          2275  PCDONTWORRY:
0000248A  7000                    2276         MOVE.L   #0,D0
0000248C  7208                    2277         MOVE.L   #8,D1
0000248E  4E4F                    2278         TRAP     #15       
00002490                          2279         
00002490                          2280     *---DF HACK RESTORE---*
00002490  3F07                    2281     MOVE.W   D7,-(SP)
00002492  DFFC FFFFFFB8           2282     ADD.L    #-72,SP
00002498  4CDF 7FFF               2283     MOVEM.L  (SP)+,D0-D7/A0-A6
0000249C  DFFC 0000000C           2284     ADD.L    #12,SP  ;go back to original value
000024A2  46DF                    2285     MOVE.W   (SP)+,SR
000024A4                          2286          
000024A4  6000 EBCA               2287         BRA SHELL
000024A8                          2288  
000024A8                          2289  *--------------------------------------------------------------------------------------*
000024A8                          2290  
000024A8                          2291  
000024A8                          2292  ************************************EXCEPTIONS!*****************************************
000024A8                          2293  *--------------------------------------------------------------------------------------*
000024A8                          2294  
000024A8                          2295  BERR:
000024A8  48E7 C070               2296          MOVEM.L A1-A3/D0-D1,-(SP)
000024AC  43F8 37A1               2297          LEA     BERR_TEXT,A1
000024B0  700D                    2298          MOVE.L  #13,D0
000024B2  4E4F                    2299          TRAP    #15
000024B4  43F8 3892               2300          LEA     SSW,A1
000024B8  700E                    2301          MOVE.L  #14,D0
000024BA  4E4F                    2302          TRAP    #15
000024BC  362F 0014               2303          MOVE.W  (20,SP),D3
000024C0  4EB9 000026AC           2304          JSR     HEXTOASCII
000024C6  598B                    2305          SUB.L   #4,A3
000024C8  224B                    2306          MOVEA.L A3,A1
000024CA  7204                    2307          MOVE.L  #4,D1
000024CC  7000                    2308          MOVE.L  #0,D0
000024CE  4E4F                    2309          TRAP    #15
000024D0  43F8 3898               2310          LEA     BA,A1
000024D4  700E                    2311          MOVE.L  #14,D0
000024D6  4E4F                    2312          TRAP    #15
000024D8  262F 0016               2313          MOVE.L  (22,SP),D3
000024DC  4EB9 000026AC           2314          JSR     HEXTOASCII
000024E2  518B                    2315          SUB.L   #8,A3
000024E4  224B                    2316          MOVEA.L A3,A1
000024E6  7208                    2317          MOVE.L  #8,D1
000024E8  7000                    2318          MOVE.L  #0,D0
000024EA  4E4F                    2319          TRAP    #15
000024EC  43F8 389D               2320          LEA     IR,A1
000024F0  700E                    2321          MOVE.L  #14,D0
000024F2  4E4F                    2322          TRAP    #15
000024F4  362F 001A               2323          MOVE.W  (26,SP),D3
000024F8  4EB9 000026AC           2324          JSR     HEXTOASCII
000024FE  598B                    2325          SUB.L   #4,A3
00002500  224B                    2326          MOVEA.L A3,A1
00002502  7204                    2327          MOVE.L  #4,D1
00002504  7000                    2328          MOVE.L  #0,D0
00002506  4E4F                    2329          TRAP    #15
00002508  4CDF 0E03               2330          MOVEM.L (SP)+,A1-A3/D0-D1
0000250C  2E7C 01000000           2331          MOVE.L  #$01000000,SP   ;reset stack
00002512  6000 EB5C               2332          BRA     SHELL
00002516                          2333  
00002516                          2334  AERR:
00002516  48E7 C070               2335          MOVEM.L A1-A3/D0-D1,-(SP)
0000251A  43F8 37B9               2336          LEA     AERR_TEXT,A1
0000251E  700D                    2337          MOVE.L  #13,D0
00002520  4E4F                    2338          TRAP    #15
00002522  43F8 3892               2339          LEA     SSW,A1
00002526  700E                    2340          MOVE.L  #14,D0
00002528  4E4F                    2341          TRAP    #15
0000252A  362F 0014               2342          MOVE.W  (20,SP),D3
0000252E  4EB9 000026AC           2343          JSR     HEXTOASCII
00002534  598B                    2344          SUB.L   #4,A3
00002536  224B                    2345          MOVEA.L A3,A1
00002538  7204                    2346          MOVE.L  #4,D1
0000253A  7000                    2347          MOVE.L  #0,D0
0000253C  4E4F                    2348          TRAP    #15
0000253E  43F8 3898               2349          LEA     BA,A1
00002542  700E                    2350          MOVE.L  #14,D0
00002544  4E4F                    2351          TRAP    #15
00002546  262F 0016               2352          MOVE.L  (22,SP),D3
0000254A  4EB9 000026AC           2353          JSR     HEXTOASCII
00002550  518B                    2354          SUB.L   #8,A3
00002552  224B                    2355          MOVEA.L A3,A1
00002554  7208                    2356          MOVE.L  #8,D1
00002556  7000                    2357          MOVE.L  #0,D0
00002558  4E4F                    2358          TRAP    #15
0000255A  43F8 389D               2359          LEA     IR,A1
0000255E  700E                    2360          MOVE.L  #14,D0
00002560  4E4F                    2361          TRAP    #15
00002562  362F 001A               2362          MOVE.W  (26,SP),D3
00002566  4EB9 000026AC           2363          JSR     HEXTOASCII
0000256C  598B                    2364          SUB.L   #4,A3
0000256E  224B                    2365          MOVEA.L A3,A1
00002570  7204                    2366          MOVE.L  #4,D1
00002572  7000                    2367          MOVE.L  #0,D0
00002574  4E4F                    2368          TRAP    #15
00002576  4CDF 0E03               2369          MOVEM.L (SP)+,A1-A3/D0-D1
0000257A  2E7C 01000000           2370          MOVE.L  #$01000000,SP   ;reset stack
00002580  6000 EAEE               2371          BRA     SHELL
00002584                          2372  
00002584                          2373  IERR:
00002584  48E7 8040               2374      MOVEM.L A1/D0,-(SP)
00002588  43F8 37D6               2375      LEA IERR_TEXT,A1
0000258C  700D                    2376      MOVE.L #13,D0
0000258E  4E4F                    2377      TRAP #15
00002590  4CDF 0201               2378      MOVEM.L (SP)+,A1/D0
00002594  2E7C 01000000           2379      MOVE.L #$01000000,SP
0000259A  6000 EAD4               2380      BRA SHELL
0000259E                          2381  
0000259E                          2382  PERR:
0000259E  48E7 8040               2383      MOVEM.L A1/D0,-(SP)
000025A2  43F8 37FF               2384      LEA PERR_TEXT,A1
000025A6  700D                    2385      MOVE.L #13,D0
000025A8  4E4F                    2386      TRAP #15
000025AA  4CDF 0201               2387      MOVEM.L (SP)+,A1/D0
000025AE  2E7C 01000000           2388      MOVE.L #$01000000,SP
000025B4  6000 EABA               2389      BRA SHELL
000025B8                          2390      
000025B8                          2391  ZERR:
000025B8  48E7 8040               2392      MOVEM.L A1/D0,-(SP)
000025BC  43F8 381D               2393      LEA ZERR_TEXT,A1
000025C0  700D                    2394      MOVE.L #13,D0
000025C2  4E4F                    2395      TRAP #15
000025C4  4CDF 0201               2396      MOVEM.L (SP)+,A1/D0
000025C8  2E7C 01000000           2397      MOVE.L #$01000000,SP
000025CE  6000 EAA0               2398      BRA SHELL
000025D2                          2399  
000025D2                          2400  ALERR:
000025D2  48E7 8040               2401      MOVEM.L A1/D0,-(SP)
000025D6  43F8 3840               2402      LEA ALERR_TEXT,A1
000025DA  700D                    2403      MOVE.L #13,D0
000025DC  4E4F                    2404      TRAP #15
000025DE  4CDF 0201               2405      MOVEM.L (SP)+,A1/D0
000025E2  2E7C 01000000           2406      MOVE.L #$01000000,SP
000025E8  6000 EA86               2407      BRA SHELL
000025EC                          2408      
000025EC                          2409  FLERR:
000025EC  48E7 8040               2410      MOVEM.L A1/D0,-(SP)
000025F0  43F8 385C               2411      LEA FLERR_TEXT,A1
000025F4  700D                    2412      MOVE.L #13,D0
000025F6  4E4F                    2413      TRAP #15
000025F8  4CDF 0201               2414      MOVEM.L (SP)+,A1/D0
000025FC  2E7C 01000000           2415      MOVE.L #$01000000,SP
00002602  6000 EA6C               2416      BRA SHELL
00002606                          2417      
00002606                          2418  CHKERR:
00002606  48E7 8040               2419      MOVEM.L A1/D0,-(SP)
0000260A  43F8 3878               2420      LEA CHKERR_TEXT,A1
0000260E  700D                    2421      MOVE.L #13,D0
00002610  4E4F                    2422      TRAP #15
00002612  4CDF 0201               2423      MOVEM.L (SP)+,A1/D0
00002616  2E7C 01000000           2424      MOVE.L #$01000000,SP
0000261C  6000 EA52               2425      BRA SHELL
00002620                          2426  
00002620                          2427  
00002620                          2428  
00002620                          2429  ****************************COMMON SUBROUTINES NEEDED**********************************
00002620                          2430  
00002620                          2431  
00002620                          2432  *--------------------------------------------------------------------------------------*
00002620  43F8 369C               2433  ERRORSR:        LEA   ERROR,A1    ;load message
00002624  323C 002C               2434                  MOVE.W  #44,D1
00002628  7000                    2435                  MOVE.L  #0,D0
0000262A  4E4F                    2436                  TRAP    #15
0000262C  6000 EAC8               2437                  BRA     RESTORE
00002630                          2438  *--------------------------------------------------------------------------------------*
00002630                          2439  ASCII_TO_BCD:   *Number passed via D3 byte size only(to be expected)*
00002630  B67C 0046               2440                  CMP #$46,D3
00002634  6EEA                    2441                  BGT ERRORSR
00002636  B67C 0040               2442                  CMP #$40,D3
0000263A  6E00 000A               2443                  BGT UPPER
0000263E  0483 00000030           2444                  SUBI.L  #$30,D3
00002644  4E75                    2445                  RTS
00002646  0483 00000031           2446  UPPER:          SUBI.L  #$31,D3 ;If ASCII number is A-F
0000264C  4E75                    2447                  RTS
0000264E                          2448  *--------------------------------------------------------------------------------------*
0000264E                          2449  
0000264E                          2450  BCD_TO_HEX:     *Number passed via D3 accepts BYTE ONLY*
0000264E  2803                    2451                  MOVE.L  D3,D4   
00002650  2A03                    2452                  MOVE.L  D3,D5
00002652  0284 000000F0           2453                  ANDI.L  #240,D4 ;upper byte
00002658  0285 0000000F           2454                  ANDI.L  #15,D5  ;lower byte
0000265E  E89C                    2455                  ROR.L   #4,D4   ;get bits into correct place
00002660  C8FC 000A               2456                  MULU    #10,D4  ;multiply by its tens place
00002664  4283                    2457                  CLR.L   D3
00002666  D684                    2458                  ADD.L   D4,D3
00002668  D685                    2459                  ADD.L   D5,D3
0000266A  4E75                    2460                  RTS
0000266C                          2461  *--------------------------------------------------------------------------------------*                
0000266C                          2462  ASCII_ADDRESS:   *Address to be converted from ascii to hex passed through A2 and A3*
0000266C                          2463                   *Returned in D5                                                    *
0000266C  4283                    2464                  CLR.L   D3
0000266E  4285                    2465                  CLR.L   D5
00002670  220A                    2466                  MOVE.L   A2,D1
00002672  200B                    2467                  MOVE.L   A3,D0
00002674  9081                    2468                  SUB.L   D1,D0   ;store the difference in D0
00002676  7800                    2469                  MOVE.L  #0,D4   ;set up 10's place counter
00002678  5380                    2470                  SUBI.L  #1,D0
0000267A  B07C 0000               2471  PLACECOUNTER:   CMP     #0,D0
0000267E  6700 0008               2472                  BEQ     CONVERTADDRESS
00002682  5884                    2473                  ADDI.L  #4,D4
00002684  5380                    2474                  SUBI.L  #1,D0
00002686  60F2                    2475                  BRA     PLACECOUNTER
00002688  B6CA                    2476  CONVERTADDRESS  CMP     A2,A3
0000268A  6700 001E               2477                  BEQ     ADDRESSDONE
0000268E  4283                    2478                  CLR.L   D3
00002690  161A                    2479                  MOVE.B  (A2)+,D3
00002692  48E7 EC30               2480                  MOVEM.L A2-A3/D0-D2/D4-D5,-(SP)   ;so regs dont get destroyed
00002696  4EB8 2630               2481                  JSR     ASCII_TO_BCD
0000269A  4EB8 264E               2482                  JSR     BCD_TO_HEX
0000269E  4CDF 0C37               2483                  MOVEM.L (SP)+,A2-A3/D0-D2/D4-D5
000026A2  E9BB                    2484                  ROL.L     D4,D3
000026A4  5984                    2485                  SUBI.L  #4,D4
000026A6  DA83                    2486                  ADD.L     D3,D5   ;get total
000026A8  60DE                    2487                  BRA     CONVERTADDRESS
000026AA  4E75                    2488  ADDRESSDONE     RTS
000026AC                          2489  
000026AC                          2490  *--------------------------------------------------------------------------------------*
000026AC                          2491  HEXTOASCII: *Result returned in address buffer from A2 to A3, HEX number passed*
000026AC                          2492              *through D3*
000026AC  4284                    2493              CLR.L   D4
000026AE  4285                    2494              CLR.L   D5
000026B0  247C 00003900           2495              MOVE.L  #$3900,A2
000026B6  267C 00003932           2496              MOVE.L  #$3932,A3
000026BC                          2497  KEEP_CONVERTING:
000026BC  1803                    2498              MOVE.B  D3,D4  
000026BE  1A03                    2499              MOVE.B  D3,D5 
000026C0  E08B                    2500              LSR.L   #8,D3   ;prepare for next byte
000026C2  0284 0000000F           2501              ANDI.L  #15,D4   ;get lower byte
000026C8  0285 000000F0           2502              ANDI.L  #240,D5 ;get upper byte'
000026CE  E85D                    2503              ROR     #4,D5   ;move D5 into position
000026D0  B83C 0009               2504              CMP.B     #$9,D4
000026D4  6E00 000C               2505              BGT     A_TO_F
000026D8  0684 00000030           2506              ADDI.L  #$30,D4
000026DE  6000 0008               2507              BRA     NEXTHEX
000026E2  0684 00000037           2508  A_TO_F:     ADDI.L  #$37,D4
000026E8  BA3C 0009               2509  NEXTHEX:    CMP.B     #$9,D5
000026EC  6E00 000C               2510              BGT     A_TO_F2
000026F0  0685 00000030           2511              ADDI.L  #$30,D5
000026F6  6000 0008               2512              BRA     PUTBUFFER
000026FA  0685 00000037           2513  A_TO_F2:    ADDI.L  #$37,D5
00002700  1704                    2514  PUTBUFFER:  MOVE.B  D4,-(A3)
00002702  1705                    2515              MOVE.B  D5,-(A3)
00002704  B6CA                    2516              CMP      A2,A3
00002706  66B4                    2517              BNE      KEEP_CONVERTING
00002708  0C12 0030               2518  RID_ZEROS:  CMP.B   #$30,(A2)
0000270C  6700 0006               2519              BEQ     ADD
00002710  6000 0006               2520              BRA     HEXASCIIDONE
00002714  528A                    2521  ADD:        ADD.L   #1,A2   ;increment to find start of string
00002716  60F0                    2522              BRA     RID_ZEROS
00002718                          2523  HEXASCIIDONE:   
00002718  267C 00003932           2524              MOVE.L  #$3932,A3    ;end of original number
0000271E  B7CA                    2525              CMP.L   A2,A3
00002720  6700 0006               2526              BEQ     ZEROS
00002724  6000 0004               2527              BRA     NOTZEROS
00002728  518A                    2528  ZEROS       SUB.L   #8,A2               
0000272A  4E75                    2529  NOTZEROS    RTS
0000272C                          2530  *--------------------------------------------------------------------------------------*
0000272C                          2531  
0000272C                          2532  
0000272C                          2533  NEXT:   ;for debugging single commands
0000272C                          2534              
0000272C                          2535              
0000272C                          2536              
0000272C                          2537              
0000272C                          2538  
0000272C                          2539  
0000272C                          2540         END    START        

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A0ACCOUNTFORZEROS   22C6
A0DONTWORRY         22CA
A1ACCOUNTFORZEROS   22F2
A1DONTWORRY         22F6
A2ACCOUNTFORZEROS   231E
A2DONTWORRY         2322
A3ACCOUNTFORZEROS   234A
A3DONTWORRY         234E
A4ACCOUNTFORZEROS   2376
A4DONTWORRY         237A
A5ACCOUNTFORZEROS   23A2
A5DONTWORRY         23A6
A6ACCOUNTFORZEROS   23CE
A6DONTWORRY         23D2
ACMP                1B72
ADD                 2714
ADDRESSDONE         26AA
AERR                2516
AERR_TEXT           37B9
AFADDCONV           1B4C
AGETFIRSTADDRESS    1B3A
AGETSECADDRESS      1B5A
ALERR               25D2
ALERR_TEXT          3840
ARESETLOOP          1B70
ASADDCONV           1B64
ASCEND              1B2A
ASCII_ADDRESS       266C
ASCII_TO_BCD        2630
ASWAP               1B80
A_TO_F              26E2
A_TO_F2             26FA
BA                  3898
BCD_TO_HEX          264E
BERR                24A8
BERR_TEXT           37A1
BF                  1E66
BFGETENDADDRONE     1E84
BFGETENDDATA        1E6A
BFGETLASTEND        1EAA
BFNEXTADDR          1E74
BFNEXTADDRTWO       1E8E
BFTEST              11C0
BLCKTEST            1134
BMOV                1EDC
BMOVDONE            1F66
BMOVTEST            119E
BSCH                2040
BSCH1               3729
BSCH2               372F
BSCH3               3741
BSCHENDDATA         2044
BSCHFADDEND         2064
BSCHFIRSTADD        204E
BSCHSECONDADD       206E
BSCHSECONDFIND      207C
BSCHTEST            115A
BTST                1F6A
BTST1               36CC
BTST2               36E0
BTST3               36F1
BTST4               3703
BTST5               370E
BTSTDATALOOP        1FB8
BTSTGETENDADDRONE   1F88
BTSTGETENDDATA      1F6E
BTSTGETLASTEND      1FA2
BTSTNEXTADDR        1F78
BTSTNEXTADDRTWO     1F92
BTSTTEST            117C
BUFFER              3000
BYTEBSCH            20AE
CHKERR              2606
CHKERR_TEXT         3878
COMPLETE            2032
COMPUTATION         1ABE
COMPUTEFIRSTADD     1EEC
COMPUTEFOURTHADDRESS  1F34
COMPUTESECONDADDRESS  1F04
COMPUTETHIRDADDRESS  1F1C
CONVERT             1AA2
CONVERTADDRESS      2688
CONVERTMINUS1       1AA0
D0ACCOUNTFORZEROS   2166
D0DONTWORRY         216A
D1ACCOUNTFORZEROS   2192
D1DONTWORRY         2196
D2ACCOUNTFORZEROS   21BE
D2DONTWORRY         21C2
D3ACCOUNTFORZEROS   21EA
D3DONTWORRY         21EE
D4ACCOUNTFORZEROS   2216
D4DONTWORRY         221A
D5ACCOUNTFORZEROS   2242
D5DONTWORRY         2246
D6ACCOUNTFORZEROS   226E
D6DONTWORRY         2272
D7ACCOUNTFORZEROS   229A
D7DONTWORRY         229E
DATALOOP            1ECE
DATATRANSFER        1F5C
DCMP                1BD0
DEBUG               36C9
DEFAULT             1C20
DESCEND             1B88
DF                  2144
DFADDCONV           1BAA
DFTST               11CE
DGETFIRSTADDRESS    1B98
DGETSECADDRESS      1BB8
DISPLOOP            1A1C
DONEASCEND          1BE6
DONEDESCEND         1BE6
DRESETLOOP          1BCE
DSADDCONV           1BC2
DSWAP               1BDE
ECHO                1300
ECHOTEST            110E
EEND                1302
EFOUND              130C
ENDBF               1ED8
ENDBSCH             2122
ENDCONVERT          1AD0
ENDLP               1E62
ENDPARSE            1CB2
ENDPARSEL           1E5A
ENDPARSEW           1D74
ENDPTRMM            1BF0
ENTER               1CB4
ENTERL              1E5C
ENTERW              1D76
ERROR               369C
ERRORSR             2620
EXECUTE             2134
FAIL                1FD0
FINDEND             1988
FINDEND1            19DE
FINDEND2            19EE
FINDLASTNUM         1A96
FINDNEXT            19E8
FIRSTADDRESS        1EE2
FLERR               25EC
FLERR_TEXT          385C
FONT                1090000
FOUNDB              20D8
FOUNDL              20E8
FOUNDW              20E0
FOURTHADDRESS       1F2A
GGETEND             212A
GO                  2126
GOBACK              1768
GOTST               121C
GREEN               FF00
HELP                176E
HELPORHXDC          1234
HELPTST             124A
HEXASCIIDONE        2718
HEXTOASCII          26AC
HIGHHEX             1ABA
HIGHHEXMM           1CA2
HIGHHEXMML          1E48
HIGHHEXMMW          1D62
HTXT                3063
HTXT1               3074
HTXT10              35E5
HTXT11              3622
HTXT12              365A
HTXT1A              30BF
HTXT1B              30FC
HTXT2               3110
HTXT3               315B
HTXT3A              31A0
HTXT3B              31D9
HTXT3C              31ED
HTXT3D              3202
HTXT3E              321F
HTXT4               3252
HTXT4A              3299
HTXT4B              32DE
HTXT4C              32F9
HTXT4D              3317
HTXT4E              3336
HTXT5               335A
HTXT5A              33A0
HTXT6               33A9
HTXT6A              33EF
HTXT6B              3437
HTXT7               345D
HTXT7A              34A1
HTXT7B              34E9
HTXT8               3501
HTXT8A              3548
HTXT9               3570
HTXT9A              35B8
HXDC                1A76
HXDCTEST            12C8
IERR                2584
IERR_TEXT           37D6
IR                  389D
KEEP_CONVERTING     26BC
LONG                1D7C
LONGBSCH            20CA
MDSPCTEST           1298
MEMCONT             1992
MEMDISP             19D4
MEMNEXT             19F8
MEMSET              1980
MEMTEST             126C
MM                  1BEA
MMSPCTEST           12BA
MODIFYLOOP          1C34
MODIFYLOOPL         1D90
MODIFYLOOPW         1CCE
MODIFYREGS          131A
MODIFYREGTEST       12EA
MRA                 1360
MRA0                159E
MRA1                15DE
MRA2                161E
MRA3                165E
MRA4                169E
MRA5                16DE
MRA6                171E
MRD                 131A
MRD0                139E
MRD1                13DE
MRD2                141E
MRD3                145E
MRD4                149E
MRD5                14DE
MRD6                151E
MRD7                155E
MRDFINDDATA         175E
MSSPCTEST           128A
NEXT                272C
NEXTHEX             26E8
NEXTMMSTEP          1CA6
NEXTMMSTEPL         1E4C
NEXTMMSTEPW         1D66
NOTZEROS            272A
OUTPUTBUFF          3050
OUTPUTNUM           1AEE
PARSELOOP           1C8A
PARSELOOPL          1E30
PARSELOOPW          1D4A
PCACCOUNTFORZEROS   2486
PCDONTWORRY         248A
PERR                259E
PERR_TEXT           37FF
PLACECOUNTER        267A
PROMPT              3058
PUTBUFFER           2700
RA0                 3772
RA1                 3776
RA2                 377A
RA3                 377E
RA4                 3782
RA5                 3786
RA6                 378A
RD0                 3752
RD1                 3756
RD2                 375A
RD3                 375E
RD4                 3762
RD5                 3766
RD6                 376A
RD7                 376E
READ                1FC2
RESTORE             10F6
RID_ZEROS           2708
RPC                 3799
RSR                 379D
RSS                 378E
RUS                 3795
SECONDADDRESS       1EFA
SECONDLOOP          1A54
SHELL               1070
SIZECHECK           1BEE
SORTTEST            11E6
SORTW               1B04
SPACE               36C8
SRACCOUNTFORZEROS   242E
SRDONTWORRY         2432
SSACCOUNTFORZEROS   245A
SSDONTWORRY         245E
SSW                 3892
START               1000
STOREDATA           1EB4
STOREDATABTST       1FAC
SUCCESSTEXT         20EC
TESTOP              2086
THIRDADDRESS        1F12
UPPER               2646
USPACCOUNTFORZEROS  2400
USPDONTWORRY        2404
WORD                1CBA
WORDBSCH            20BC
X                   1BE6
ZEROS               2728
ZERR                25B8
ZERR_TEXT           381D
